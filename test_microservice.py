#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ConnectBot v21
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Django + Java –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
"""

import os
import sys
import json
import time
import requests
from datetime import datetime
from typing import Dict, List, Any, Optional, Tuple

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django –æ–∫—Ä—É–∂–µ–Ω–∏—è
def setup_django():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Django –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import django
    from django.conf import settings
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
    project_root = os.path.dirname(os.path.abspath(__file__))
    sys.path.insert(0, project_root)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Django
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Django
    django.setup()
    
    print("‚úÖ Django –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    return True

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Django –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
setup_django()

from employees.models import Employee
from employees.redis_integration import redis_integration
from employees.redis_events import ConnectBotEvents


class MicroserviceIntegrationTester:
    """–¢–µ—Å—Ç–µ—Ä –≥–∏–±—Ä–∏–¥–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Django + Java –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å"""
    
    def __init__(self):
        self.java_service_url = "http://localhost:8080"
        self.redis_available = False
        self.java_available = False
        self.test_results = {
            'redis_health': False,
            'java_health': False,
            'java_matching': False,
            'python_fallback': False,
            'redis_cache': False,
            'event_publishing': False
        }
        self.statistics = {
            'total_employees': 0,
            'pairs_created': 0,
            'employees_without_pair': 0,
            'test_duration': 0
        }
    
    def print_header(self):
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        print("üéØ" + "="*60 + "üéØ")
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ò–ë–†–ò–î–ù–û–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò CONNECTBOT V21 üß™")
        print("üéØ" + "="*60 + "üéØ")
        print(f"üìÖ –î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üåê Java Service URL: {self.java_service_url}")
        print()
    
    def get_test_employees(self) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        return [
            {
                'id': 1,
                'full_name': '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
                'position': '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
                'department': 'IT',
                'business_center': '–ú–°–ö-1',
                'telegram_id': 111111111,
                'telegram_username': 'ivan_dev',
                'interests': ['coffee', 'chess'],
                'is_active': True
            },
            {
                'id': 2,
                'full_name': '–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤',
                'position': 'HR-–º–µ–Ω–µ–¥–∂–µ—Ä',
                'department': 'HR',
                'business_center': '–ú–°–ö-1',
                'telegram_id': 222222222,
                'telegram_username': 'petr_hr',
                'interests': ['coffee', 'lunch'],
                'is_active': True
            },
            {
                'id': 3,
                'full_name': '–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞',
                'position': '–î–∏–∑–∞–π–Ω–µ—Ä',
                'department': 'Design',
                'business_center': '–ú–°–ö-2',
                'telegram_id': 333333333,
                'telegram_username': 'anna_design',
                'interests': ['coffee', 'photo'],
                'is_active': True
            },
            {
                'id': 4,
                'full_name': '–ú–∏—Ö–∞–∏–ª –ö–æ–∑–ª–æ–≤',
                'position': '–ê–Ω–∞–ª–∏—Ç–∏–∫',
                'department': 'Analytics',
                'business_center': '–ú–°–ö-1',
                'telegram_id': 444444444,
                'telegram_username': 'misha_analyst',
                'interests': ['lunch', 'chess'],
                'is_active': True
            },
            {
                'id': 5,
                'full_name': '–ï–ª–µ–Ω–∞ –ù–æ–≤–∏–∫–æ–≤–∞',
                'position': 'QA-–∏–Ω–∂–µ–Ω–µ—Ä',
                'department': 'QA',
                'business_center': '–ú–°–ö-2',
                'telegram_id': 555555555,
                'telegram_username': 'lena_qa',
                'interests': ['coffee', 'games'],
                'is_active': True
            },
            {
                'id': 6,
                'full_name': '–î–º–∏—Ç—Ä–∏–π –í–æ–ª–∫–æ–≤',
                'position': 'DevOps',
                'department': 'IT',
                'business_center': '–ú–°–ö-1',
                'telegram_id': 666666666,
                'telegram_username': 'dmitry_devops',
                'interests': ['lunch', 'walk'],
                'is_active': True
            }
        ]
    
    def test_redis_health(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ Redis"""
        print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –∑–¥–æ—Ä–æ–≤—å—è...")
        
        try:
            health_info = redis_integration.health_check()
            self.redis_available = health_info.get('redis_available', False)
            
            if self.redis_available:
                print(f"‚úÖ Redis –¥–æ—Å—Ç—É–ø–µ–Ω: {health_info.get('status')}")
                print(f"   Backend: {health_info.get('cache_backend')}")
                print(f"   URL: {health_info.get('redis_url')}")
                self.test_results['redis_health'] = True
            else:
                print(f"‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {health_info.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
            return self.redis_available
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Redis: {e}")
            return False
    
    def test_java_service_health(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ Java –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞"""
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Java –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞...")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º health endpoint
            health_url = f"{self.java_service_url}/api/matching/health"
            response = requests.get(health_url, timeout=5)
            
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º 200 (UP) –∏ 503 (DEGRADED) –∫–∞–∫ –≤–∞–ª–∏–¥–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
            if response.status_code in [200, 503]:
                health_data = response.json() if response.content else {"status": "ok"}
                status = health_data.get('status', 'UNKNOWN')
                overall_status = health_data.get('overall_status', status)
                
                if response.status_code == 200:
                    print(f"‚úÖ Java —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {status})")
                else:
                    print(f"‚ö†Ô∏è Java —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–æ degraded (—Å—Ç–∞—Ç—É—Å: {overall_status})")
                
                print(f"   Status Code: {response.status_code}")
                print(f"   Service: {health_data.get('service', 'Unknown')}")
                print(f"   Version: {health_data.get('version', 'Unknown')}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º algorithms endpoint
                algorithms_url = f"{self.java_service_url}/api/matching/algorithms"
                alg_response = requests.get(algorithms_url, timeout=5)
                
                if alg_response.status_code == 200:
                    algorithms = alg_response.json()
                    print(f"‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º—ã –¥–æ—Å—Ç—É–ø–Ω—ã: {algorithms.get('total', 'unknown')} —à—Ç.")
                    self.java_available = True
                    self.test_results['java_health'] = True
                else:
                    print(f"‚ö†Ô∏è Algorithms endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {alg_response.status_code}")
            else:
                print(f"‚ùå Java —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: HTTP {response.status_code}")
            
            return self.java_available
            
        except requests.exceptions.ConnectTimeout:
            print("‚ùå Java —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        except requests.exceptions.ConnectionError:
            print("‚ùå Java —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Java —Å–µ—Ä–≤–∏—Å–∞: {e}")
        
        return False
    
    def test_java_matching(self, employees: List[Dict[str, Any]]) -> Optional[Dict[str, Any]]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä —á–µ—Ä–µ–∑ Java –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å"""
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä —á–µ—Ä–µ–∑ Java...")
        
        if not self.java_available:
            print("‚ö†Ô∏è Java —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
            return None
        
        try:
            matching_url = f"{self.java_service_url}/api/matching/coffee/simple"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Java —Å–µ—Ä–≤–∏—Å–∞
            java_employees = []
            for emp in employees:
                java_emp = {
                    'id': emp['id'],
                    'full_name': emp['full_name'],
                    'position': emp.get('position', ''),
                    'department': emp.get('department', ''),
                    'is_active': emp.get('is_active', True)
                }
                java_employees.append(java_emp)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            print(f"   –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(java_employees)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...")
            response = requests.post(
                matching_url,
                json=java_employees,
                headers={'Content-Type': 'application/json'},
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                pairs = result.get('pairs', [])
                unpaired = result.get('unpaired', [])
                
                print(f"‚úÖ Java matching —É—Å–ø–µ—à–µ–Ω!")
                print(f"   –ü–∞—Ä —Å–æ–∑–¥–∞–Ω–æ: {len(pairs)}")
                print(f"   –ë–µ–∑ –ø–∞—Ä—ã: {len(unpaired)}")
                
                # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–∞—Ö
                for i, pair in enumerate(pairs[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø–∞—Ä—ã
                    emp1 = pair.get('employee1', {})
                    emp2 = pair.get('employee2', {})
                    print(f"   –ü–∞—Ä–∞ {i}: {emp1.get('full_name', 'N/A')} ‚Üî {emp2.get('full_name', 'N/A')}")
                
                if len(pairs) > 3:
                    print(f"   ... –∏ –µ—â–µ {len(pairs) - 3} –ø–∞—Ä")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.statistics['pairs_created'] = len(pairs)
                self.statistics['employees_without_pair'] = len(unpaired)
                self.test_results['java_matching'] = True
                
                return result
            else:
                print(f"‚ùå Java matching –Ω–µ—É–¥–∞—á–µ–Ω: HTTP {response.status_code}")
                print(f"   Response: {response.text[:200]}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Java matching: {e}")
        
        return None
    
    def python_fallback_matching(self, employees: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Python fallback –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä"""
        import random
        
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Python fallback –∞–ª–≥–æ—Ä–∏—Ç–º–∞...")
        
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ matching
            active_employees = [emp for emp in employees if emp.get('is_active', True)]
            random.shuffle(active_employees)
            
            pairs = []
            unpaired = []
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã
            for i in range(0, len(active_employees) - 1, 2):
                pair = {
                    'employee1': active_employees[i],
                    'employee2': active_employees[i + 1],
                    'match_score': random.randint(60, 95),  # –°–∏–º—É–ª–∏—Ä—É–µ–º score
                    'algorithm': 'python_fallback'
                }
                pairs.append(pair)
            
            # –ï—Å–ª–∏ –Ω–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –ø–∞—Ä—ã
            if len(active_employees) % 2 == 1:
                unpaired.append(active_employees[-1])
            
            result = {
                'pairs': pairs,
                'unpaired': unpaired,
                'total_employees': len(active_employees),
                'algorithm_used': 'python_fallback',
                'success': True
            }
            
            print(f"‚úÖ Python fallback —É—Å–ø–µ—à–µ–Ω!")
            print(f"   –ü–∞—Ä —Å–æ–∑–¥–∞–Ω–æ: {len(pairs)}")
            print(f"   –ë–µ–∑ –ø–∞—Ä—ã: {len(unpaired)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä—ã
            for i, pair in enumerate(pairs[:3], 1):
                emp1 = pair['employee1']
                emp2 = pair['employee2']
                score = pair.get('match_score', 0)
                print(f"   –ü–∞—Ä–∞ {i}: {emp1['full_name']} ‚Üî {emp2['full_name']} (score: {score})")
            
            if len(pairs) > 3:
                print(f"   ... –∏ –µ—â–µ {len(pairs) - 3} –ø–∞—Ä")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è fallback
            if not self.test_results['java_matching']:
                self.statistics['pairs_created'] = len(pairs)
                self.statistics['employees_without_pair'] = len(unpaired)
            
            self.test_results['python_fallback'] = True
            
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Python fallback: {e}")
            return {'pairs': [], 'unpaired': employees, 'success': False}
    
    def test_redis_cache_integration(self, matching_result: Dict[str, Any]) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Redis –∫—ç—à–µ–º"""
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        if not self.redis_available:
            print("‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        try:
            # –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ matching
            cache_key = "test_matching_results"
            success = redis_integration.temp_data.store_temp_data(
                cache_key, matching_result, timeout=300, namespace='matching_tests'
            )
            
            if success:
                print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã matching —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Redis")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
                cached_result = redis_integration.temp_data.get_temp_data(
                    cache_key, namespace='matching_tests'
                )
                
                if cached_result:
                    print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ Redis –∫—ç—à–∞")
                    pairs_count = len(cached_result.get('pairs', []))
                    print(f"   –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä: {pairs_count}")
                    self.test_results['redis_cache'] = True
                    return True
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫—ç—à")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—ç—à–∞: {e}")
        
        return False
    
    def test_event_publishing(self, matching_result: Dict[str, Any]) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–±—ã—Ç–∏–π"""
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π...")
        
        if not self.redis_available:
            print("‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å–æ–±—ã—Ç–∏–π")
            return False
        
        try:
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è matching
            event_data = {
                'pairs_created': len(matching_result.get('pairs', [])),
                'employees_processed': matching_result.get('total_employees', 0),
                'algorithm_used': matching_result.get('algorithm_used', 'unknown'),
                'timestamp': datetime.now().isoformat(),
                'test_mode': True
            }
            
            success = redis_integration.events.publish_global_event(
                ConnectBotEvents.MATCHING_COMPLETED,
                event_data
            )
            
            if success:
                print("‚úÖ –°–æ–±—ã—Ç–∏–µ MATCHING_COMPLETED –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
                
                # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä
                pairs = matching_result.get('pairs', [])
                events_published = 0
                
                for pair in pairs[:3]:  # –ü—É–±–ª–∏–∫—É–µ–º –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 –ø–∞—Ä
                    emp1_id = pair.get('employee1', {}).get('id')
                    emp2_id = pair.get('employee2', {}).get('id')
                    
                    if emp1_id and emp2_id:
                        pair_event = {
                            'partner_id': emp2_id,
                            'partner_name': pair.get('employee2', {}).get('full_name'),
                            'match_type': 'coffee',
                            'test_mode': True
                        }
                        
                        if redis_integration.events.publish_user_event(
                            emp1_id, ConnectBotEvents.ACTIVITY_CREATED, pair_event
                        ):
                            events_published += 1
                
                print(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ {events_published} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π")
                self.test_results['event_publishing'] = True
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π: {e}")
        
        return False
    
    def run_hybrid_integration_test(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        start_time = time.time()
        
        self.print_header()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_employees = self.get_test_employees()
        self.statistics['total_employees'] = len(test_employees)
        
        print(f"üë• –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(test_employees)} —á–µ–ª–æ–≤–µ–∫")
        for emp in test_employees:
            print(f"   ‚Ä¢ {emp['full_name']} ({emp['department']})")
        
        # –¢–µ—Å—Ç 1: Redis –∑–¥–æ—Ä–æ–≤—å–µ
        self.test_redis_health()
        
        # –¢–µ—Å—Ç 2: Java —Å–µ—Ä–≤–∏—Å –∑–¥–æ—Ä–æ–≤—å–µ
        self.test_java_service_health()
        
        # –¢–µ—Å—Ç 3: Java matching –∏–ª–∏ Python fallback
        matching_result = None
        
        if self.java_available:
            matching_result = self.test_java_matching(test_employees)
        
        if not matching_result or not matching_result.get('success', False):
            print("\nüîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ Python fallback...")
            matching_result = self.python_fallback_matching(test_employees)
        
        # –¢–µ—Å—Ç 4: Redis –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
        if matching_result and matching_result.get('success', False):
            self.test_redis_cache_integration(matching_result)
            
            # –¢–µ—Å—Ç 5: –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
            self.test_event_publishing(matching_result)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
        end_time = time.time()
        self.statistics['test_duration'] = round(end_time - start_time, 2)
        self.print_final_results()
    
    def print_final_results(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\nüéØ" + "="*60 + "üéØ")
        print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("üéØ" + "="*60 + "üéØ")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
        print("\nüß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:")
        for test_name, result in self.test_results.items():
            status = "‚úÖ –ü—Ä–æ–π–¥–µ–Ω" if result else "‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω"
            emoji = "‚úÖ" if result else "‚ùå"
            print(f"   {emoji} {test_name.replace('_', ' ').title()}: {status}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   üë• –í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {self.statistics['total_employees']}")
        print(f"   üíï –ü–∞—Ä —Å–æ–∑–¥–∞–Ω–æ: {self.statistics['pairs_created']}")
        print(f"   üòî –ë–µ–∑ –ø–∞—Ä—ã: {self.statistics['employees_without_pair']}")
        print(f"   ‚è±Ô∏è –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {self.statistics['test_duration']} —Å–µ–∫")
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        successful_tests = sum(1 for result in self.test_results.values() if result)
        total_tests = len(self.test_results)
        success_rate = (successful_tests / total_tests) * 100
        
        print(f"\nüéØ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:")
        print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {successful_tests}/{total_tests}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        if success_rate >= 80:
            print("   üöÄ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
        elif success_rate >= 60:
            print("   ‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏")
        else:
            print("   ‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        if not self.test_results['redis_health']:
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å Redis —Å–µ—Ä–≤–µ—Ä–∞")
        if not self.test_results['java_health']:
            print("   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ Java –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –Ω–∞ –ø–æ—Ä—Ç—É 8080")
        if not self.test_results['java_matching']:
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API endpoints Java –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞")
        if self.test_results['python_fallback']:
            print("   ‚Ä¢ Python fallback —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–∏—Å—Ç–µ–º–∞ —É—Å—Ç–æ–π—á–∏–≤–∞")
        
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("üéØ" + "="*60 + "üéØ")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        tester = MicroserviceIntegrationTester()
        tester.run_hybrid_integration_test()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()