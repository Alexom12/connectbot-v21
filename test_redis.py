#!/usr/bin/env python
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ConnectBot v21
"""
import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(r'E:\ConnectBot v21')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from employees.redis_utils import RedisManager
from django.core.cache import cache

def test_redis_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ConnectBot v21")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Redis
    print("\n1Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Redis:")
    if RedisManager.is_redis_available():
        print("   ‚úÖ Redis –¥–æ—Å—Ç—É–ø–µ–Ω")
        redis_status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω"
    else:
        print("   ‚ö†Ô∏è  Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è Django –∫–µ—à)")
        redis_status = "‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    
    # –¢–µ—Å—Ç 2: –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è Django
    print("\n2Ô∏è‚É£  –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è Django:")
    try:
        cache.set('test_django_cache', {'test': 'value'}, 30)
        result = cache.get('test_django_cache')
        cache.delete('test_django_cache')
        
        if result and result.get('test') == 'value':
            print("   ‚úÖ Django –∫–µ—à —Ä–∞–±–æ—Ç–∞–µ—Ç")
            django_cache_status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
        else:
            print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å Django –∫–µ—à–µ–º")
            django_cache_status = "‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ Django –∫–µ—à–∞: {e}")
        django_cache_status = f"‚ùå –û—à–∏–±–∫–∞: {e}"
    
    # –¢–µ—Å—Ç 3: –§—É–Ω–∫—Ü–∏–∏ RedisManager
    print("\n3Ô∏è‚É£  –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π RedisManager:")
    results = {}
    
    try:
        # –¢–µ—Å—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        print("   üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...")
        test_employee_data = {
            'id': 999,
            'full_name': '–¢–µ—Å—Ç–æ–≤—ã–π –°–æ—Ç—Ä—É–¥–Ω–∏–∫',
            'position': 'QA Engineer',
            'telegram_id': 123456789,
            'telegram_username': 'test_user',
        }
        
        success = RedisManager.cache_employee_data(123456789, test_employee_data)
        results['employee_cache'] = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if success else "‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        print(f"      –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ: {'‚úÖ' if success else '‚ùå'}")
        
        cached_data = RedisManager.get_employee_data(123456789)
        cache_retrieval_success = cached_data and cached_data.get('full_name') == '–¢–µ—Å—Ç–æ–≤—ã–π –°–æ—Ç—Ä—É–¥–Ω–∏–∫'
        results['employee_retrieval'] = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if cache_retrieval_success else "‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        print(f"      –ü–æ–ª—É—á–µ–Ω–∏–µ: {'‚úÖ' if cache_retrieval_success else '‚ùå'}")
        
        # –¢–µ—Å—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        print("   üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤...")
        test_interests = [
            {'code': 'coffee', 'name': '–¢–∞–π–Ω—ã–π –∫–æ—Ñ–µ'},
            {'code': 'lunch', 'name': '–û–±–µ–¥ –≤—Å–ª–µ–ø—É—é'}
        ]
        
        success = RedisManager.cache_employee_interests(999, test_interests)
        results['interests_cache'] = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if success else "‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        print(f"      –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {'‚úÖ' if success else '‚ùå'}")
        
        cached_interests = RedisManager.get_employee_interests(999)
        interests_retrieval_success = cached_interests and len(cached_interests) == 2
        results['interests_retrieval'] = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if interests_retrieval_success else "‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        print(f"      –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {'‚úÖ' if interests_retrieval_success else '‚ùå'}")
        
        # –¢–µ—Å—Ç —Å–µ—Å—Å–∏–π –±–æ—Ç–∞
        print("   ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–π –±–æ—Ç–∞...")
        test_session = {
            'current_menu': 'main',
            'user_state': 'active',
            'last_command': '/start',
            'pending_interests': {'coffee': True}
        }
        
        success = RedisManager.store_bot_session(123456789, test_session)
        results['session_store'] = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if success else "‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        print(f"      –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏: {'‚úÖ' if success else '‚ùå'}")
        
        retrieved_session = RedisManager.get_bot_session(123456789)
        session_retrieval_success = (retrieved_session and 
                                   retrieved_session.get('current_menu') == 'main' and
                                   retrieved_session.get('pending_interests', {}).get('coffee') == True)
        results['session_retrieval'] = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if session_retrieval_success else "‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        print(f"      –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏: {'‚úÖ' if session_retrieval_success else '‚ùå'}")
        
        # –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞
        print("   üßπ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞...")
        clear_success = RedisManager.clear_bot_session(123456789)
        invalidate_success = RedisManager.invalidate_employee_cache(123456789)
        
        results['cache_clear'] = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if clear_success and invalidate_success else "‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        print(f"      –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞: {'‚úÖ' if clear_success and invalidate_success else '‚ùå'}")
        
    except Exception as e:
        print(f"   ‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        results['general_error'] = f"‚ùå {e}"
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    print("=" * 50)
    print(f"Redis —Å—Ç–∞—Ç—É—Å:           {redis_status}")
    print(f"Django –∫–µ—à:             {django_cache_status}")
    print()
    print("–§—É–Ω–∫—Ü–∏–∏ RedisManager:")
    for test_name, status in results.items():
        test_display = {
            'employee_cache': '–ö–µ—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤',
            'employee_retrieval': '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞',
            'interests_cache': '–ö–µ—à –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤',
            'interests_retrieval': '–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤',
            'session_store': '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π',
            'session_retrieval': '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π',
            'cache_clear': '–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞'
        }
        print(f"  {test_display.get(test_name, test_name):25} {status}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if not RedisManager.is_redis_available():
        print("  ‚Ä¢ –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ Redis:")
        print("    docker-compose up -d")
        print("  ‚Ä¢ –ü–æ–∫–∞ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è Django –∫–µ—à (locmem)")
    else:
        print("  ‚Ä¢ ‚úÖ Redis –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        print("  ‚Ä¢ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    print()
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_redis_integration()