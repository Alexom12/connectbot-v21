"""
–°—É–ø–µ—Ä-—Å—Ç–æ–π–∫–∏–π –±–æ—Ç —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ retry –ø–æ–ø—ã—Ç–∫–∞–º–∏
"""
import os
import sys
import time
import requests
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(str(Path(__file__).parent))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')

import django
django.setup()

from django.conf import settings

class ReliableTelegramBot:
    def __init__(self):
        self.token = settings.TELEGRAM_BOT_TOKEN
        self.base_url = f"https://api.telegram.org/bot{self.token}/"
        self.offset = 0
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        self.max_retries = 5
        self.base_timeout = 3
        self.max_timeout = 15
        
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'ConnectBot/1.0',
            'Accept': 'application/json'
        })
    
    def robust_request(self, method, url, **kwargs):
        """–°—É–ø–µ—Ä-–Ω–∞–¥–µ–∂–Ω—ã–π HTTP –∑–∞–ø—Ä–æ—Å —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(self.max_retries):
            timeout = min(self.base_timeout * (2 ** attempt), self.max_timeout)
            
            try:
                if method.upper() == 'GET':
                    response = self.session.get(url, timeout=timeout, **kwargs)
                else:
                    response = self.session.post(url, timeout=timeout, **kwargs)
                
                if response.status_code == 200:
                    return response
                    
            except Exception as e:
                print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries} –Ω–µ—É–¥–∞—á–Ω–∞: {type(e).__name__}")
                if attempt < self.max_retries - 1:
                    time.sleep(0.5 * (attempt + 1))
        
        return None
    
    def get_me(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
        response = self.robust_request('GET', self.base_url + "getMe")
        if response:
            data = response.json()
            if data.get('ok'):
                return data['result']
        return None
    
    def get_updates(self):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        params = {
            'offset': self.offset,
            'timeout': 1,  # –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è Telegram
            'limit': 5
        }
        
        response = self.robust_request('GET', self.base_url + "getUpdates", params=params)
        if response:
            data = response.json()
            if data.get('ok'):
                return data['result']
        return []
    
    def send_message(self, chat_id, text):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        data = {
            'chat_id': chat_id,
            'text': text
        }
        
        response = self.robust_request('POST', self.base_url + "sendMessage", data=data)
        if response:
            result = response.json()
            if result.get('ok'):
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}")
                return True
        
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {chat_id}")
        return False
    
    def process_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        chat_id = message['chat']['id']
        user = message.get('from', {})
        text = message.get('text', '')
        
        user_id = user.get('id')
        username = user.get('username', user.get('first_name', str(user_id)))
        
        print(f"üì® {username} (ID:{user_id}): {text}")
        
        if text == '/start':
            response = self.handle_start(user_id, username)
        elif text == '/status':
            response = f"ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!\\n–í—Ä–µ–º—è: {time.strftime('%H:%M:%S')}"
        elif text == '/help':
            response = "üÜò –ö–æ–º–∞–Ω–¥—ã:\\n/start - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\\n/status - —Å—Ç–∞—Ç—É—Å\\n/help - –ø–æ–º–æ—â—å"
        else:
            response = f"üìù –ü–æ–ª—É—á–µ–Ω–æ: {text}\\n–ö–æ–º–∞–Ω–¥—ã: /start /status /help"
        
        return self.send_message(chat_id, response)
    
    def handle_start(self, user_id, username):
        """–ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ /start"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –Ω–∞–ø—Ä—è–º—É—é
            from employees.models import Employee
            
            employee = Employee.objects.filter(
                telegram_id=user_id,
                is_active=True
            ).first()
            
            if employee:
                return (
                    f"‚úÖ –ü—Ä–∏–≤–µ—Ç, {employee.full_name}!\\n"
                    f"üè¢ {employee.position}\\n"
                    f"üè¨ {employee.department}\\n"
                    f"ü§ñ ConnectBot —Ä–∞–±–æ—Ç–∞–µ—Ç!"
                )
            else:
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ username
                employee = Employee.objects.filter(
                    telegram_username__iexact=username,
                    is_active=True
                ).first()
                
                if employee:
                    # –û–±–Ω–æ–≤–ª—è–µ–º telegram_id
                    employee.telegram_id = user_id
                    employee.save()
                    return (
                        f"‚úÖ –ü—Ä–∏–≤–µ—Ç, {employee.full_name}!\\n"
                        f"üè¢ {employee.position}\\n" 
                        f"üÜî –í–∞—à ID –æ–±–Ω–æ–≤–ª–µ–Ω: {user_id}\\n"
                        f"ü§ñ ConnectBot —Ä–∞–±–æ—Ç–∞–µ—Ç!"
                    )
                else:
                    return f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.\\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ handle_start: {e}")
            return "‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
    
    def run_persistent(self):
        """–ó–∞–ø—É—Å–∫ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Å—É–ø–µ—Ä-—Å—Ç–æ–π–∫–æ–≥–æ ConnectBot...")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–æ—Ç—É
        connection_attempts = 0
        max_connection_attempts = 20
        
        while connection_attempts < max_connection_attempts:
            me = self.get_me()
            if me:
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω: @{me['username']} ({me['first_name']})")
                break
            
            connection_attempts += 1
            print(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {connection_attempts}/{max_connection_attempts}...")
            time.sleep(2)
        
        if not me:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–æ—Ç—É –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
            return
        
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        error_count = 0
        max_consecutive_errors = 20
        
        while True:
            try:
                updates = self.get_updates()
                
                if updates:
                    error_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                    
                    for update in updates:
                        update_id = update['update_id']
                        self.offset = update_id + 1
                        
                        if 'message' in update:
                            try:
                                self.process_message(update['message'])
                            except Exception as e:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                else:
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    time.sleep(0.5)
                
            except KeyboardInterrupt:
                print("\\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C...")
                break
            except Exception as e:
                error_count += 1
                print(f"‚ùå –û—à–∏–±–∫–∞ #{error_count}: {type(e).__name__}")
                
                if error_count >= max_consecutive_errors:
                    print(f"üí• –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥ ({max_consecutive_errors})")
                    break
                
                # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                time.sleep(min(5, error_count * 0.5))
        
        print("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    bot = ReliableTelegramBot()
    bot.run_persistent()