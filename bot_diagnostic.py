"""
–°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏–∑ —Ñ–∞–π–ª–∞
"""
import os
import sys
import time
import json
import requests
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(str(Path(__file__).parent))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')

import django
django.setup()

from django.conf import settings
from employees.models import Employee

class FileBasedBot:
    """–ë–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —á–∏—Ç–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Ñ–∞–π–ª–∞ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –≤ —Ñ–∞–π–ª"""
    
    def __init__(self):
        self.token = settings.TELEGRAM_BOT_TOKEN
        self.base_url = f"https://api.telegram.org/bot{self.token}/"
        self.commands_file = "bot_commands.json"
        self.responses_file = "bot_responses.json"
        
    def process_start_command(self, user_id, username):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            # –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ
            employee = Employee.objects.filter(telegram_id=user_id, is_active=True).first()
            
            if not employee:
                # –ü–æ–∏—Å–∫ –ø–æ username
                employee = Employee.objects.filter(
                    telegram_username__iexact=username, 
                    is_active=True
                ).first()
                
                if employee and not employee.telegram_id:
                    employee.telegram_id = user_id
                    employee.save()
            
            if employee:
                return {
                    'success': True,
                    'message': (
                        f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {employee.full_name}!\\n"
                        f"üè¢ –ü–æ–∑–∏—Ü–∏—è: {employee.position}\\n"
                        f"üè¨ –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: {employee.department}\\n"
                        f"üìß Email: {employee.email}\\n\\n"
                        f"ü§ñ ConnectBot –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{employee.telegram_username}\\n"
                        f"üÜî –í–∞—à Telegram ID: {user_id}"
                    )
                }
            else:
                return {
                    'success': False,
                    'message': f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                }
                
        except Exception as e:
            return {
                'success': False,
                'message': f"‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"
            }
    
    def check_user_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Alexis_yes"""
        try:
            # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_by_id = Employee.objects.filter(telegram_id=1315776671).first()
            user_by_username = Employee.objects.filter(telegram_username__iexact="Alexis_yes").first()
            
            result = {
                'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
                'search_by_id': None,
                'search_by_username': None,
                'all_users_count': Employee.objects.filter(is_active=True).count()
            }
            
            if user_by_id:
                result['search_by_id'] = {
                    'found': True,
                    'full_name': user_by_id.full_name,
                    'position': user_by_id.position,
                    'telegram_id': user_by_id.telegram_id,
                    'telegram_username': user_by_id.telegram_username,
                    'is_active': user_by_id.is_active,
                    'authorized': user_by_id.authorized
                }
            
            if user_by_username:
                result['search_by_username'] = {
                    'found': True,
                    'full_name': user_by_username.full_name,
                    'position': user_by_username.position,
                    'telegram_id': user_by_username.telegram_id,
                    'telegram_username': user_by_username.telegram_username,
                    'is_active': user_by_username.is_active,
                    'authorized': user_by_username.authorized
                }
            
            return result
            
        except Exception as e:
            return {'error': str(e)}
    
    def manual_test(self):
        """–†—É—á–Ω–æ–π —Ç–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø Alexis_yes")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        status = self.check_user_status()
        print(f"–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {status.get('timestamp', 'N/A')}")
        print(f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {status.get('all_users_count', 0)}")
        
        print("\\nüîé –ü–æ–∏—Å–∫ –ø–æ Telegram ID (1315776671):")
        id_result = status.get('search_by_id')
        if id_result and id_result.get('found'):
            print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω: {id_result['full_name']}")
            print(f"     –ü–æ–∑–∏—Ü–∏—è: {id_result['position']}")
            print(f"     Telegram ID: {id_result['telegram_id']}")
            print(f"     Username: @{id_result['telegram_username']}")
            print(f"     –ê–∫—Ç–∏–≤–µ–Ω: {id_result['is_active']}")
            print(f"     –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {id_result['authorized']}")
        else:
            print("  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID")
        
        print("\\nüîé –ü–æ–∏—Å–∫ –ø–æ Username (@Alexis_yes):")
        username_result = status.get('search_by_username')
        if username_result and username_result.get('found'):
            print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω: {username_result['full_name']}")
            print(f"     –ü–æ–∑–∏—Ü–∏—è: {username_result['position']}")
            print(f"     Telegram ID: {username_result['telegram_id']}")
            print(f"     Username: @{username_result['telegram_username']}")
            print(f"     –ê–∫—Ç–∏–≤–µ–Ω: {username_result['is_active']}")
            print(f"     –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {username_result['authorized']}")
        else:
            print("  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ username")
        
        print("\\nüß™ –¢–ï–°–¢ –ö–û–ú–ê–ù–î–´ /start:")
        start_result = self.process_start_command(1315776671, "Alexis_yes")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£–°–ü–ï–•' if start_result['success'] else '‚ùå –û–¢–ö–ê–ó'}")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ:")
        print(start_result['message'])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        with open('bot_diagnostic.json', 'w', encoding='utf-8') as f:
            json.dump({
                'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
                'status_check': status,
                'start_command_test': start_result
            }, f, ensure_ascii=False, indent=2)
        
        print("\\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ bot_diagnostic.json")

if __name__ == '__main__':
    bot = FileBasedBot()
    bot.manual_test()