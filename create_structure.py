import os
import json
from pathlib import Path

def create_project_structure():
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ ConnectBot v21"""
    
    # –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    project_root = Path("E:/ConnectBot v21")
    project_root.mkdir(parents=True, exist_ok=True)
    
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ ConnectBot v21...")
    
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫
    directories = [
        "venv",
        "config",
        "bots/management/commands",
        "bots/migrations",
        "employees/migrations", 
        "employees/management/commands",
        "scripts",
        "static/css",
        "static/js",
        "static/images",
        "templates/admin",
        "templates/bots",
        "data/import",
        "data/export",
        "logs",
        "tests/unit",
        "tests/integration",
        "docs"
    ]
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
    for directory in directories:
        dir_path = project_root / directory
        dir_path.mkdir(parents=True, exist_ok=True)
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {directory}")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã
    create_manage_py(project_root)
    create_requirements(project_root)
    create_env_file(project_root)
    create_vscode_settings(project_root)
    create_config_files(project_root)
    create_bot_files(project_root)
    create_employee_files(project_root)
    create_script_files(project_root)
    create_gitignore(project_root)
    
    print("\n‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
    print("üìç –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: E:/ConnectBot v21/")

def create_manage_py(project_root):
    """–°–æ–∑–¥–∞–µ—Ç manage.py"""
    content = '''#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
'''
    file_path = project_root / "manage.py"
    file_path.write_text(content, encoding='utf-8')
    print("üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: manage.py")

def create_requirements(project_root):
    """–°–æ–∑–¥–∞–µ—Ç requirements.txt"""
    content = '''Django>=4.2,<5.0
python-telegram-bot==20.7
apscheduler==3.10.4
pandas>=1.5.0
python-dotenv>=1.0.0
asgiref>=3.7.0
setuptools<81
openpyxl>=3.0.0
python-decouple>=3.8
'''
    file_path = project_root / "requirements.txt"
    file_path.write_text(content, encoding='utf-8')
    print("üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: requirements.txt")

def create_env_file(project_root):
    """–°–æ–∑–¥–∞–µ—Ç .env —Ñ–∞–π–ª"""
    content = '''# Django Settings
DEBUG=True
SECRET_KEY=django-insecure-change-this-in-production-12345

# Telegram Bot
TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here

# Database
DATABASE_URL=sqlite:///db.sqlite3

# Encoding
PYTHONIOENCODING=utf-8

# Admin
SUPER_ADMIN_ID=123456789
'''
    file_path = project_root / ".env"
    file_path.write_text(content, encoding='utf-8')
    print("üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: .env")

def create_vscode_settings(project_root):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VS Code"""
    settings = {
        "python.defaultInterpreterPath": "E:\\\\ConnectBot v21\\\\venv\\\\Scripts\\\\python.exe",
        "python.envFile": "${workspaceFolder}\\.env",
        "python.terminal.activateEnvironment": True,
        "files.autoSave": "afterDelay",
        "editor.formatOnSave": True,
        "python.analysis.extraPaths": [
            "./bots",
            "./employees"
        ],
        "[python]": {
            "editor.defaultFormatter": "ms-python.python",
            "editor.tabSize": 4,
            "editor.insertSpaces": True,
            "editor.codeActionsOnSave": {
                "source.organizeImports": True
            }
        }
    }
    
    vscode_dir = project_root / ".vscode"
    vscode_dir.mkdir(exist_ok=True)
    
    settings_path = vscode_dir / "settings.json"
    settings_path.write_text(json.dumps(settings, indent=4, ensure_ascii=False), encoding='utf-8')
    print("üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: .vscode/settings.json")

def create_config_files(project_root):
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã Django"""
    
    # __init__.py –¥–ª—è config
    init_file = project_root / "config" / "__init__.py"
    init_file.write_text("", encoding='utf-8')
    
    # settings.py
    settings_content = '''"""
Django settings for ConnectBot project
"""

import os
from pathlib import Path
from decouple import config

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = config('SECRET_KEY', default='django-insecure-change-in-production')
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = ['localhost', '127.0.0.1']

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Custom apps
    'employees',
    'bots',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

LANGUAGE_CODE = 'ru-ru'
TIME_ZONE = 'Europe/Moscow'
USE_I18N = True
USE_TZ = True

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Telegram Bot Settings
TELEGRAM_BOT_TOKEN = config('TELEGRAM_BOT_TOKEN', default='')
SUPER_ADMIN_ID = config('SUPER_ADMIN_ID', default=0, cast=int)

# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'bot.log',
        },
    },
    'root': {
        'handlers': ['file'],
        'level': 'INFO',
    },
}
'''
    settings_file = project_root / "config" / "settings.py"
    settings_file.write_text(settings_content, encoding='utf-8')
    print("üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: config/settings.py")
    
    # urls.py
    urls_content = '''"""
URL configuration for ConnectBot project.
"""
from django.contrib import admin
from django.urls import path

urlpatterns = [
    path('admin/', admin.site.urls),
]
'''
    urls_file = project_root / "config" / "urls.py"
    urls_file.write_text(urls_content, encoding='utf-8')
    print("üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: config/urls.py")

def create_bot_files(project_root):
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª—ã –¥–ª—è –º–æ–¥—É–ª—è bots"""
    
    # __init__.py —Ñ–∞–π–ª—ã
    init_paths = [
        "bots/__init__.py",
        "bots/management/__init__.py", 
        "bots/management/commands/__init__.py",
        "bots/migrations/__init__.py"
    ]
    
    for init_path in init_paths:
        file_path = project_root / init_path
        file_path.write_text("", encoding='utf-8')
    
    # runbot.py
    runbot_content = '''"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞ ConnectBot
"""
import asyncio
import logging
from django.conf import settings
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from asgiref.sync import sync_to_async

logger = logging.getLogger(__name__)

class ConnectBot:
    def __init__(self):
        self.token = settings.TELEGRAM_BOT_TOKEN
        self.application = None
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        try:
            # –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –±–∞–∑–µ
            employee = await self.find_employee_by_user(user)
            
            if employee:
                await update.message.reply_text(
                    f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {employee.full_name}! üéâ\\n"
                    "–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ ConnectBot."
                )
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
            else:
                await update.message.reply_text(
                    "üîê *–î–æ—Å—Ç—É–ø –∫ ConnectBot –æ–≥—Ä–∞–Ω–∏—á–µ–Ω*\\n\\n"
                    "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –∫–æ–º–ø–∞–Ω–∏–∏.\\n"
                    "–ï—Å–ª–∏ –≤—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    @sync_to_async
    def find_employee_by_user(self, user):
        """–ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        from employees.models import Employee
        
        username = user.username
        
        if not username:
            return None
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è username
        normalized_username = self.normalize_username(username)
        
        try:
            # –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
            employee = Employee.objects.filter(
                telegram_username__iexact=username
            ).first()
            
            if employee:
                # –û–±–Ω–æ–≤–ª—è–µ–º telegram_id –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if not employee.telegram_id:
                    employee.telegram_id = user.id
                    employee.save()
                return employee
            
            # Relaxed matching –ø–æ–∏—Å–∫
            employees = Employee.objects.all()
            matches = []
            
            for emp in employees:
                if emp.telegram_username:
                    emp_normalized = self.normalize_username(emp.telegram_username)
                    if emp_normalized == normalized_username:
                        matches.append(emp)
            
            if len(matches) == 1:
                employee = matches[0]
                if not employee.telegram_id:
                    employee.telegram_id = user.id
                    employee.save()
                return employee
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
            
        return None
    
    def normalize_username(self, username):
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è username –¥–ª—è –ø–æ–∏—Å–∫–∞"""
        if not username:
            return ""
        return username.strip().lstrip('@').lower().replace('_', '').replace('-', '').replace('.', '')
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start))
        # –ó–¥–µ—Å—å –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.token:
            logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
        
        self.application = Application.builder().token(self.token).build()
        self.setup_handlers()
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
        await self.application.run_polling()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    bot = ConnectBot()
    
    try:
        asyncio.run(bot.run())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()
'''
    runbot_file = project_root / "bots" / "management" / "commands" / "runbot.py"
    runbot_file.write_text(runbot_content, encoding='utf-8')
    print("üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: bots/management/commands/runbot.py")

def create_employee_files(project_root):
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª—ã –¥–ª—è –º–æ–¥—É–ª—è employees"""
    
    # __init__.py —Ñ–∞–π–ª—ã
    init_paths = [
        "employees/__init__.py",
        "employees/management/__init__.py",
        "employees/management/commands/__init__.py", 
        "employees/migrations/__init__.py"
    ]
    
    for init_path in init_paths:
        file_path = project_root / init_path
        file_path.write_text("", encoding='utf-8')
    
    # models.py
    models_content = '''"""
–ú–æ–¥–µ–ª–∏ –¥–ª—è –º–æ–¥—É–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
"""
from django.db import models

class Employee(models.Model):
    """–ú–æ–¥–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    full_name = models.CharField("–§–ò–û", max_length=200)
    position = models.CharField("–î–æ–ª–∂–Ω–æ—Å—Ç—å", max_length=200, blank=True, null=True)
    department = models.CharField("–û—Ç–¥–µ–ª", max_length=200, blank=True, null=True)
    business_center = models.CharField("–ë–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä", max_length=100, blank=True, null=True)
    
    # Telegram –¥–∞–Ω–Ω—ã–µ
    telegram_id = models.BigIntegerField("Telegram ID", unique=True, blank=True, null=True)
    telegram_username = models.CharField("Telegram username", max_length=100, blank=True, null=True)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    birth_date = models.DateField("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", blank=True, null=True)
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω—ã–π", default=True)
    
    # –î–∞—Ç—ã
    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω", auto_now_add=True)
    updated_at = models.DateTimeField("–û–±–Ω–æ–≤–ª–µ–Ω", auto_now=True)
    
    class Meta:
        verbose_name = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫"
        verbose_name_plural = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"
        ordering = ['full_name']
    
    def __str__(self):
        return f"{self.full_name} ({self.position or '–ù–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–∏'})"

class Interest(models.Model):
    """–ú–æ–¥–µ–ª—å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤/–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"""
    
    INTEREST_TYPES = [
        ('coffee', '‚òïÔ∏è –¢–∞–π–Ω—ã–π –∫–æ—Ñ–µ'),
        ('lunch', 'üçù –û–±–µ–¥ –≤—Å–ª–µ–ø—É—é'),
        ('walk', 'üö∂ –°–ª–µ–ø–∞—è –ø—Ä–æ–≥—É–ª–∫–∞'),
        ('chess', '‚ôüÔ∏è –®–∞—Ö–º–∞—Ç—ã'),
        ('pingpong', 'üèì –ù–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å'),
        ('games', 'üé≤ –ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã'),
        ('photo', 'üì∏ –§–æ—Ç–æ–∫–≤–µ—Å—Ç—ã'),
        ('masterclass', 'üß† –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã'),
        ('clubs', 'üìö –ö–ª—É–±—ã –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º'),
    ]
    
    code = models.CharField("–ö–æ–¥", max_length=20, choices=INTEREST_TYPES, unique=True)
    name = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ", max_length=100)
    emoji = models.CharField("–≠–º–æ–¥–∑–∏", max_length=10)
    description = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ", blank=True)
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω—ã–π", default=True)
    
    class Meta:
        verbose_name = "–ò–Ω—Ç–µ—Ä–µ—Å"
        verbose_name_plural = "–ò–Ω—Ç–µ—Ä–µ—Å—ã"
    
    def __str__(self):
        return f"{self.emoji} {self.name}"

class EmployeeInterest(models.Model):
    """–°–≤—è–∑—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏"""
    
    employee = models.ForeignKey(Employee, on_delete=models.CASCADE, related_name='interests')
    interest = models.ForeignKey(Interest, on_delete=models.CASCADE)
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω–∞", default=True)
    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω–∞", auto_now_add=True)
    
    class Meta:
        verbose_name = "–ò–Ω—Ç–µ—Ä–µ—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
        verbose_name_plural = "–ò–Ω—Ç–µ—Ä–µ—Å—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
        unique_together = ['employee', 'interest']
    
    def __str__(self):
        return f"{self.employee.full_name} - {self.interest.name}"
'''
    models_file = project_root / "employees" / "models.py"
    models_file.write_text(models_content, encoding='utf-8')
    print("üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: employees/models.py")

def create_script_files(project_root):
    """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º"""
    
    # start_services.ps1
    ps_script = '''# PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ ConnectBot

Write-Host "üöÄ –ó–∞–ø—É—Å–∫ ConnectBot —Å–µ—Ä–≤–∏—Å–æ–≤..." -ForegroundColor Green

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
$venvPath = "E:\\ConnectBot v21\\venv"
if (-Not (Test-Path $venvPath)) {
    Write-Host "‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" -ForegroundColor Red
    Write-Host "–°–æ–∑–¥–∞–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: python -m venv venv" -ForegroundColor Yellow
    exit 1
}

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
$activateScript = "$venvPath\\Scripts\\Activate.ps1"
if (Test-Path $activateScript) {
    & $activateScript
} else {
    Write-Host "‚ùå –°–∫—Ä–∏–ø—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω" -ForegroundColor Red
    exit 1
}

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
Write-Host "üì¶ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π..." -ForegroundColor Yellow
python manage.py migrate

# –ó–∞–ø—É—Å–∫ Django —Å–µ—Ä–≤–µ—Ä–∞
Write-Host "üåê –ó–∞–ø—É—Å–∫ Django —Å–µ—Ä–≤–µ—Ä–∞..." -ForegroundColor Cyan
Start-Process python -ArgumentList "manage.py", "runserver" -NoNewWindow

# –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
Write-Host "ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞..." -ForegroundColor Cyan
Start-Process python -ArgumentList "manage.py", "runbot" -NoNewWindow

Write-Host "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!" -ForegroundColor Green
Write-Host "‚Ä¢ Django admin: http://localhost:8000/admin/" -ForegroundColor Gray
Write-Host "‚Ä¢ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π" -ForegroundColor Gray
'''
    ps_file = project_root / "scripts" / "start_services.ps1"
    ps_file.write_text(ps_script, encoding='utf-8')
    print("üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: scripts/start_services.ps1")

def create_gitignore(project_root):
    """–°–æ–∑–¥–∞–µ—Ç .gitignore —Ñ–∞–π–ª"""
    gitignore_content = '''# Django
*.log
*.pot
*.pyc
__pycache__/
local_settings.py
db.sqlite3
media/

# Virtual Environment
venv/
env/
ENV/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Logs
logs/*.log
bot.log
bot.err

# Data
data/import/*.xlsx
data/export/*.csv

# Environment variables
.env
'''
    gitignore_file = project_root / ".gitignore"
    gitignore_file.write_text(gitignore_content, encoding='utf-8')
    print("üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: .gitignore")

if __name__ == "__main__":
    create_project_structure()