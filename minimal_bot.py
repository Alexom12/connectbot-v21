"""
–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –±–æ—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é
"""
import os
import sys
import time
import requests
from pathlib import Path
import urllib3

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(str(Path(__file__).parent))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')

import django
django.setup()

from django.conf import settings
from employees.models import Employee

class MinimalBot:
    def __init__(self):
        self.token = settings.TELEGRAM_BOT_TOKEN
        self.base_url = f"https://api.telegram.org/bot{self.token}/"
        self.offset = 0
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        self.session = requests.Session()
        
        # –û—Ç–∫–ª—é—á–∞–µ–º SSL –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.session.verify = False
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã
        self.session.timeout = (3, 5)  # (connect, read)
        
        # –û—Ç–∫–ª—é—á–∞–µ–º keep-alive –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
        self.session.headers.update({
            'Connection': 'close',
            'User-Agent': 'MinimalBot/1.0'
        })
    
    def safe_request(self, method, endpoint, **kwargs):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π HTTP –∑–∞–ø—Ä–æ—Å"""
        url = self.base_url + endpoint
        
        try:
            if method.upper() == 'GET':
                response = self.session.get(url, **kwargs)
            else:
                response = self.session.post(url, **kwargs)
            
            if response.status_code == 200:
                return response.json()
            else:
                print(f"HTTP {response.status_code}: {response.text[:100]}")
                
        except Exception as e:
            print(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__}")
        
        return None
    
    def get_bot_info(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É"""
        result = self.safe_request('GET', 'getMe')
        if result and result.get('ok'):
            return result['result']
        return None
    
    def get_updates(self):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º"""
        params = {
            'offset': self.offset,
            'timeout': 1,
            'limit': 1
        }
        
        result = self.safe_request('GET', 'getUpdates', params=params)
        if result and result.get('ok'):
            return result['result']
        return []
    
    def send_message(self, chat_id, text):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        data = {
            'chat_id': chat_id,
            'text': text[:4000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        }
        
        result = self.safe_request('POST', 'sendMessage', data=data)
        if result and result.get('ok'):
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}")
            return True
        
        print(f"‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}")
        return False
    
    def handle_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        chat_id = message['chat']['id']
        user = message.get('from', {})
        text = message.get('text', '')
        
        user_id = user.get('id')
        username = user.get('username', user.get('first_name', 'Unknown'))
        
        print(f"üì© {username}({user_id}): {text}")
        
        # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if text == '/start':
            response = self.cmd_start(user_id, username)
        elif text == '/info':
            response = f"‚ÑπÔ∏è –ë–æ—Ç: @ConnectBot_BG_TEST_bot\\n–í—Ä–µ–º—è: {time.strftime('%H:%M:%S')}"
        elif text == '/ping':
            response = "üèì pong!"
        else:
            response = f"–ü–æ–ª—É—á–µ–Ω–æ: {text}\\n\\n–ö–æ–º–∞–Ω–¥—ã:\\n/start - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\\n/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\\n/ping - —Ç–µ—Å—Ç"
        
        return self.send_message(chat_id, response)
    
    def cmd_start(self, user_id, username):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        try:
            employee = Employee.objects.filter(telegram_id=user_id, is_active=True).first()
            
            if not employee:
                employee = Employee.objects.filter(
                    telegram_username__iexact=username, 
                    is_active=True
                ).first()
                if employee:
                    employee.telegram_id = user_id
                    employee.save()
            
            if employee:
                return (
                    f"‚úÖ {employee.full_name}\\n"
                    f"üè¢ {employee.position}\\n"
                    f"ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"
                )
            else:
                return f"‚ùå {username} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
                
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞: {e}"
    
    def run_minimal(self):
        """–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∑–∞–ø—É—Å–∫"""
        print("ü§ñ –ó–∞–ø—É—Å–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        retries = 0
        while retries < 10:
            bot_info = self.get_bot_info()
            if bot_info:
                print(f"‚úÖ @{bot_info['username']}")
                break
            retries += 1
            print(f"–ü–æ–ø—ã—Ç–∫–∞ {retries}/10...")
            time.sleep(1)
        
        if not bot_info:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
            return
        
        print("üîÑ Polling...")
        
        failures = 0
        max_failures = 50
        
        while failures < max_failures:
            try:
                updates = self.get_updates()
                
                if updates:
                    failures = 0
                    for update in updates:
                        self.offset = update['update_id'] + 1
                        if 'message' in update:
                            self.handle_message(update['message'])
                else:
                    time.sleep(0.2)
                    
            except KeyboardInterrupt:
                print("\\nüëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞")
                break
            except Exception as e:
                failures += 1
                print(f"–û—à–∏–±–∫–∞ {failures}/{max_failures}: {type(e).__name__}")
                time.sleep(0.5)
        
        if failures >= max_failures:
            print(f"üí• –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—à–∏–±–æ–∫")

if __name__ == '__main__':
    bot = MinimalBot()
    bot.run_minimal()