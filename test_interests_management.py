#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏ –≤ ConnectBot
"""

import os
import sys
import django
import asyncio
import logging

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from employees.models import Employee, Interest, EmployeeInterest
from employees.utils import PreferenceManager
from bots.menu_manager import MenuManager

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('test_interests.log')
    ]
)
logger = logging.getLogger(__name__)

async def test_interests_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏"""
    
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ò–ù–¢–ï–†–ï–°–ê–ú–ò\n" + "="*50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
    print("\n1. üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã...")
    try:
        all_interests = await PreferenceManager.get_all_interests()
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {len(all_interests)}")
        
        if not all_interests:
            print("   ‚ö†Ô∏è  –ù–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–µ...")
            await create_default_interests()
            all_interests = await PreferenceManager.get_all_interests()
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {len(all_interests)}")
        
        for interest in all_interests:
            print(f"      ‚Ä¢ {interest.emoji} {interest.name} (–∫–æ–¥: {interest.code})")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {e}")
        return False
    
    # 2. –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    print("\n2. üë§ –ò—â–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞...")
    try:
        employee = await Employee.objects.afirst()
        if not employee:
            print("   ‚ùå –ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
            return False
        
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee.full_name}")
        print(f"      Telegram ID: {employee.telegram_id}")
        print(f"      –î–æ–ª–∂–Ω–æ—Å—Ç—å: {employee.position}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
        return False
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    print("\n3. üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞...")
    try:
        employee_interests = await PreferenceManager.get_employee_interests(employee)
        active_interests = [ei for ei in employee_interests if ei.is_active]
        
        print(f"   ‚úÖ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {len(employee_interests)}")
        print(f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {len(active_interests)}")
        
        if active_interests:
            for ei in active_interests:
                print(f"      ‚Ä¢ ‚úÖ {ei.interest.emoji} {ei.interest.name}")
        else:
            print("      üìù –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
        return False
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    print("\n4. üì± –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏...")
    try:
        menu_data = await MenuManager.create_interests_menu(employee)
        
        print("   ‚úÖ –ú–µ–Ω—é —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
        print(f"   üìù –¢–µ–∫—Å—Ç –º–µ–Ω—é:")
        print("   " + "\n   ".join(menu_data['text'].split('\n')))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = menu_data['reply_markup'].inline_keyboard
        print(f"\n   üîò –ö–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é: {len(keyboard)}")
        
        interest_buttons = []
        for row in keyboard:
            for button in row:
                if 'toggle_interest_' in button.callback_data:
                    interest_buttons.append(button)
        
        print(f"   üéØ –ö–Ω–æ–ø–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {len(interest_buttons)}")
        
        for button in interest_buttons[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            status = "‚úÖ" if "‚úÖ" in button.text else "‚ùå"
            print(f"      {status} {button.text.replace('‚úÖ ', '').replace('‚ùå ', '')}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é: {e}")
        return False
    
    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    print("\n5. üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤...")
    try:
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 –∏–Ω—Ç–µ—Ä–µ—Å–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        test_interests = all_interests[:2] if len(all_interests) >= 2 else all_interests
        test_codes = [interest.code for interest in test_interests]
        
        print(f"   üìù –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã: {test_codes}")
        
        result = await PreferenceManager.update_employee_interests(employee, test_codes)
        
        if result:
            print("   ‚úÖ –ò–Ω—Ç–µ—Ä–µ—Å—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            updated_interests = await PreferenceManager.get_employee_interests(employee)
            active_after = [ei for ei in updated_interests if ei.is_active]
            
            print(f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {len(active_after)}")
            for ei in active_after:
                print(f"      ‚Ä¢ ‚úÖ {ei.interest.emoji} {ei.interest.name}")
                
        else:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {e}")
        return False
    
    # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    print("\n6. ‚ùå –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤...")
    try:
        result = await PreferenceManager.disable_all_interests(employee)
        
        if result:
            print("   ‚úÖ –í—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            final_interests = await PreferenceManager.get_employee_interests(employee)
            active_final = [ei for ei in final_interests if ei.is_active]
            
            print(f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {len(active_final)}")
            
        else:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {e}")
        return False
    
    print("\n" + "="*50)
    print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ò–ù–¢–ï–†–ï–°–ê–ú–ò –ü–†–û–ô–î–ï–ù–´!")
    return True

async def create_default_interests():
    """–°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    from asgiref.sync import sync_to_async
    
    interests_data = [
        ('secret_coffee', '–¢–∞–π–Ω—ã–π –∫–æ—Ñ–µ', '‚òïÔ∏è', '–í—Å—Ç—Ä–µ—á–∏ –∑–∞ —á–∞—à–∫–æ–π –∫–æ—Ñ–µ —Å –∫–æ–ª–ª–µ–≥–∞–º–∏'),
        ('chess', '–®–∞—Ö–º–∞—Ç—ã', '‚ôüÔ∏è', '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —à–∞—Ö–º–∞—Ç–Ω—ã–µ –ø–æ–µ–¥–∏–Ω–∫–∏'),
        ('ping_pong', '–ù–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å', 'üèì', '–ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã –≤ –ø–∏–Ω–≥-–ø–æ–Ω–≥'),
        ('photo_quest', '–§–æ—Ç–æ–∫–≤–µ—Å—Ç—ã', 'üì∏', '–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ —Ñ–æ—Ç–æ–∑–∞–¥–∞–Ω–∏—è –∏ –∫–æ–Ω–∫—É—Ä—Å—ã'),
        ('workshop', '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã', 'üß†', '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –≤–æ—Ä–∫—à–æ–ø—ã'),
        ('lunch_blind', '–û–±–µ–¥ –≤—Å–ª–µ–ø—É—é', 'üçΩÔ∏è', '–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –æ–±–µ–¥—ã —Å –Ω–æ–≤—ã–º–∏ –ª—é–¥—å–º–∏'),
        ('board_games', '–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã', 'üé≤', '–í–µ—á–µ—Ä–∞ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –∏–≥—Ä'),
        ('sport_events', '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è', '‚öΩÔ∏è', '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'),
        ('book_club', '–ö–Ω–∏–∂–Ω—ã–π –∫–ª—É–±', 'üìö', '–û–±—Å—É–∂–¥–µ–Ω–∏–µ –∫–Ω–∏–≥ —Å –∫–æ–ª–ª–µ–≥–∞–º–∏'),
        ('tech_talks', 'Tech talks', 'üíª', '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –¥–æ–∫–ª–∞–¥—ã')
    ]
    
    @sync_to_async
    def create_interests():
        created_count = 0
        for code, name, emoji, description in interests_data:
            interest, created = Interest.objects.get_or_create(
                code=code,
                defaults={
                    'name': name,
                    'emoji': emoji,
                    'description': description,
                    'is_active': True
                }
            )
            if created:
                created_count += 1
        return created_count
    
    count = await create_interests()
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {count}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏ ConnectBot...")
        
        success = await test_interests_functionality()
        
        if success:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            print("\nüí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
            print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç: python manage.py runbot")
            print("   2. –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ –≤ Telegram")
            print("   3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
            print("   4. –ù–∞–∂–º–∏—Ç–µ '–ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é")
            print("   5. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤")
            
        return success
        
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    try:
        result = asyncio.run(main())
        sys.exit(0 if result else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)