name: CI/CD â€” build, push and deploy stack

on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    name: Build and push images
    runs-on: ubuntu-latest
    outputs:
      web-image: ${{ steps.build-web.outputs.image }}
      matching-image: ${{ steps.build-matching.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and push web image
        id: build-web
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: ghcr.io/${{ toLower(github.repository_owner) }}/connectbot-web:${{ github.sha }}
          outputs: type=registry

      - name: Build and push matching-service image
        id: build-matching
        uses: docker/build-push-action@v4
        with:
          context: connectbot-java-services/matching-service
          file: connectbot-java-services/matching-service/Dockerfile
          push: true
          tags: ghcr.io/${{ toLower(github.repository_owner) }}/connectbot-matching:${{ github.sha }}
          outputs: type=registry

  deploy:
    name: Deploy stack to server
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Wait for images available (small pause)
        run: sleep 3

      - name: Create remote secrets and deploy stack via SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.DEPLOY_PORT }}
          script: |
            set -e
            
            echo "Navigating to project directory"
            cd /opt/connectbot-v21

            echo "Pulling latest changes from Git"
            git pull

            echo 'Creating/Updating Docker secrets'
            # idempotent create: remove then create
            if docker secret inspect service_auth_token >/dev/null 2>&1; then docker secret rm service_auth_token; fi
            printf '%s' "${SERVICE_AUTH_TOKEN}" | docker secret create service_auth_token -

            if docker secret inspect django_secret_key >/dev/null 2>&1; then docker secret rm django_secret_key; fi
            printf '%s' "${DJANGO_SECRET_KEY}" | docker secret create django_secret_key -

            if [ -n "${TELEGRAM_BOT_TOKEN}" ]; then
              if docker secret inspect telegram_bot_token >/dev/null 2>&1; then docker secret rm telegram_bot_token; fi
              printf '%s' "${TELEGRAM_BOT_TOKEN}" | docker secret create telegram_bot_token -
            fi

            echo "Pulling latest images from registry"
            export WEB_IMAGE_TAG=${{ github.sha }}
            export MATCHING_IMAGE_TAG=${{ github.sha }}
            docker-compose -f /opt/connectbot-v21/docker/docker-stack.yml pull

            echo 'Deploying stack using docker/docker-stack.yml'
            docker stack deploy -c /opt/connectbot-v21/docker/docker-stack.yml connectbot --with-registry-auth
        env:
          # these are read from GitHub repository secrets and exported to remote shell via the ssh action
          SERVICE_AUTH_TOKEN: ${{ secrets.SERVICE_AUTH_TOKEN }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
          REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
