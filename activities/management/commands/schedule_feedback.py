# activities/management/commands/schedule_feedback.py

import logging
import asyncio
from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import timedelta

from activities.models import SecretCoffeeMeeting
from bots.notification_service import NotificationService
from bots.shared_bot import bot_manager

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    """
    Django-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–±–æ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –≤—Å—Ç—Ä–µ—á–∞–º.
    """
    help = 'Schedules feedback collection for completed meetings.'

    def handle(self, *args, **options):
        asyncio.run(self.a_handle(*args, **options))

    async def a_handle(self, *args, **options):
        self.stdout.write("–ù–∞—á–∏–Ω–∞—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏...")
        
        try:
            bot = await bot_manager.get_bot()
            notification_service = NotificationService(bot)

            meetings_to_schedule = SecretCoffeeMeeting.objects.select_related(
                'employee1', 'employee2'
            ).filter(
                status='completed',
                feedback_deadline__isnull=True
            )
            
            if not await meetings_to_schedule.aexists():
                self.stdout.write(self.style.SUCCESS("–ù–µ—Ç –≤—Å—Ç—Ä–µ—á –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."))
                return

            successful_schedules = 0
            async for meeting in meetings_to_schedule:
                deadline = timezone.now() + timedelta(hours=48)
                meeting.feedback_deadline = deadline
                await meeting.asave(update_fields=['feedback_deadline'])

                logger.info(f"–î–ª—è –≤—Å—Ç—Ä–µ—á–∏ {meeting.id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–µ–¥–ª–∞–π–Ω: {deadline}")

                try:
                    participant_ids = [
                        meeting.employee1.telegram_id,
                        meeting.employee2.telegram_id
                    ]
                    
                    for user_id in participant_ids:
                        if user_id:
                            partner = await meeting.aget_partner(user_id)
                            partner_name = partner.full_name if partner else "–≤–∞—à–∏–º –∫–æ–ª–ª–µ–≥–æ–π"
                            message = (
                                f"ü§ù –í–∞—à–∞ –≤—Å—Ç—Ä–µ—á–∞ —Å {partner_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞! "
                                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –µ—â–µ –ª—É—á—à–µ.\n\n"
                                f"–ù–∞–∂–º–∏—Ç–µ /feedback, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
                            )
                            await notification_service.send_notification(user_id, message)
                    
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ {meeting.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ {meeting.id}: {e}")

                successful_schedules += 1

            self.stdout.write(self.style.SUCCESS(
                f"–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —Å–±–æ—Ä –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è {successful_schedules} –≤—Å—Ç—Ä–µ—á."
            ))

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ schedule_feedback: {e}", exc_info=True)
            self.stderr.write(self.style.ERROR(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"))
        # finally:
        #     # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º —Ç–µ–ø–µ—Ä—å –≤ BotManager, –∑–¥–µ—Å—å –∑–∞–∫—Ä—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
        #     pass

