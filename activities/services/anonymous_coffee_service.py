import logging
import random
import string
import asyncio
from datetime import datetime, timedelta
from django.utils import timezone
from activities.models import (
    SecretCoffeeMeeting, SecretCoffeePreference, 
    SecretCoffeeMessage, SecretCoffeeProposal,
    ActivitySession, ActivityParticipant
)
from employees.models import Employee
from .java_matching_service import java_matching_service
from activities.services.redis_service import activity_redis_service

logger = logging.getLogger(__name__)

class AnonymousCoffeeService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –¢–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ"""
    
    def __init__(self):
        self.negotiation_rules = {
            'max_proposals': 3,
            'timeout_minutes': 1440,  # 24 —á–∞—Å–∞
            'auto_confirm': True,
        }
    
    async def run_weekly_matching(self):
        """–ó–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ matching —Å –ø–æ–ª–Ω–æ–π –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å—é"""
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ matching –¢–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
            today = timezone.now().date()
            week_start = today - timedelta(days=today.weekday())
            
            session = await ActivitySession.objects.select_related().aget(
                activity_type='secret_coffee',
                week_start=week_start
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏
            participants = await self._get_participants_with_preferences(session)
            
            if len(participants) < 2:
                logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è matching")
                return False
            
            # Matching —á–µ—Ä–µ–∑ Java –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç—ã Employee –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
            employee_list = [p['employee'] for p in participants]
            pairs = await java_matching_service.match_coffee_pairs(employee_list)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç —Å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏
            participant_dict = {p['employee'].id: p for p in participants}
            enhanced_pairs = []
            for emp1, emp2 in pairs:
                enhanced_pairs.append((participant_dict[emp1.id], participant_dict[emp2.id]))
            pairs = enhanced_pairs
            
            if not pairs:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—ã")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏
            created_meetings = await self._create_anonymous_meetings(session, pairs)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await self._send_initial_notifications(created_meetings)
            
            session.status = 'active'
            await session.asave()
            
            logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(created_meetings)} –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–º matching: {e}")
            return False
    
    async def _get_participants_with_preferences(self, session):
        """–ü–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏"""
        participants_qs = ActivityParticipant.objects.filter(
            activity_session=session,
            subscription_status=True
        ).select_related('employee')
        
        participants = []
        async for participant in participants_qs:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                preferences = await SecretCoffeePreference.objects.aget(
                    employee=participant.employee
                )
                participants.append({
                    'employee': participant.employee,
                    'preferences': preferences
                })
            except SecretCoffeePreference.DoesNotExist:
                logger.warning(f"–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {participant.employee.full_name} –Ω–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π")
                # –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
                preferences = await SecretCoffeePreference.objects.acreate(
                    employee=participant.employee,
                    availability_slots=['mon_10-12', 'tue_14-16', 'wed_12-14', 'thu_16-18', 'fri_11-13'],
                    preferred_format='BOTH',
                    topics_of_interest=['—Ä–∞–±–æ—Ç–∞', '—Ö–æ–±–±–∏', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏']
                )
                participants.append({
                    'employee': participant.employee,
                    'preferences': preferences
                })
        
        return participants
    
    async def _create_anonymous_meetings(self, session, pairs):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á —Å –∫–æ–¥–∞–º–∏ –∏ –∑–Ω–∞–∫–∞–º–∏"""
        meetings = []
        
        for emp1_data, emp2_data in pairs:
            emp1 = emp1_data['employee']
            emp2 = emp2_data['employee']
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã
            meeting_id = self._generate_meeting_id()
            emp1_code = self._generate_employee_code()
            emp2_code = self._generate_employee_code()
            recognition_sign = self._generate_recognition_sign()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
            meeting_format = self._determine_meeting_format(
                emp1_data['preferences'], 
                emp2_data['preferences']
            )
            
            meeting = await SecretCoffeeMeeting.objects.acreate(
                meeting_id=meeting_id,
                activity_session=session,
                employee1=emp1,
                employee2=emp2,
                employee1_code=emp1_code,
                employee2_code=emp2_code,
                recognition_sign=recognition_sign,
                meeting_format=meeting_format,
                status='scheduling'
            )
            
            meetings.append(meeting)
            
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ {meeting_id}")
        
        return meetings
    
    async def _send_initial_notifications(self, meetings):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞–º"""
        from bots.handlers.notification_handlers import send_telegram_message
        
        for meeting in meetings:
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è employee1
            message1 = f"""üé≠ *–¢–ê–ô–ù–´–ô –ö–û–§–ï –ù–ê–ó–ù–ê–ß–ï–ù!*

ü§´ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Ç–∞–π–Ω—É! –õ–∏—á–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ.

üí¨ –ù–∞—á–Ω–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞-–ø–æ—Å—Ä–µ–¥–Ω–∏–∫–∞:
/schedule_meeting_{meeting.meeting_id}

üìã –í–∞—à –∫–æ–¥: `{meeting.employee1_code}`
üéØ –°–∏—Å—Ç–µ–º–∞: –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–Ω–∞—è

‚ö°Ô∏è –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ –ø–µ—Ä–≤—ã–º!"""
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è employee2
            message2 = f"""üé≠ *–¢–ê–ô–ù–´–ô –ö–û–§–ï –ù–ê–ó–ù–ê–ß–ï–ù!*

ü§´ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Ç–∞–π–Ω—É! –õ–∏—á–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ.

üí¨ –û–∂–∏–¥–∞–π—Ç–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏.

üìã –í–∞—à –∫–æ–¥: `{meeting.employee2_code}`
üéØ –°–∏—Å—Ç–µ–º–∞: –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–Ω–∞—è

‚è≥ –ë–æ—Ç —É–≤–µ–¥–æ–º–∏—Ç –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏!"""
            
            await send_telegram_message(meeting.employee1.telegram_id, message1)
            await send_telegram_message(meeting.employee2.telegram_id, message2)
    
    async def handle_meeting_scheduling(self, meeting_id, employee):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏"""
        try:
            meeting = await SecretCoffeeMeeting.objects.select_related(
                'employee1', 'employee2'
            ).aget(meeting_id=meeting_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≤—Å—Ç—Ä–µ—á–∏
            if employee not in [meeting.employee1, meeting.employee2]:
                return False, "‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–π –≤—Å—Ç—Ä–µ—á–∏"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º
            partner = meeting.employee2 if employee == meeting.employee1 else meeting.employee1
            employee_code = meeting.employee1_code if employee == meeting.employee1 else meeting.employee2_code
            
            return True, {
                'meeting': meeting,
                'partner': partner,
                'employee_code': employee_code,
                'recognition_sign': meeting.recognition_sign
            }
            
        except SecretCoffeeMeeting.DoesNotExist:
            return False, "‚ùå –í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    async def send_message_via_bot(self, meeting, from_employee, message_text):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞-–ø–æ—Å—Ä–µ–¥–Ω–∏–∫–∞"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await SecretCoffeeMessage.objects.acreate(
                meeting=meeting,
                from_employee=from_employee,
                message_type='text',
                content=message_text,
                is_forwarded=False
            )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            to_employee = meeting.employee2 if from_employee == meeting.employee1 else meeting.employee1
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
            forwarded_message = f"üí¨ –í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –ø–∏—à–µ—Ç:\n\n\"{message_text}\""
            
            from bots.handlers.notification_handlers import send_telegram_message
            await send_telegram_message(to_employee.telegram_id, forwarded_message)
            
            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ
            message.is_forwarded = True
            await message.asave()
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def handle_meeting_proposal(self, meeting, from_employee, proposed_date, proposed_location):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            proposals_count = await SecretCoffeeProposal.objects.filter(
                meeting=meeting,
                from_employee=from_employee
            ).acount()
            
            if proposals_count >= self.negotiation_rules['max_proposals']:
                return False, f"‚ùå –õ–∏–º–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω (–º–∞–∫—Å. {self.negotiation_rules['max_proposals']})"
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            proposal = await SecretCoffeeProposal.objects.acreate(
                meeting=meeting,
                from_employee=from_employee,
                proposed_date=proposed_date,
                proposed_location=proposed_location,
                proposed_format=meeting.meeting_format,
                status='pending'
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            to_employee = meeting.employee2 if from_employee == meeting.employee1 else meeting.employee1
            
            proposal_text = f"""üìÖ *–ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –í–°–¢–†–ï–ß–ò*

üóìÔ∏è –î–∞—Ç–∞: {proposed_date.strftime('%d.%m.%Y %H:%M')}
üìç –ú–µ—Å—Ç–æ: {proposed_location}
üíª –§–æ—Ä–º–∞—Ç: {meeting.meeting_format}

‚úÖ –ü—Ä–∏–Ω—è—Ç—å: /accept_proposal_{proposal.id}
‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å: /reject_proposal_{proposal.id}
üí° –ü—Ä–µ–¥–æ–∂–∏—Ç—å –¥—Ä—É–≥–æ–µ: /counter_proposal_{proposal.id}"""
            
            from bots.handlers.notification_handlers import send_telegram_message
            await send_telegram_message(to_employee.telegram_id, proposal_text)
            
            return True, "‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∞—Ä—Ç–Ω–µ—Ä—É"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
            return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
    
    async def handle_emergency_stop(self, meeting, employee):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å—Ç—Ä–µ—á–∏"""
        try:
            meeting.emergency_stopped = True
            meeting.status = 'cancelled'
            await meeting.asave()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            await self._notify_moderator(meeting, employee)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–±–µ–∑ –¥–µ—Ç–∞–ª–µ–π)
            partner = meeting.employee2 if employee == meeting.employee1 else meeting.employee1
            emergency_message = f"""üö® *–í–°–¢–†–ï–ß–ê –û–¢–ú–ï–ù–ï–ù–ê*

–ü–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º –≤—Å—Ç—Ä–µ—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.

–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞."""
            
            from bots.handlers.notification_handlers import send_telegram_message
            await send_telegram_message(partner.telegram_id, emergency_message)
            
            return True, "‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω."
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Å—Ç—Ä–µ—á–∏"
    
    def _generate_meeting_id(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –≤—Å—Ç—Ä–µ—á–∏"""
        return f"SC_{''.join(random.choices(string.ascii_uppercase + string.digits, k=8))}"
    
    def _generate_employee_code(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        adjectives = ['–ö–†–ê–°–ù–´–ô', '–°–ò–ù–ò–ô', '–ó–ï–õ–ï–ù–´–ô', '–í–ï–°–ï–õ–´–ô', '–¢–ê–ò–ù–°–¢–í–ï–ù–ù–´–ô', '–°–ß–ê–°–¢–õ–ò–í–´–ô']
        nouns = ['–°–õ–û–ù', '–¢–ò–ì–†', '–ö–û–¢', '–î–†–ê–ö–û–ù', '–ï–î–ò–ù–û–†–û–ì', '–§–ï–ù–ò–ö–°']
        return f"{random.choice(adjectives)}_{random.choice(nouns)}"
    
    def _generate_recognition_sign(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–Ω–∞–∫–∞"""
        signs = [
            "–ö–†–ê–°–ù–ê–Ø –†–û–ó–ê –Ω–∞ —Å—Ç–æ–ª–µ",
            "–ö–ù–ò–ì–ê '1984'",
            "–°–ö–ê–ß–ö–ò –ï–î–ò–ù–û–†–û–ì–ê",
            "–°–ò–ù–ò–ô –ó–û–ù–¢–ò–ö",
            "–ñ–ï–õ–¢–´–ô –®–ê–†–§",
            "–ó–ï–õ–ï–ù–´–ô –ß–ê–ô–ù–ò–ö"
        ]
        return random.choice(signs)
    
    def _determine_meeting_format(self, pref1, pref2):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
        if pref1.preferred_format == 'ONLINE' or pref2.preferred_format == 'ONLINE':
            return 'ONLINE'
        elif pref1.preferred_format == 'OFFLINE' and pref2.preferred_format == 'OFFLINE':
            return 'OFFLINE'
        else:
            return 'ONLINE'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–Ω–ª–∞–π–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    
    async def _notify_moderator(self, meeting, reporting_employee):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –æ–± —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        logger.warning(f"–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å—Ç—Ä–µ—á–∏ {meeting.meeting_id} –æ—Ç {reporting_employee.full_name}")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
anonymous_coffee_service = AnonymousCoffeeService()