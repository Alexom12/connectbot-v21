import logging
import aiohttp
import json
from datetime import datetime
from config.settings import JAVA_SERVICE_URL
from activities.services.redis_service import activity_redis_service

logger = logging.getLogger(__name__)

class JavaMatchingService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Java –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–º matching –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤"""
    
    def __init__(self):
        self.base_url = JAVA_SERVICE_URL
        self.timeout = aiohttp.ClientTimeout(total=30)
    
    async def match_coffee_pairs(self, participants):
        """
        –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä –¥–ª—è –¢–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ —á–µ—Ä–µ–∑ Java –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å
        
        Args:
            participants: —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è matching
            
        Returns:
            —Å–ø–∏—Å–æ–∫ –ø–∞—Ä [(employee1, employee2), ...]
        """
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            participant_data = []
            for employee in participants:
                participant_data.append({
                    'id': employee.id,
                    'name': employee.name,
                    'department': employee.department,
                    'position': employee.position,
                    'interests': [interest.name for interest in employee.interests.all()],
                    'telegram_id': employee.telegram_id,
                    'preferences': getattr(employee, 'preferences', {}),
                })
            
            request_data = {
                'participants': participant_data,
                'algorithm': 'cross_department',
                'optimization': 'high',
                'activity_type': 'coffee'
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"matching_coffee_{hash(json.dumps(request_data, sort_keys=True))}"
            cached_result = await activity_redis_service.get_cached_activity_data(cache_key)
            
            if cached_result:
                logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã matching")
                return self._parse_matching_result(cached_result, participants)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Java –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—É
            async with aiohttp.ClientSession(timeout=self.timeout) as session:
                url = f"{self.base_url}/api/matching/coffee/pairs"
                
                async with session.post(url, json=request_data) as response:
                    if response.status == 200:
                        result = await response.json()
                        
                        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 1 —á–∞—Å
                        await activity_redis_service.cache_activity_data(
                            cache_key, result, timeout=3600
                        )
                        
                        pairs = self._parse_matching_result(result, participants)
                        logger.info(f"‚úÖ Java –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª {len(pairs)} –ø–∞—Ä")
                        return pairs
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Java –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞: {response.status} - {error_text}")
                        return self._fallback_matching(participants)
                        
        except aiohttp.ClientError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Java –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–º: {e}")
            return self._fallback_matching(participants)
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ matching: {e}")
            return self._fallback_matching(participants)
    
    async def match_tournament_bracket(self, participants, game_type="chess", format="swiss"):
        """
        –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
        
        Args:
            participants: —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            game_type: —Ç–∏–ø –∏–≥—Ä—ã (chess, ping_pong)
            format: —Ñ–æ—Ä–º–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞ (swiss, round_robin)
        """
        try:
            participant_data = []
            for employee in participants:
                participant_data.append({
                    'id': employee.id,
                    'name': employee.name,
                    'department': employee.department,
                    'rating': getattr(employee, f'{game_type}_rating', 1200),
                    'games_played': getattr(employee, f'{game_type}_games_played', 0),
                })
            
            request_data = {
                'participants': participant_data,
                'game_type': game_type,
                'format': format,
                'rounds': 3 if len(participants) <= 8 else 5
            }
            
            async with aiohttp.ClientSession(timeout=self.timeout) as session:
                url = f"{self.base_url}/api/matching/tournament/bracket"
                
                async with session.post(url, json=request_data) as response:
                    if response.status == 200:
                        result = await response.json()
                        logger.info(f"‚úÖ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {len(result.get('matches', []))} –º–∞—Ç—á–µ–π")
                        return result
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏: {error_text}")
                        return self._fallback_tournament(participants, game_type)
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞: {e}")
            return self._fallback_tournament(participants, game_type)
    
    async def generate_teams(self, participants, team_size=4, balance_skills=True):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        
        Args:
            participants: —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            team_size: —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã
            balance_skills: –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–∞–≤—ã–∫–∞–º
        """
        try:
            participant_data = []
            for employee in participants:
                participant_data.append({
                    'id': employee.id,
                    'name': employee.name,
                    'department': employee.department,
                    'skills': {
                        'communication': getattr(employee, 'communication_skill', 3),
                        'creativity': getattr(employee, 'creativity_skill', 3),
                        'leadership': getattr(employee, 'leadership_skill', 3),
                    },
                    'interests': [interest.name for interest in employee.interests.all()],
                })
            
            request_data = {
                'participants': participant_data,
                'team_size': team_size,
                'balance_skills': balance_skills,
                'max_teams': len(participants) // team_size
            }
            
            async with aiohttp.ClientSession(timeout=self.timeout) as session:
                url = f"{self.base_url}/api/matching/teams/generate"
                
                async with session.post(url, json=request_data) as response:
                    if response.status == 200:
                        result = await response.json()
                        logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(result.get('teams', []))} –∫–æ–º–∞–Ω–¥")
                        return result
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {error_text}")
                        return self._fallback_teams(participants, team_size)
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")
            return self._fallback_teams(participants, team_size)
    
    def _parse_matching_result(self, result, participants):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç Java –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞"""
        pairs = []
        participant_dict = {emp.id: emp for emp in participants}
        
        for pair_data in result.get('pairs', []):
            emp1_id = pair_data.get('employee1_id')
            emp2_id = pair_data.get('employee2_id')
            
            if emp1_id in participant_dict and emp2_id in participant_dict:
                pairs.append((
                    participant_dict[emp1_id],
                    participant_dict[emp2_id]
                ))
        
        return pairs
    
    def _fallback_matching(self, participants):
        """Fallback –∞–ª–≥–æ—Ä–∏—Ç–º matching –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Java —Å–µ—Ä–≤–∏—Å–∞"""
        logger.warning("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback matching –∞–ª–≥–æ—Ä–∏—Ç–º")
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º - —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–æ–≤
        departments = {}
        for emp in participants:
            if emp.department not in departments:
                departments[emp.department] = []
            departments[emp.department].append(emp)
        
        pairs = []
        remaining = participants.copy()
        
        while len(remaining) >= 2:
            emp1 = remaining[0]
            
            # –ò—â–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –æ—Ç–¥–µ–ª–∞
            emp2 = None
            for emp in remaining[1:]:
                if emp.department != emp1.department:
                    emp2 = emp
                    break
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –æ—Ç–¥–µ–ª–∞, –±–µ—Ä–µ–º –ª—é–±–æ–≥–æ
            if not emp2 and len(remaining) >= 2:
                emp2 = remaining[1]
            
            if emp2:
                pairs.append((emp1, emp2))
                remaining.remove(emp1)
                remaining.remove(emp2)
            else:
                break
        
        return pairs
    
    def _fallback_tournament(self, participants, game_type):
        """Fallback —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏"""
        matches = []
        for i in range(0, len(participants)-1, 2):
            if i+1 < len(participants):
                matches.append({
                    'player1_id': participants[i].id,
                    'player2_id': participants[i+1].id,
                    'round': 1,
                    'match_number': i // 2 + 1
                })
        
        return {'matches': matches, 'format': 'fallback_swiss'}
    
    def _fallback_teams(self, participants, team_size):
        """Fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥"""
        teams = []
        current_team = []
        
        for emp in participants:
            current_team.append(emp.id)
            if len(current_team) == team_size:
                teams.append({'members': current_team.copy()})
                current_team = []
        
        if current_team:
            teams.append({'members': current_team})
        
        return {'teams': teams}

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
java_matching_service = JavaMatchingService()