#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç —Å–∏—Å—Ç–µ–º—ã "–¢–∞–π–Ω—ã–π –∫–æ—Ñ–µ"
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å –Ω–æ–≤—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ SecretCoffee –∏ CoffeePair
"""

import os
import sys
import django
from datetime import datetime, date, timedelta
from django.utils import timezone

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django –æ–∫—Ä—É–∂–µ–Ω–∏—è
def setup_django():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Django –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
    project_root = os.path.dirname(os.path.abspath(__file__))
    sys.path.insert(0, project_root)
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
    django.setup()

setup_django()

from employees.models import Employee, SecretCoffee, CoffeePair


class SecretCoffeeDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ç–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ"""
    
    def __init__(self):
        self.employees = []
        self.coffee_session = None
    
    def print_header(self):
        """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        print("‚òï" + "="*60 + "‚òï")
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ '–¢–ê–ô–ù–´–ô –ö–û–§–ï' üß™")
        print("‚òï" + "="*60 + "‚òï")
        print(f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
    
    def create_test_employees(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
        test_data = [
            {
                'full_name': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤',
                'position': 'Senior Developer',
                'department': 'IT',
                'telegram_username': 'alex_dev'
            },
            {
                'full_name': '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞', 
                'position': 'Product Manager',
                'department': 'Product',
                'telegram_username': 'maria_pm'
            },
            {
                'full_name': '–î–º–∏—Ç—Ä–∏–π –°–∏–¥–æ—Ä–æ–≤',
                'position': 'UI/UX Designer', 
                'department': 'Design',
                'telegram_username': 'dmitry_design'
            },
            {
                'full_name': '–ï–ª–µ–Ω–∞ –ö–æ–∑–ª–æ–≤–∞',
                'position': 'QA Engineer',
                'department': 'QA',
                'telegram_username': 'elena_qa'
            },
            {
                'full_name': '–ò–≥–æ—Ä—å –í–æ–ª–∫–æ–≤',
                'position': 'DevOps Engineer',
                'department': 'Infrastructure',
                'telegram_username': 'igor_devops'
            },
            {
                'full_name': '–ê–Ω–Ω–∞ –ú–æ—Ä–æ–∑–æ–≤–∞',
                'position': 'Business Analyst',
                'department': 'Analytics',
                'telegram_username': 'anna_ba'
            }
        ]
        
        print("üë• –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...")
        created_count = 0
        
        for emp_data in test_data:
            employee, created = Employee.objects.get_or_create(
                full_name=emp_data['full_name'],
                defaults={
                    'position': emp_data['position'],
                    'telegram_username': emp_data['telegram_username'],
                    'is_active': True,
                    'authorized': True
                }
            )
            
            if created:
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω: {employee.full_name}")
                created_count += 1
            else:
                print(f"   ‚ÑπÔ∏è –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {employee.full_name}")
            
            self.employees.append(employee)
        
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {created_count}")
        print(f"üë®‚Äçüíº –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(self.employees)}")
        print()
    
    def create_coffee_session(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Ç–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ"""
        print("‚òï –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Ç–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ...")
        
        # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
        today = date.today()
        week_start = today - timedelta(days=today.weekday())
        
        self.coffee_session, created = SecretCoffee.objects.get_or_create(
            week_start=week_start,
            defaults={
                'title': f'–¢–∞–π–Ω—ã–π –∫–æ—Ñ–µ –Ω–∞ –Ω–µ–¥–µ–ª—é {week_start.strftime("%d.%m.%Y")}',
                'description': '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –∑–∞ —á–∞—à–µ—á–∫–æ–π –∫–æ—Ñ–µ',
                'status': 'active',
                'max_pairs': 50,
                'algorithm_used': 'simple_random',
                'registration_deadline': timezone.now() + timedelta(days=2),
                'meeting_deadline': week_start + timedelta(days=5),  # –ü—è—Ç–Ω–∏—Ü–∞
                'total_participants': len(self.employees)
            }
        )
        
        if created:
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {self.coffee_session.title}")
        else:
            print(f"   ‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è: {self.coffee_session.title}")
        
        print(f"   üìÖ –ù–µ–¥–µ–ª—è: {self.coffee_session.week_start}")
        print(f"   üìä –°—Ç–∞—Ç—É—Å: {self.coffee_session.get_status_display()}")
        print(f"   ‚è∞ –î–µ–¥–ª–∞–π–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {self.coffee_session.registration_deadline}")
        print(f"   üéØ –î–µ–¥–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á: {self.coffee_session.meeting_deadline}")
        print()
    
    def create_coffee_pairs(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞—Ä—ã –¥–ª—è —Ç–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ"""
        print("ü§ù –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...")
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        existing_pairs = self.coffee_session.coffee_pairs.count()
        if existing_pairs > 0:
            print(f"   üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ {existing_pairs} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ä")
            self.coffee_session.coffee_pairs.all().delete()
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã (–ø—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º)
        import random
        available_employees = self.employees.copy()
        random.shuffle(available_employees)
        
        pairs_created = 0
        for i in range(0, len(available_employees) - 1, 2):
            emp1 = available_employees[i]
            emp2 = available_employees[i + 1]
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            match_score = random.uniform(0.6, 0.95)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
            reasons = [
                "–†–∞–∑–Ω—ã–µ –æ—Ç–¥–µ–ª—ã - —Ö–æ—Ä–æ—à–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è cross-functional –æ–±—â–µ–Ω–∏—è",
                "–°—Ö–æ–∂–∏–µ —Ä–æ–ª–∏ - –º–æ–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å—Å—è –æ–ø—ã—Ç–æ–º",
                "–°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞",
                "–û–±–∞ –Ω–æ–≤–∏—á–∫–∏ –≤ –∫–æ–º–ø–∞–Ω–∏–∏",
                "–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
            ]
            
            pair = CoffeePair.objects.create(
                secret_coffee=self.coffee_session,
                employee1=emp1,
                employee2=emp2,
                match_score=match_score,
                match_reason=random.choice(reasons),
                status='created'
            )
            
            pairs_created += 1
            print(f"   üíë –ü–∞—Ä–∞ {pairs_created}: {emp1.full_name} ‚Üî {emp2.full_name}")
            print(f"      üéØ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {match_score:.2f}")
            print(f"      üí≠ –ü—Ä–∏—á–∏–Ω–∞: {pair.match_reason}")
        
        # –ï—Å–ª–∏ –Ω–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        if len(available_employees) % 2 == 1:
            unpaired = available_employees[-1]
            print(f"   üòû –ë–µ–∑ –ø–∞—Ä—ã: {unpaired.full_name}")
        
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ –ø–∞—Ä: {pairs_created}")
        print()
    
    def simulate_confirmations(self):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        print("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —É—á–∞—Å—Ç–∏—è...")
        
        pairs = self.coffee_session.coffee_pairs.all()
        confirmed_pairs = 0
        
        for pair in pairs:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
            import random
            
            # 80% —à–∞–Ω—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            if random.random() < 0.8:
                pair.confirmed_employee1 = True
                
            # 75% —à–∞–Ω—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞  
            if random.random() < 0.75:
                pair.confirmed_employee2 = True
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if pair.confirmed_employee1 and pair.confirmed_employee2:
                pair.status = 'confirmed'
                pair.confirmed_at = timezone.now()
                confirmed_pairs += 1
                print(f"   ‚úÖ {pair.employee1.full_name} ‚Üî {pair.employee2.full_name}")
            elif pair.confirmed_employee1 or pair.confirmed_employee2:
                pair.status = 'notified'
                print(f"   ‚è≥ {pair.employee1.full_name} ‚Üî {pair.employee2.full_name} (—á–∞—Å—Ç–∏—á–Ω–æ)")
            else:
                print(f"   ‚ùå {pair.employee1.full_name} ‚Üî {pair.employee2.full_name} (–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏)")
            
            pair.save()
        
        print(f"üìä –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä: {confirmed_pairs}/{len(pairs)}")
        print()
    
    def simulate_meetings_and_feedback(self):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –≤—Å—Ç—Ä–µ—á–∏ –∏ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"""
        print("üìÖ –°–∏–º—É–ª—è—Ü–∏—è –≤—Å—Ç—Ä–µ—á –∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏...")
        
        confirmed_pairs = self.coffee_session.coffee_pairs.filter(status='confirmed')
        completed_meetings = 0
        
        places = [
            "–ö–∞—Ñ–µ '–°—Ç–∞—Ä–±–∞–∫—Å' –Ω–∞ 1 —ç—Ç–∞–∂–µ",
            "–ö—É—Ö–Ω—è –≤ –æ—Ñ–∏—Å–µ", 
            "–†–µ—Å—Ç–æ—Ä–∞–Ω '–¢–∞–Ω—É–∫–∏' —Ä—è–¥–æ–º —Å –æ—Ñ–∏—Å–æ–º",
            "–ü–∞—Ä–∫ –°–æ–∫–æ–ª—å–Ω–∏–∫–∏",
            "–ê–Ω—Ç–∏–∫–∞—Ñ–µ '–í—Ä–µ–º—è –µ—Å—Ç—å'",
            "–ö–æ–≤–æ—Ä–∫–∏–Ω–≥ –Ω–∞ –ö—Ä–∞—Å–Ω–æ–π –ø–ª–æ—â–∞–¥–∏"
        ]
        
        for pair in confirmed_pairs:
            import random
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ (90% —à–∞–Ω—Å)
            if random.random() < 0.9:
                pair.meeting_scheduled = True
                pair.meeting_date = timezone.now() + timedelta(
                    days=random.randint(1, 5),
                    hours=random.randint(12, 18)
                )
                pair.meeting_place = random.choice(places)
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ (85% —à–∞–Ω—Å)
                if random.random() < 0.85:
                    pair.meeting_completed = True
                    pair.completed_at = timezone.now()
                    pair.status = 'completed'
                    completed_meetings += 1
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
                    feedbacks = [
                        "–û—Ç–ª–∏—á–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ! –£–∑–Ω–∞–ª –º–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ –æ —Ä–∞–±–æ—Ç–µ –¥—Ä—É–≥–æ–≥–æ –æ—Ç–¥–µ–ª–∞.",
                        "–ü—Ä–∏—è—Ç–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞, –Ω–∞—à–ª–∏ –æ–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã.",
                        "–ü–æ–ª–µ–∑–Ω—ã–π –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥, –æ–±–º–µ–Ω—è–ª–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏.",
                        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –∫–æ–ª–ª–µ–≥–æ–π –∏–∑ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥—ã.",
                        "–•–æ—Ä–æ—à–∞—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞, —Å—Ç–æ–∏—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å!"
                    ]
                    
                    if random.random() < 0.7:  # 70% –æ—Å—Ç–∞–≤–ª—è—é—Ç –æ—Ç–∑—ã–≤
                        pair.feedback_employee1 = random.choice(feedbacks)
                        pair.rating_employee1 = random.randint(4, 5)
                    
                    if random.random() < 0.7:
                        pair.feedback_employee2 = random.choice(feedbacks) 
                        pair.rating_employee2 = random.randint(3, 5)
                    
                    print(f"   ‚úÖ –í—Å—Ç—Ä–µ—á–∞: {pair.employee1.full_name} ‚Üî {pair.employee2.full_name}")
                    print(f"      üìç –ú–µ—Å—Ç–æ: {pair.meeting_place}")
                    print(f"      üìÖ –î–∞—Ç–∞: {pair.meeting_date.strftime('%d.%m %H:%M')}")
                    if pair.get_average_rating():
                        print(f"      ‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {pair.get_average_rating():.1f}")
                else:
                    pair.status = 'meeting_scheduled'
                    print(f"   üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞: {pair.employee1.full_name} ‚Üî {pair.employee2.full_name}")
            
            pair.save()
        
        print(f"üìä –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á: {completed_meetings}/{len(confirmed_pairs)}")
        print()
    
    def show_statistics(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏"""
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ï–°–°–ò–ò")
        print("-" * 40)
        
        total_pairs = self.coffee_session.get_pairs_count()
        confirmed_pairs = self.coffee_session.get_confirmed_pairs_count()
        participation_rate = self.coffee_session.get_participation_rate()
        
        print(f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {self.coffee_session.title}")
        print(f"üìÖ –ù–µ–¥–µ–ª—è: {self.coffee_session.week_start}")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {self.coffee_session.get_status_display()}")
        print(f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {self.coffee_session.total_participants}")
        print(f"üíë –í—Å–µ–≥–æ –ø–∞—Ä: {total_pairs}")
        print(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä: {confirmed_pairs}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—á–∞—Å—Ç–∏—è: {participation_rate}%")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –ø–∞—Ä
        print(f"\nüìã –°—Ç–∞—Ç—É—Å—ã –ø–∞—Ä:")
        from django.db.models import Count
        status_stats = self.coffee_session.coffee_pairs.values('status').annotate(count=Count('id'))
        
        for stat in status_stats:
            status_display = dict(CoffeePair.STATUS_CHOICES).get(stat['status'], stat['status'])
            print(f"   {status_display}: {stat['count']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å—Ç—Ä–µ—á
        completed_meetings = self.coffee_session.coffee_pairs.filter(meeting_completed=True).count()
        print(f"\nüìÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á: {completed_meetings}")
        
        # –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞
        pairs_with_ratings = self.coffee_session.coffee_pairs.exclude(
            rating_employee1__isnull=True, rating_employee2__isnull=True
        )
        if pairs_with_ratings:
            total_ratings = 0
            rating_count = 0
            for pair in pairs_with_ratings:
                avg = pair.get_average_rating()
                if avg:
                    total_ratings += avg
                    rating_count += 1
            
            if rating_count > 0:
                overall_rating = total_ratings / rating_count
                print(f"‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —Å–µ—Å—Å–∏–∏: {overall_rating:.2f}/5")
        
        print()
    
    def run_demo(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é"""
        self.print_header()
        
        print("üîÑ –≠—Ç–∞–ø—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:")
        print("1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        print("2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Ç–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ")
        print("3Ô∏è‚É£ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä")
        print("4Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è")
        print("5Ô∏è‚É£ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á")
        print("6Ô∏è‚É£ –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        print()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —ç—Ç–∞–ø—ã
        self.create_test_employees()
        self.create_coffee_session()
        self.create_coffee_pairs()
        self.simulate_confirmations()
        self.simulate_meetings_and_feedback()
        self.show_statistics()
        
        print("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("‚òï" + "="*60 + "‚òï")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        demo = SecretCoffeeDemo()
        demo.run_demo()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()