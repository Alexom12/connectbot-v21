#!/usr/bin/env python
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏ –≤ ConnectBot
"""
import os
import sys
import asyncio
import logging
from unittest.mock import Mock, AsyncMock

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')

import django
django.setup()

from telegram import Update, User, CallbackQuery, Message, Chat
from telegram.ext import ContextTypes
from employees.models import Employee, Interest, EmployeeInterest
from bots.menu_manager import MenuManager
from employees.utils import PreferenceManager

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class InterestsBotSimulator:
    """–°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —Å –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏"""
    
    def __init__(self):
        self.context = None
        self.employee = None
    
    async def setup_test_employee(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        try:
            # –ò—â–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å Telegram ID (–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ)
            self.employee = await Employee.objects.filter(
                telegram_id__isnull=False
            ).select_related('department', 'business_center').afirst()
            
            if not self.employee:
                # –ë–µ—Ä–µ–º –ª—é–±–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–º—É telegram_id
                self.employee = await Employee.objects.select_related(
                    'department', 'business_center'
                ).afirst()
                
                if self.employee:
                    self.employee.telegram_id = 123456789  # –¢–µ—Å—Ç–æ–≤—ã–π ID
                    self.employee.telegram_username = "test_user"
                    await Employee.objects.filter(id=self.employee.id).aupdate(
                        telegram_id=123456789,
                        telegram_username="test_user"
                    )
            
            if self.employee:
                logger.info(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {self.employee.full_name}")
                return True
            else:
                logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
            return False
    
    def create_mock_update(self, callback_data=None, message_text=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = Mock(spec=User)
        user.id = self.employee.telegram_id
        user.username = self.employee.telegram_username
        user.first_name = self.employee.full_name.split()[0]
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —á–∞—Ç–∞
        chat = Mock(spec=Chat)
        chat.id = self.employee.telegram_id
        chat.type = 'private'
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update = Mock(spec=Update)
        update.effective_user = user
        update.effective_chat = chat
        
        if callback_data:
            # –î–ª—è callback query
            callback_query = Mock(spec=CallbackQuery)
            callback_query.from_user = user
            callback_query.data = callback_data
            callback_query.answer = AsyncMock()
            callback_query.edit_message_text = AsyncMock()
            update.callback_query = callback_query
        
        if message_text:
            # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            message = Mock(spec=Message)
            message.from_user = user
            message.chat = chat
            message.text = message_text
            message.reply_text = AsyncMock()
            update.message = message
        
        return update
    
    async def simulate_interests_menu(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
        logger.info("üì± –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é '–ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã'...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
            menu_data = await MenuManager.create_interests_menu(self.employee)
            
            logger.info("‚úÖ –ú–µ–Ω—é –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —Å–æ–∑–¥–∞–Ω–æ!")
            logger.info("üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ–Ω—é:")
            logger.info("-" * 50)
            print(menu_data['text'])
            logger.info("-" * 50)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            keyboard = menu_data['reply_markup'].inline_keyboard
            logger.info(f"üîò –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ ({len(keyboard)}):")
            
            for i, row in enumerate(keyboard):
                for button in row:
                    logger.info(f"  {i+1}. {button.text} -> {button.callback_data}")
            
            return menu_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {e}")
            return None
    
    async def simulate_toggle_interest(self, interest_code):
        """–°–∏–º—É–ª—è—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–∞"""
        logger.info(f"üîÑ –°–∏–º—É–ª—è—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–∞: {interest_code}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
            current_interests = await PreferenceManager.get_employee_interests(self.employee)
            active_codes = [ei.interest.code for ei in current_interests if ei.is_active]
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å
            if interest_code in active_codes:
                # –û—Ç–∫–ª—é—á–∞–µ–º
                active_codes.remove(interest_code)
                action = "–æ—Ç–∫–ª—é—á–µ–Ω"
            else:
                # –í–∫–ª—é—á–∞–µ–º
                active_codes.append(interest_code)
                action = "–≤–∫–ª—é—á–µ–Ω"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã
            success = await PreferenceManager.update_employee_interests(
                self.employee, active_codes
            )
            
            if success:
                logger.info(f"‚úÖ –ò–Ω—Ç–µ—Ä–µ—Å '{interest_code}' {action}")
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
                updated_menu = await MenuManager.create_interests_menu(self.employee)
                return updated_menu
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–∞ '{interest_code}'")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–∞: {e}")
            return None
    
    async def simulate_save_interests(self):
        """–°–∏–º—É–ª—è—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
        logger.info("üíæ –°–∏–º—É–ª—è—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
            current_interests = await PreferenceManager.get_employee_interests(self.employee)
            active_interests = [ei for ei in current_interests if ei.is_active]
            
            logger.info("‚úÖ –ò–Ω—Ç–µ—Ä–µ—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            logger.info(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {len(active_interests)}")
            
            for ei in active_interests:
                logger.info(f"  ‚Ä¢ {ei.interest.emoji} {ei.interest.name}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {e}")
            return False
    
    async def simulate_disable_all(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
        logger.info("üö´ –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤...")
        
        try:
            success = await PreferenceManager.disable_all_interests(self.employee)
            
            if success:
                logger.info("‚úÖ –í—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã!")
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
                updated_menu = await MenuManager.create_interests_menu(self.employee)
                return updated_menu
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {e}")
            return None

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ò–ù–¢–ï–†–ï–°–ê–ú–ò")
    logger.info("=" * 60)
    
    simulator = InterestsBotSimulator()
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    if not await simulator.setup_test_employee():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
        return
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.info("\n1Ô∏è‚É£ –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é '–ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã'")
    menu_data = await simulator.simulate_interests_menu()
    
    if not menu_data:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ–Ω—é")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    all_interests = await PreferenceManager.get_all_interests()
    
    if len(all_interests) >= 2:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        test_interest = all_interests[0].code
        
        logger.info(f"\n2Ô∏è‚É£ –í–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å: {test_interest}")
        updated_menu = await simulator.simulate_toggle_interest(test_interest)
        
        if updated_menu:
            logger.info("‚úÖ –ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–∞")
        
        logger.info(f"\n3Ô∏è‚É£ –û—Ç–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å: {test_interest}")
        await simulator.simulate_toggle_interest(test_interest)
        
        # –í–∫–ª—é—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        logger.info("\n4Ô∏è‚É£ –í–∫–ª—é—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
        for interest in all_interests[:3]:
            await simulator.simulate_toggle_interest(interest.code)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã
        logger.info("\n5Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        await simulator.simulate_save_interests()
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ
        logger.info("\n6Ô∏è‚É£ –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã")
        await simulator.simulate_disable_all()
    
    logger.info("\n" + "=" * 60)
    logger.info("üéâ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    logger.info("\nüí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ:")
    logger.info("   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    logger.info("   2. –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ –≤ Telegram")
    logger.info("   3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
    logger.info("   4. –ù–∞–∂–º–∏—Ç–µ '–ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é")
    logger.info("   5. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤")

if __name__ == "__main__":
    asyncio.run(main())