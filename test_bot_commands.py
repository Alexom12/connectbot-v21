#!/usr/bin/env python
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram API –∏ –∏–º–∏—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥
"""
import asyncio
import os
import django
import logging
from django.conf import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

logger = logging.getLogger(__name__)

async def test_bot_api():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API Telegram"""
    try:
        from telegram import Bot
        from telegram.error import TelegramError
        
        print("ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram API...")
        
        bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = await bot.get_me()
        logger.info(f"–ë–æ—Ç –Ω–∞–π–¥–µ–Ω: @{bot_info.username}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–±—Ö—É–∫–∏ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–∫–ª—é—á–µ–Ω—ã –¥–ª—è polling)
        webhook_info = await bot.get_webhook_info()
        logger.info(f"Webhook URL: {webhook_info.url or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è polling)'}")
        
        return True
        
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {e}")
        return False
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

async def check_bot_updates():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    try:
        from telegram import Bot
        
        bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
        
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑ –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏
        updates = await bot.get_updates(limit=10, timeout=5)
        
        if updates:
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(updates)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:")
            for update in updates[-3:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
                if update.message:
                    user = update.message.from_user
                    text = update.message.text or "[–ù–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]"
                    logger.info(f"  @{user.username or user.first_name}: {text}")
        else:
            logger.info("–ù–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç")
            
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        return False

def test_handlers_registration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    try:
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –±–æ—Ç–∞
        from bots.management.commands.runbot import Command
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –º–µ—Ç–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        cmd = Command()
        if hasattr(cmd, '_setup_basic_handlers'):
            logger.info("–ú–µ—Ç–æ–¥ _setup_basic_handlers –Ω–∞–π–¥–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤ –∫–æ–¥–µ –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            import inspect
            source = inspect.getsource(cmd._setup_basic_handlers)
            
            commands = ['start', 'help', 'test']
            for command in commands:
                if f'"{command}"' in source:
                    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /{command} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")
                else:
                    logger.warning(f"–ö–æ–º–∞–Ω–¥–∞ /{command} –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–¥–µ")
                    
            return True
        else:
            logger.error("–ú–µ—Ç–æ–¥ _setup_basic_handlers –ù–ï –Ω–∞–π–¥–µ–Ω")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("ConnectBot v21 - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥")
    
    # –¢–µ—Å—Ç 1: API –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    api_ok = await test_bot_api()
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    handlers_ok = test_handlers_registration()
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    updates_ok = await check_bot_updates()
    
    logger.info("=" * 50)
    logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:")
    logger.info(f"API –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {'‚úÖ OK' if api_ok else '‚ùå FAIL'}")
    logger.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥: {'‚úÖ OK' if handlers_ok else '‚ùå FAIL'}")
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {'‚úÖ OK' if updates_ok else '‚ùå FAIL'}")
    
    if all([api_ok, handlers_ok, updates_ok]):
        logger.info("–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –¥–æ–ª–∂–µ–Ω —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã.")
        logger.info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—ã:")
        logger.info("   /start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
        logger.info("   /help - –°–ø—Ä–∞–≤–∫–∞")
        logger.info("   /test - –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞")
    else:
        logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.")

if __name__ == "__main__":
    asyncio.run(main())