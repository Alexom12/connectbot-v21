"""
Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Redis –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""
from django.core.management.base import BaseCommand, CommandError
from django.utils import timezone
from employees.redis_integration import redis_integration
from employees.redis_utils import EnhancedRedisManager
from employees.redis_events import ConnectBotEvents


class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Redis –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é ConnectBot'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--component',
            choices=['all', 'cache', 'events', 'temp_data', 'health'],
            default='all',
            help='–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
        )
        parser.add_argument(
            '--user-id',
            type=int,
            default=123,
            help='ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤'
        )
    
    def handle(self, *args, **options):
        component = options['component']
        user_id = options['user_id']
        
        self.stdout.write(
            self.style.SUCCESS(f'üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ConnectBot')
        )
        self.stdout.write(f'–ö–æ–º–ø–æ–Ω–µ–Ω—Ç: {component}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}')
        self.stdout.write('-' * 50)
        
        if component in ['all', 'health']:
            self.test_health()
        
        if component in ['all', 'cache']:
            self.test_cache(user_id)
        
        if component in ['all', 'events']:
            self.test_events(user_id)
        
        if component in ['all', 'temp_data']:
            self.test_temp_data(user_id)
        
        self.stdout.write(
            self.style.SUCCESS('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
        )
    
    def test_health(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ Redis"""
        self.stdout.write(self.style.WARNING('üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è Redis...'))
        
        try:
            health_info = redis_integration.health_check()
            
            self.stdout.write(f"–°—Ç–∞—Ç—É—Å: {health_info.get('status', 'unknown')}")
            self.stdout.write(f"Redis –¥–æ—Å—Ç—É–ø–µ–Ω: {health_info.get('redis_available', False)}")
            self.stdout.write(f"Backend: {health_info.get('cache_backend', 'unknown')}")
            self.stdout.write(f"Redis URL: {health_info.get('redis_url', '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')}")
            self.stdout.write(f"Java Service URL: {health_info.get('java_service_url', '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')}")
            
            if health_info.get('redis_available'):
                self.stdout.write(self.style.SUCCESS('‚úÖ Redis —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ'))
            else:
                self.stdout.write(self.style.ERROR('‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'))
                if 'error' in health_info:
                    self.stdout.write(f"–û—à–∏–±–∫–∞: {health_info['error']}")
        
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è: {e}'))
        
        self.stdout.write('')
    
    def test_cache(self, user_id):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é"""
        self.stdout.write(self.style.WARNING('üóÇÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω—é...'))
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –º–µ–Ω—é
            test_menu = {
                'type': 'main',
                'user_id': user_id,
                'options': [
                    {'key': 'profile', 'label': 'üë§ –ü—Ä–æ—Ñ–∏–ª—å'},
                    {'key': 'activities', 'label': 'üéØ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'},
                    {'key': 'settings', 'label': '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'},
                ]
            }
            
            # –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            success = redis_integration.menu_cache.set_user_menu(user_id, test_menu)
            if success:
                self.stdout.write('‚úÖ –ú–µ–Ω—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à')
            else:
                self.stdout.write(self.style.ERROR('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–Ω—é'))
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è
            cached_menu = redis_integration.menu_cache.get_user_menu(user_id)
            if cached_menu:
                self.stdout.write('‚úÖ –ú–µ–Ω—é –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ –∫—ç—à–∞')
                self.stdout.write(f"–û–ø—Ü–∏–π –≤ –º–µ–Ω—é: {len(cached_menu.get('data', {}).get('options', []))}")
            else:
                self.stdout.write(self.style.ERROR('‚ùå –ú–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ'))
            
            # –¢–µ—Å—Ç –ø–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—è –º–µ–Ω—é
            built_menu = redis_integration.menu_builder.build_main_menu(user_id, 'admin')
            if built_menu:
                self.stdout.write('‚úÖ –ú–µ–Ω—é –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ —á–µ—Ä–µ–∑ MenuBuilder')
                self.stdout.write(f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {built_menu.get('role')}")
            
            # –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏
            success = redis_integration.menu_cache.delete_user_menu(user_id)
            if success:
                self.stdout.write('‚úÖ –ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫—ç—à–∞')
        
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—ç—à–∞: {e}'))
        
        self.stdout.write('')
    
    def test_events(self, user_id):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —Å–æ–±—ã—Ç–∏–π"""
        self.stdout.write(self.style.WARNING('üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–æ–±—ã—Ç–∏–π...'))
        
        try:
            # –¢–µ—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
            success = redis_integration.events.publish_user_event(
                user_id,
                ConnectBotEvents.USER_LOGIN,
                {'timestamp': timezone.now().isoformat(), 'source': 'test_command'}
            )
            if success:
                self.stdout.write('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ')
            else:
                self.stdout.write(self.style.ERROR('‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è'))
            
            # –¢–µ—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
            success = redis_integration.events.publish_global_event(
                ConnectBotEvents.SERVICE_STARTED,
                {'service': 'test_service', 'timestamp': timezone.now().isoformat()}
            )
            if success:
                self.stdout.write('‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ')
            else:
                self.stdout.write(self.style.ERROR('‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è'))
            
            # –¢–µ—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞
            success = redis_integration.events.publish_microservice_event(
                'matching',
                ConnectBotEvents.MATCHING_REQUEST,
                {'users': [user_id, user_id + 1], 'type': 'coffee'}
            )
            if success:
                self.stdout.write('‚úÖ –°–æ–±—ã—Ç–∏–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ')
            else:
                self.stdout.write(self.style.ERROR('‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞'))
        
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {e}'))
        
        self.stdout.write('')
    
    def test_temp_data(self, user_id):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        self.stdout.write(self.style.WARNING('üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...'))
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_manager = redis_integration.get_user_manager(user_id)
            
            # –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
            form_data = {
                'step': 1,
                'preferences': ['coffee', 'lunch'],
                'notification_time': '10:00'
            }
            success = user_manager.store_form_data('preferences_step1', form_data)
            if success:
                self.stdout.write('‚úÖ –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
            retrieved_data = user_manager.get_form_data('preferences_step1')
            if retrieved_data:
                self.stdout.write('‚úÖ –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –ø–æ–ª—É—á–µ–Ω—ã')
                self.stdout.write(f"–®–∞–≥ —Ñ–æ—Ä–º—ã: {retrieved_data.get('step')}")
            
            # –¢–µ—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            conversation_state = {
                'current_menu': 'main',
                'last_action': 'show_profile',
                'context': {'editing_preferences': True}
            }
            success = user_manager.store_conversation_state(conversation_state)
            if success:
                self.stdout.write('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ')
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            retrieved_state = user_manager.get_conversation_state()
            if retrieved_state:
                self.stdout.write('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø–æ–ª—É—á–µ–Ω–æ')
                self.stdout.write(f"–¢–µ–∫—É—â–µ–µ –º–µ–Ω—é: {retrieved_state.get('current_menu')}")
            
            # –¢–µ—Å—Ç –æ–±—â–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            test_data = {'test_key': 'test_value', 'number': 42}
            success = redis_integration.temp_data.store_temp_data(
                'test_key', test_data, 300, 'test_namespace'
            )
            if success:
                self.stdout.write('‚úÖ –û–±—â–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
            
            retrieved_test_data = redis_integration.temp_data.get_temp_data(
                'test_key', 'test_namespace'
            )
            if retrieved_test_data:
                self.stdout.write('‚úÖ –û–±—â–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã')
        
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}'))
        
        self.stdout.write('')