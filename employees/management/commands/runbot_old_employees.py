"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞ ConnectBot
–í–µ—Ä—Å–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ getUpdates
"""
import asyncio
import logging
import signal
from django.core.management.base import BaseCommand
from django.conf import settings
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from asgiref.sync import sync_to_async

from employees.utils import AuthManager, PreferenceManager
from employees.redis_utils import RedisManager
from bots.menu_manager import MenuManager

logger = logging.getLogger(__name__)


class ConnectBot:
    def __init__(self):
        self.token = settings.TELEGRAM_BOT_TOKEN
        self.application = None
        self.redis_available = RedisManager.is_redis_available()
        self.running = False
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        
        if self.redis_available:
            logger.info("Redis –¥–æ—Å—Ç—É–ø–µ–Ω, –≤–∫–ª—é—á–µ–Ω–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–π")
        else:
            logger.warning("Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–æ")
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç...")
        self.running = False
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –º—è–≥–∫–∏–π —Å–ø–æ—Å–æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        if hasattr(self, 'application') and self.application:
            try:
                self.application.stop_running()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        try:
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
            if hasattr(self, 'application') and self.application:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                if self.application.running:
                    await self.application.stop()
                if not self.application._initialized:
                    await self.application.shutdown()
            logger.info("–ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
    
    async def get_user_session(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.redis_available:
            return {}
        
        session_data = RedisManager.get_bot_session(user_id)
        return session_data or {}
    
    async def update_user_session(self, user_id: int, session_data: dict):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.redis_available:
            return
        
        current_session = await self.get_user_session(user_id)
        current_session.update(session_data)
        RedisManager.store_bot_session(user_id, current_session)
    
    async def clear_user_session(self, user_id: int):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.redis_available:
            return
        
        RedisManager.clear_bot_session(user_id)
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        try:
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            employee, is_new = await AuthManager.authorize_employee(user)
            
            if employee:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await self.update_user_session(user.id, {
                    'employee_id': employee.id,
                    'employee_name': employee.full_name,
                    'authorized': True,
                    'last_command': '/start'
                })
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                welcome_message = await AuthManager.get_welcome_message(employee)
                await update.message.reply_text(welcome_message, parse_mode='Markdown')
                
                # –ï—Å–ª–∏ –Ω–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
                if is_new:
                    await self.update_user_session(user.id, {'setup_step': 'preferences'})
                    await self.show_preferences_setup(update, context, employee)
                else:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    await self.show_main_menu(update, context)
                    
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
                await self.clear_user_session(user.id)
                error_message = await AuthManager.get_unauthorized_message()
                formatted_message = error_message.format(username=user.username or '–≤–∞—à_username')
                await update.message.reply_text(formatted_message, parse_mode='Markdown')
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    
    async def show_preferences_setup(self, update: Update, context: ContextTypes.DEFAULT_TYPE, employee):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [InlineKeyboardButton("üéØ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã", callback_data="setup_preferences")],
            [InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_setup")],
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üìã *–î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è!*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å. "
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –≤–∞–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n\n"
            "–í—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /preferences",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        menu_data = await MenuManager.create_main_menu()
        
        if update.message:
            await update.message.reply_text(**menu_data)
        else:
            await update.callback_query.edit_message_text(**menu_data)
    
    async def show_profile_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, employee):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è"""
        menu_data = await MenuManager.create_profile_menu(employee)
        await update.callback_query.edit_message_text(**menu_data)
    
    async def show_interests_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, employee):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
        menu_data = await MenuManager.create_interests_menu(employee)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(**menu_data)
        else:
            await update.message.reply_text(**menu_data)
    
    async def show_calendar_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, employee):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        menu_data = await MenuManager.create_calendar_menu(employee)
        await update.callback_query.edit_message_text(**menu_data)
    
    async def show_achievements_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, employee):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        menu_data = await MenuManager.create_achievements_menu(employee)
        await update.callback_query.edit_message_text(**menu_data)
    
    async def show_help_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–º–æ—â–∏"""
        menu_data = await MenuManager.create_help_menu()
        await update.callback_query.edit_message_text(**menu_data)
    
    async def show_settings_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        menu_data = await MenuManager.create_settings_menu()
        await update.callback_query.edit_message_text(**menu_data)
    
    async def preferences(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /preferences"""
        user = update.effective_user
        
        try:
            employee, _ = await AuthManager.authorize_employee(user)
            if not employee:
                error_message = await AuthManager.get_unauthorized_message()
                formatted_message = error_message.format(username=user.username or '–≤–∞—à_username')
                await update.message.reply_text(formatted_message, parse_mode='Markdown')
                return
            
            await self.show_interests_menu(update, context, employee)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /preferences: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
        await self.show_main_menu(update, context)
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        query = update.callback_query
        
        try:
            await query.answer()
            callback_data = query.data
            user = query.from_user
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session_data = await self.get_user_session(user.id)
            
            # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            employee, _ = await AuthManager.authorize_employee(user)
            if not employee:
                await self.clear_user_session(user.id)
                await query.edit_message_text(
                    "–í–∞—à–∞ —Å–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
            await self.update_user_session(user.id, {
                'last_callback': callback_data,
                'last_action_time': str(asyncio.get_event_loop().time())
            })
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –º–µ–Ω—é
            if callback_data == "menu_profile":
                await self.show_profile_menu(update, context, employee)
                
            elif callback_data == "menu_interests":
                await self.show_interests_menu(update, context, employee)
                
            elif callback_data == "menu_calendar":
                await self.show_calendar_menu(update, context, employee)
                
            elif callback_data == "menu_achievements":
                await self.show_achievements_menu(update, context, employee)
                
            elif callback_data == "menu_help":
                await self.show_help_menu(update, context)
                
            elif callback_data == "menu_settings":
                await self.show_settings_menu(update, context)
                
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥
            elif callback_data.startswith("back_"):
                target = callback_data.replace("back_", "")
                if target == "main":
                    await self.show_main_menu(update, context)
                elif target == "profile":
                    await self.show_profile_menu(update, context, employee)
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ü–µ–ª–∏ –¥–ª—è –Ω–∞–∑–∞–¥
                
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
            elif callback_data == "setup_preferences":
                await self.show_interests_menu(update, context, employee)
                
            elif callback_data == "skip_setup":
                await query.edit_message_text(
                    "–û—Ç–ª–∏—á–Ω–æ! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /preferences\n\n"
                    "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
                    parse_mode='Markdown'
                )
                await asyncio.sleep(2)
                await self.show_main_menu(update, context)
                
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏
            elif callback_data.startswith("toggle_interest_"):
                await self.handle_interest_toggle(query, context, employee, callback_data)
                
            elif callback_data == "save_interests":
                await self.save_interests(query, context, employee)
                
            elif callback_data == "disable_all_interests":
                await self.show_disable_all_confirmation(query, context)
                
            elif callback_data == "confirm_disable_all":
                await self.disable_all_interests(query, context, employee)
                
            elif callback_data == "cancel_disable_all":
                await self.show_interests_menu(update, context, employee)
                
            # –ü–æ–º–æ—â—å
            elif callback_data.startswith("help_"):
                await self.show_help_topic(query, context, callback_data)
                
            else:
                await query.edit_message_text(
                    "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n\n"
                    "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª!",
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            try:
                await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–≤–µ—Ç–∏—Ç—å
                try:
                    await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
    
    async def handle_interest_toggle(self, query, context, employee, callback_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–∞"""
        interest_code = callback_data.replace("toggle_interest_", "")
        user = query.from_user
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
        all_interests = await PreferenceManager.get_all_interests()
        employee_interests = await PreferenceManager.get_employee_interests(employee)
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–µ—Å
        current_interest = next((i for i in all_interests if i.code == interest_code), None)
        if not current_interest:
            await query.answer("–ò–Ω—Ç–µ—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        current_ei = next((ei for ei in employee_interests if ei.interest.code == interest_code), None)
        is_currently_active = current_ei.is_active if current_ei else False
        new_status = not is_currently_active
        
        status_text = "–í–ö–õ" if new_status else "–í–´–ö–õ"
        
        await query.answer(
            f"–ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {status_text} {current_interest.name}\n"
            f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è!",
            show_alert=False
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis —Å–µ—Å—Å–∏–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        session_data = await self.get_user_session(user.id)
        if 'pending_interests' not in session_data:
            session_data['pending_interests'] = {}
        session_data['pending_interests'][interest_code] = new_status
        
        await self.update_user_session(user.id, {'pending_interests': session_data['pending_interests']})
        
        # –î—É–±–ª–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if 'pending_interests' not in context.user_data:
            context.user_data['pending_interests'] = {}
        context.user_data['pending_interests'][interest_code] = new_status
    
    async def save_interests(self, query, context, employee):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
        try:
            user = query.from_user
            
            # –ü–æ–ª—É—á–∞–µ–º pending_interests –∏–∑ Redis —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            session_data = await self.get_user_session(user.id)
            pending_interests = session_data.get('pending_interests', {})
            
            if not pending_interests:
                pending_interests = context.user_data.get('pending_interests', {})
            
            if not pending_interests:
                await query.answer("–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", show_alert=True)
                return
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            success = await PreferenceManager.update_employee_interests(
                employee, 
                [code for code, active in pending_interests.items() if active]
            )
            
            if success:
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º
                context.user_data['pending_interests'] = {}
                await self.update_user_session(user.id, {'pending_interests': {}})
                
                # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                await RedisManager.async_invalidate_employee_cache(employee.id)
                
                await query.answer("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", show_alert=True)
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é - —Å–æ–∑–¥–∞–µ–º Update –∏–∑ query
                fake_update = type('Update', (), {'callback_query': query})()
                await self.show_interests_menu(fake_update, context, employee)
            else:
                await query.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", show_alert=True)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {e}")
            await query.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", show_alert=True)
    
    async def show_disable_all_confirmation(self, query, context):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [InlineKeyboardButton("–î–∞, –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data="confirm_disable_all")],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_disable_all")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "*–û—Ç–ø–∏—Å–∫–∞ –æ—Ç –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π*\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π?\n\n"
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def disable_all_interests(self, query, context, employee):
        """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
        try:
            user = query.from_user
            success = await PreferenceManager.disable_all_interests(employee)
            
            if success:
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º
                context.user_data['pending_interests'] = {}
                await self.update_user_session(user.id, {'pending_interests': {}})
                
                # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                await RedisManager.async_invalidate_employee_cache(employee.id)
                
                await query.answer("–û—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π!", show_alert=True)
                # –°–æ–∑–¥–∞–µ–º Update –∏–∑ query –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é
                fake_update = type('Update', (), {'callback_query': query})()
                await self.show_interests_menu(fake_update, context, employee)
            else:
                await query.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏", show_alert=True)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏", show_alert=True)
    
    async def show_help_topic(self, query, context, callback_data):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ–º—É –ø–æ–º–æ—â–∏"""
        topic = callback_data.replace("help_", "")
        
        help_topics = {
            'interests': """
‚ùì *–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã?*

1. –û—Ç–∫—Ä–æ–π—Ç–µ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Üí üéØ –ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã
2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è (‚úÖ/‚ùå)
3. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–Ω–æ–ø–∫–æ–π ¬´üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª

–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∞—é—Ç –≤ —Å–∏–ª—É —Å—Ä–∞–∑—É!
""",
            'optout': """
‚ùì *–ö–∞–∫ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?*

‚Ä¢ –í –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏: –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—â—É¬ª –∏–ª–∏ ¬´–ù–µ —É—á–∞—Å—Ç–≤—É—é¬ª
‚Ä¢ –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö: —Å–Ω–∏–º–∏—Ç–µ –≥–∞–ª–æ—á–∫–∏ —Å –Ω–µ–Ω—É–∂–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π  
‚Ä¢ –ü–æ–ª–Ω—ã–π –æ—Ç–∫–∞–∑: –∫–Ω–æ–ø–∫–∞ ¬´–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ–≥–æ¬ª

–ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç!
""",
            'notifications': """
‚ùì *–ù–µ –ø—Ä–∏—Ö–æ–¥—è—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?*

1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ (/preferences)
2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω—É–∂–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –æ—Ç–∫–ª—é—á–∏–ª–∏ –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
4. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ persists
""",
            'contact_admin': """
üìû *–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*

–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å:

‚Ä¢ Telegram: @hr_admin
‚Ä¢ Email: hr@company.com
‚Ä¢ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —á–∞—Ç: #connectbot-support

–ú—ã –ø–æ–º–æ–∂–µ–º —Ä–µ—à–∏—Ç—å –ª—é–±—ã–µ –ø—Ä–æ–±–ª–µ–º—ã! ü§ù
"""
        }
        
        if topic in help_topics:
            reply_markup = await MenuManager.create_back_button("help")
            await query.edit_message_text(
                help_topics[topic],
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await query.answer("–¢–µ–º–∞ –ø–æ–º–æ—â–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "ü§ñ *ConnectBot - –ü–æ–º–æ—â—å*\n\n"
            "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "/start - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/preferences - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "üí° *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!"
        )
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("preferences", self.preferences))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("menu", self.menu))
        
        # Callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        employee, _ = await AuthManager.authorize_employee(user)
        if not employee:
            error_message = await AuthManager.get_unauthorized_message()
            formatted_message = error_message.format(username=user.username or '–≤–∞—à_username')
            await update.message.reply_text(formatted_message, parse_mode='Markdown')
            return
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –º–µ–Ω—é
        await update.message.reply_text(
            "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:\n"
            "/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/preferences - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤\n" 
            "/help - –ü–æ–º–æ—â—å",
            parse_mode='Markdown'
        )
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ HTTPXRequest –≤–æ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        error_str = str(context.error)
        if ("HTTPXRequest" in error_str or 
            "httpx" in error_str.lower() or 
            not self.running):
            return
            
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {context.error}")
        
        if update and update.effective_message and self.running:
            try:
                await update.effective_message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω."
                )
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    

    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π"""
        if not self.token:
            logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
            
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            self.application = (
                Application.builder()
                .token(self.token)
                .read_timeout(30)      # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è
                .write_timeout(30)     # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Å–∏
                .connect_timeout(20)   # –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                .pool_timeout(10)      # –¢–∞–π–º–∞—É—Ç –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                .get_updates_read_timeout(10)  # –¢–∞–π–º–∞—É—Ç –¥–ª—è getUpdates
                .build()
            )
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.setup_handlers()
            
            logger.info("ConnectBot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling - —ç—Ç–æ –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤
            try:
                self.application.run_polling(
                    poll_interval=2.0,      # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    timeout=10,             # –¢–∞–π–º–∞—É—Ç long polling
                    drop_pending_updates=True,  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    close_loop=False       # –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º event loop –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
                )
            except KeyboardInterrupt:
                logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ Ctrl+C, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º...")
                self.running = False
            
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            if self.running:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ—Ç –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            logger.info("ConnectBot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


class Command(BaseCommand):
    """Django management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞"""
    
    help = '–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ ConnectBot'
    
    def handle(self, *args, **options):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã"""
        self.stdout.write(self.style.SUCCESS('–ó–∞–ø—É—Å–∫ ConnectBot...'))
        
        bot = ConnectBot()
        bot.run()