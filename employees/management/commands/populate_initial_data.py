from django.core.management.base import BaseCommand
from employees.models import Interest, Department, BusinessCenter, Achievement


class Command(BaseCommand):
    help = '–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ConnectBot'

    def handle(self, *args, **options):
        self.stdout.write('üöÄ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
        
        self.create_interests()
        self.create_departments() 
        self.create_business_centers()
        self.create_achievements()
        
        self.stdout.write(self.style.SUCCESS('‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!'))

    def create_interests(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤/–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"""
        interests_data = [
            {'code': 'coffee', 'name': '–¢–∞–π–Ω—ã–π –∫–æ—Ñ–µ', 'emoji': '‚òïÔ∏è', 'description': '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ –¥–≤—É—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤'},
            {'code': 'lunch', 'name': '–û–±–µ–¥ –≤—Å–ª–µ–ø—É—é', 'emoji': 'üçù', 'description': '–°–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –æ–±–µ–¥–∞'},
            {'code': 'walk', 'name': '–°–ª–µ–ø–∞—è –ø—Ä–æ–≥—É–ª–∫–∞', 'emoji': 'üö∂', 'description': '30-–º–∏–Ω—É—Ç–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞ –≤–¥–≤–æ–µ–º —Å –∑–∞–ø—Ä–µ—Ç–æ–º –Ω–∞ —Ä–∞–±–æ—á–∏–µ —Ç–µ–º—ã'},
            {'code': 'chess', 'name': '–®–∞—Ö–º–∞—Ç—ã', 'emoji': '‚ôüÔ∏è', 'description': '–ë—ã—Å—Ç—Ä—ã–µ –ø–∞—Ä—Ç–∏–∏ –∏ —Ç—É—Ä–Ω–∏—Ä—ã –ø–æ —à–∞—Ö–º–∞—Ç–∞–º'},
            {'code': 'pingpong', 'name': '–ù–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å', 'emoji': 'üèì', 'description': '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏–≥—Ä –≤ –ø–∏–Ω–≥-–ø–æ–Ω–≥'},
            {'code': 'games', 'name': '–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã', 'emoji': 'üé≤', 'description': '–°–±–æ—Ä –∫–æ–º–∞–Ω–¥ –¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –∏–≥—Ä'},
            {'code': 'photo', 'name': '–§–æ—Ç–æ–∫–≤–µ—Å—Ç—ã', 'emoji': 'üì∏', 'description': '–ö–æ–º–∞–Ω–¥–Ω–æ–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π'},
            {'code': 'masterclass', 'name': '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã', 'emoji': 'üß†', 'description': '–°–µ—Å—Å–∏–∏, –≥–¥–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –¥–µ–ª—è—Ç—Å—è —Å–≤–æ–∏–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏'},
            {'code': 'clubs', 'name': '–ö–ª—É–±—ã –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º', 'emoji': 'üìö', 'description': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–æ–≤ –¥–ª—è –ª—é–¥–µ–π —Å–æ —Å—Ö–æ–∂–∏–º–∏ —Ö–æ–±–±–∏'},
        ]
        
        for interest_data in interests_data:
            interest, created = Interest.objects.get_or_create(
                code=interest_data['code'],
                defaults=interest_data
            )
            if created:
                self.stdout.write(f"‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω—Ç–µ—Ä–µ—Å: {interest.emoji} {interest.name}")
            else:
                self.stdout.write(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–µ—Å: {interest.emoji} {interest.name}")

    def create_departments(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–æ–≤"""
        departments = [
            {'name': 'IT –æ—Ç–¥–µ–ª', 'code': 'IT'},
            {'name': '–û—Ç–¥–µ–ª –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞', 'code': 'MARKETING'},
            {'name': '–û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂', 'code': 'SALES'},
            {'name': '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è', 'code': 'ACCOUNTING'},
            {'name': 'HR –æ—Ç–¥–µ–ª', 'code': 'HR'},
            {'name': '–û—Ç–¥–µ–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', 'code': 'DEVELOPMENT'},
            {'name': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞', 'code': 'SUPPORT'},
        ]
        
        for dept_data in departments:
            department, created = Department.objects.get_or_create(
                code=dept_data['code'],
                defaults=dept_data
            )
            if created:
                self.stdout.write(f"‚úÖ –°–æ–∑–¥–∞–Ω –æ—Ç–¥–µ–ª: {department.name}")

    def create_business_centers(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä–æ–≤"""
        business_centers = [
            {'name': '–ë–¶ –ú–æ—Å–∫–≤–∞-–°–∏—Ç–∏', 'address': '–ü—Ä–µ—Å–Ω–µ–Ω—Å–∫–∞—è –Ω–∞–±., 8—Å1'},
            {'name': '–ë–¶ –û–∫–æ', 'address': '1-–π –ö—Ä–∞—Å–Ω–æ–≥–≤–∞—Ä–¥–µ–π—Å–∫–∏–π –ø—Ä., 21'},
            {'name': '–ë–¶ –§–µ–¥–µ—Ä–∞—Ü–∏—è', 'address': '–ü—Ä–µ—Å–Ω–µ–Ω—Å–∫–∞—è –Ω–∞–±., 12'},
            {'name': '–ë–¶ –ì—Ä–∏–Ω–≤–∏—á', 'address': '—É–ª. 8 –ú–∞—Ä—Ç–∞, 1'},
        ]
        
        for bc_data in business_centers:
            bc, created = BusinessCenter.objects.get_or_create(
                name=bc_data['name'],
                defaults=bc_data
            )
            if created:
                self.stdout.write(f"‚úÖ –°–æ–∑–¥–∞–Ω –ë–¶: {bc.name}")

    def create_achievements(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        achievements_data = [
            {
                'name': '–ü–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞',
                'description': '–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –ø–µ—Ä–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
                'achievement_type': 'participation',
                'icon': 'üéØ',
                'condition_type': 'count',
                'condition_value': 1,
                'points_reward': 10,
            },
            {
                'name': '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞', 
                'description': '–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ 5 —Ä–∞–∑–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö',
                'achievement_type': 'variety',
                'icon': 'ü¶ã',
                'condition_type': 'variety',
                'condition_value': 5,
                'points_reward': 50,
            },
            {
                'name': '–ö–æ—Ñ–µ–º–∞–Ω',
                'description': '–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ 3 –¢–∞–π–Ω—ã—Ö –∫–æ—Ñ–µ',
                'achievement_type': 'consistency',
                'icon': '‚òïÔ∏è',
                'condition_type': 'count',
                'condition_value': 3,
                'condition_activity_type': 'coffee',
                'points_reward': 30,
            },
            {
                'name': '–®–∞—Ö–º–∞—Ç–Ω—ã–π –≥—Ä–æ—Å—Å–º–µ–π—Å—Ç–µ—Ä',
                'description': '–°—ã–≥—Ä–∞—Ç—å 10 –ø–∞—Ä—Ç–∏–π –≤ —à–∞—Ö–º–∞—Ç—ã',
                'achievement_type': 'expert',
                'icon': '‚ôüÔ∏è',
                'condition_type': 'count', 
                'condition_value': 10,
                'condition_activity_type': 'chess',
                'points_reward': 100,
            },
        ]
        
        for achievement_data in achievements_data:
            achievement, created = Achievement.objects.get_or_create(
                name=achievement_data['name'],
                defaults=achievement_data
            )
            if created:
                self.stdout.write(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {achievement.icon} {achievement.name}")