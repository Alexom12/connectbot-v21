"""
Django management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Redis –∫–µ—à–µ–º
"""
from django.core.management.base import BaseCommand
from django.core.cache import cache
from employees.redis_utils import RedisManager
from employees.models import Employee, Activity


class Command(BaseCommand):
    help = '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Redis –∫–µ—à–µ–º –¥–ª—è ConnectBot v21'
    
    def add_arguments(self, parser):
        parser.add_argument(
            'action',
            type=str,
            choices=['status', 'clear', 'warmup', 'test'],
            help='–î–µ–π—Å—Ç–≤–∏–µ: status - —Å—Ç–∞—Ç—É—Å Redis, clear - –æ—á–∏—Å—Ç–∏—Ç—å –∫–µ—à, warmup - –ø—Ä–æ–≥—Ä–µ–≤ –∫–µ—à–∞, test - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'
        )
        parser.add_argument(
            '--employee-id',
            type=int,
            help='ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
        )
        parser.add_argument(
            '--activity-id',
            type=int,
            help='ID –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é'
        )
    
    def handle(self, *args, **options):
        action = options['action']
        
        if action == 'status':
            self.show_redis_status()
        elif action == 'clear':
            self.clear_cache(options.get('employee_id'), options.get('activity_id'))
        elif action == 'warmup':
            self.warmup_cache()
        elif action == 'test':
            self.test_redis()
    
    def show_redis_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å Redis –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞"""
        self.stdout.write(self.style.HTTP_INFO('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Redis...'))
        
        if RedisManager.is_redis_available():
            self.stdout.write(self.style.SUCCESS('‚úÖ Redis –¥–æ—Å—Ç—É–ø–µ–Ω'))
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            try:
                # –¢–µ—Å—Ç–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                cache.set('test_key', 'test_value', 10)
                result = cache.get('test_key')
                cache.delete('test_key')
                
                if result == 'test_value':
                    self.stdout.write(self.style.SUCCESS('‚úÖ –ó–∞–ø–∏—Å—å/—á—Ç–µ–Ω–∏–µ –≤ Redis —Ä–∞–±–æ—Ç–∞–µ—Ç'))
                else:
                    self.stdout.write(self.style.WARNING('‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–ø–∏—Å—å—é/—á—Ç–µ–Ω–∏–µ–º Redis'))
                
                # –ü–æ–∫–∞–∂–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                self.stdout.write('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:')
                
                # –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
                employees_cached = 0
                total_employees = Employee.objects.filter(is_active=True).count()
                
                for emp in Employee.objects.filter(is_active=True, telegram_id__isnull=False)[:10]:
                    if RedisManager.get_employee_data(emp.telegram_id):
                        employees_cached += 1
                
                self.stdout.write(f'   –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤ –∫–µ—à–µ: {employees_cached}/{min(total_employees, 10)} (–≤—ã–±–æ—Ä–æ—á–Ω–æ)')
                
                # –ü—Ä–æ–≤–µ—Ä–∏–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                activities_cached = 0
                total_activities = Activity.objects.filter(status__in=['scheduled', 'active']).count()
                
                for act in Activity.objects.filter(status__in=['scheduled', 'active'])[:10]:
                    if RedisManager.get_activity_participants(act.id):
                        activities_cached += 1
                
                self.stdout.write(f'   –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –∫–µ—à–µ: {activities_cached}/{min(total_activities, 10)} (–≤—ã–±–æ—Ä–æ—á–Ω–æ)')
                
            except Exception as e:
                self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Redis: {e}'))
        else:
            self.stdout.write(self.style.ERROR('‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'))
            self.stdout.write('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:')
            self.stdout.write('  - –ó–∞–ø—É—â–µ–Ω –ª–∏ Redis —Å–µ—Ä–≤–µ—Ä: docker-compose up -d')
            self.stdout.write('  - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ')
    
    def clear_cache(self, employee_id=None, activity_id=None):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à"""
        if employee_id:
            # –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            try:
                employee = Employee.objects.get(id=employee_id)
                if employee.telegram_id:
                    success = RedisManager.invalidate_employee_cache(employee.telegram_id)
                    if success:
                        self.stdout.write(
                            self.style.SUCCESS(f'‚úÖ –ö–µ—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.full_name} –æ—á–∏—â–µ–Ω')
                        )
                    else:
                        self.stdout.write(
                            self.style.ERROR(f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–µ—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.full_name}')
                        )
                else:
                    self.stdout.write(
                        self.style.WARNING(f'‚ö†Ô∏è  –£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.full_name} –Ω–µ—Ç Telegram ID')
                    )
            except Employee.DoesNotExist:
                self.stdout.write(self.style.ERROR(f'‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID {employee_id} –Ω–µ –Ω–∞–π–¥–µ–Ω'))
        
        elif activity_id:
            # –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            try:
                activity = Activity.objects.get(id=activity_id)
                key = f"{RedisManager.PREFIX_ACTIVITY}{activity_id}:participants"
                cache.delete(key)
                self.stdout.write(
                    self.style.SUCCESS(f'‚úÖ –ö–µ—à –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ "{activity.title}" –æ—á–∏—â–µ–Ω')
                )
            except Activity.DoesNotExist:
                self.stdout.write(self.style.ERROR(f'‚ùå –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å ID {activity_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'))
        
        else:
            # –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫–µ—à
            try:
                cache.clear()
                self.stdout.write(self.style.SUCCESS('‚úÖ –í–µ—Å—å –∫–µ—à –æ—á–∏—â–µ–Ω'))
            except Exception as e:
                self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞: {e}'))
    
    def warmup_cache(self):
        """–ü—Ä–æ–≥—Ä–µ–≤ –∫–µ—à–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        self.stdout.write(self.style.HTTP_INFO('üî• –ü—Ä–æ–≥—Ä–µ–≤ –∫–µ—à–∞...'))
        
        # –ö–µ—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å Telegram ID
        employees_cached = 0
        for employee in Employee.objects.filter(is_active=True, telegram_id__isnull=False):
            data = {
                'id': employee.id,
                'full_name': employee.full_name,
                'position': employee.position,
                'telegram_id': employee.telegram_id,
                'telegram_username': employee.telegram_username,
            }
            if RedisManager.cache_employee_data(employee.telegram_id, data):
                employees_cached += 1
            
            # –ö–µ—à–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            interests = employee.get_interests_list()  # –≠—Ç–æ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        
        self.stdout.write(self.style.SUCCESS(f'‚úÖ –ó–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ {employees_cached} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤'))
        
        # –ö–µ—à–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        activities_cached = 0
        for activity in Activity.objects.filter(status__in=['scheduled', 'active']):
            activity.get_participants_count()  # –≠—Ç–æ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
            activities_cached += 1
        
        self.stdout.write(self.style.SUCCESS(f'‚úÖ –ó–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ {activities_cached} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π'))
        
        self.stdout.write(self.style.SUCCESS('üéâ –ü—Ä–æ–≥—Ä–µ–≤ –∫–µ—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!'))
    
    def test_redis(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π Redis"""
        self.stdout.write(self.style.HTTP_INFO('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis —Ñ—É–Ω–∫—Ü–∏–π...'))
        
        # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        self.stdout.write('–¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫–µ—à–∞')
        try:
            cache.set('test_key', {'test': 'data'}, 10)
            result = cache.get('test_key')
            cache.delete('test_key')
            
            if result and result.get('test') == 'data':
                self.stdout.write(self.style.SUCCESS('  ‚úÖ –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç'))
            else:
                self.stdout.write(self.style.ERROR('  ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–≤—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏'))
                return
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'  ‚ùå –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {e}'))
            return
        
        # –¢–µ—Å—Ç 2: –§—É–Ω–∫—Ü–∏–∏ RedisManager
        self.stdout.write('\n–¢–µ—Å—Ç 2: –§—É–Ω–∫—Ü–∏–∏ RedisManager')
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        test_employee_data = {
            'id': 999,
            'full_name': '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'position': '–¢–µ—Å—Ç–µ—Ä',
            'telegram_id': 123456789,
            'telegram_username': 'testuser',
        }
        
        try:
            # –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            success = RedisManager.cache_employee_data(123456789, test_employee_data)
            if success:
                self.stdout.write('  ‚úÖ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç')
            else:
                self.stdout.write('  ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            cached_data = RedisManager.get_employee_data(123456789)
            if cached_data and cached_data.get('full_name') == '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å':
                self.stdout.write('  ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç')
            else:
                self.stdout.write('  ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
            
            # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            RedisManager.invalidate_employee_cache(123456789)
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'  ‚ùå –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π RedisManager: {e}'))
        
        # –¢–µ—Å—Ç 3: –°–µ—Å—Å–∏–∏ –±–æ—Ç–∞
        self.stdout.write('\n–¢–µ—Å—Ç 3: –°–µ—Å—Å–∏–∏ –±–æ—Ç–∞')
        try:
            test_session = {'current_menu': 'main', 'user_state': 'active'}
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            success = RedisManager.store_bot_session(123456789, test_session)
            if success:
                self.stdout.write('  ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç')
            else:
                self.stdout.write('  ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏')
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            session_data = RedisManager.get_bot_session(123456789)
            if session_data and session_data.get('current_menu') == 'main':
                self.stdout.write('  ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç')
            else:
                self.stdout.write('  ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏')
            
            # –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏
            RedisManager.clear_bot_session(123456789)
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'  ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–π –±–æ—Ç–∞: {e}'))
        
        self.stdout.write(self.style.SUCCESS('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!'))