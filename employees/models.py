"""
–ú–æ–¥–µ–ª–∏ –¥–ª—è –º–æ–¥—É–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
"""
from django.db import models
from django.core.validators import MinValueValidator, MaxValueValidator
from django.utils.html import format_html
from .redis_utils import RedisManager
import logging

logger = logging.getLogger(__name__)


class Department(models.Model):
    """–ú–æ–¥–µ–ª—å –æ—Ç–¥–µ–ª–∞/–¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞"""
    name = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞", max_length=200, unique=True)
    code = models.CharField("–ö–æ–¥ –æ—Ç–¥–µ–ª–∞", max_length=50, unique=True)
    description = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ", blank=True)
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω—ã–π", default=True)
    
    class Meta:
        verbose_name = "–û—Ç–¥–µ–ª"
        verbose_name_plural = "–û—Ç–¥–µ–ª—ã"
        ordering = ['name']
    
    def __str__(self):
        return self.name


class BusinessCenter(models.Model):
    """–ú–æ–¥–µ–ª—å –±–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä–∞"""
    name = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ –ë–¶", max_length=200, unique=True)
    address = models.TextField("–ê–¥—Ä–µ—Å", blank=True)
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω—ã–π", default=True)
    
    class Meta:
        verbose_name = "–ë–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä"
        verbose_name_plural = "–ë–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä—ã"
        ordering = ['name']
    
    def __str__(self):
        return self.name


class Employee(models.Model):
    """–ú–æ–¥–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    full_name = models.CharField("–§–ò–û", max_length=200)
    position = models.CharField("–î–æ–ª–∂–Ω–æ—Å—Ç—å", max_length=200, blank=True, null=True)
    department = models.ForeignKey(
        Department, 
        on_delete=models.SET_NULL, 
        verbose_name="–û—Ç–¥–µ–ª", 
        blank=True, 
        null=True
    )
    business_center = models.ForeignKey(
        BusinessCenter,
        on_delete=models.SET_NULL,
        verbose_name="–ë–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä", 
        blank=True, 
        null=True
    )
    
    # Telegram –¥–∞–Ω–Ω—ã–µ
    telegram_id = models.BigIntegerField("Telegram ID", unique=True, blank=True, null=True)
    telegram_username = models.CharField("Telegram username", max_length=100, blank=True, null=True)
    normalized_username = models.CharField("–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π username", max_length=100, blank=True, null=True)
    
    # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    email = models.EmailField("Email", blank=True, null=True)
    phone = models.CharField("–¢–µ–ª–µ—Ñ–æ–Ω", max_length=20, blank=True, null=True)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    birth_date = models.DateField("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", blank=True, null=True)
    hire_date = models.DateField("–î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É", blank=True, null=True)
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω—ã–π", default=True)
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–ª—è
    authorized = models.BooleanField("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", default=False)
    last_activity = models.DateTimeField("–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", blank=True, null=True)
    
    # –î–∞—Ç—ã
    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω", auto_now_add=True)
    updated_at = models.DateTimeField("–û–±–Ω–æ–≤–ª–µ–Ω", auto_now=True)
    
    class Meta:
        verbose_name = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫"
        verbose_name_plural = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"
        ordering = ['full_name']
        indexes = [
            models.Index(fields=['telegram_id']),
            models.Index(fields=['telegram_username']),
            models.Index(fields=['normalized_username']),
            models.Index(fields=['is_active', 'authorized']),
        ]
    
    def __str__(self):
        return f"{self.full_name} ({self.position or '–ù–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–∏'})"
    
    def save(self, *args, **kwargs):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º save –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ username –∏ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞"""
        if self.telegram_username:
            self.normalized_username = self.normalize_username(self.telegram_username)
        
        super().save(*args, **kwargs)
        
        # –û—á–∏—â–∞–µ–º –∫–µ—à –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        if self.telegram_id:
            RedisManager.invalidate_employee_cache(self.telegram_id)
    
    @staticmethod
    def normalize_username(username):
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è username –¥–ª—è –ø–æ–∏—Å–∫–∞"""
        if not username:
            return ""
        return username.strip().lstrip('@').lower().replace('_', '').replace('-', '').replace('.', '')
    
    def get_interests_list(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–µ—à–∞
        interests = RedisManager.get_employee_interests(self.id)
        if interests is not None:
            return interests
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î –∏ –∫–µ—à–∏—Ä—É–µ–º
        interests = [ei.interest for ei in self.interests.filter(is_active=True)]
        RedisManager.cache_employee_interests(self.id, interests)
        return interests
    
    def get_activity_stats(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        from django.db.models import Count
        return self.activities.values('activity_type').annotate(count=Count('id'))
    
    @classmethod
    def find_by_telegram_data(cls, telegram_user):
        """
        –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º relaxed matching –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        if not telegram_user:
            return None
        
        username = getattr(telegram_user, 'username', None)
        user_id = getattr(telegram_user, 'id', None)
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ telegram_id (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±)
        if user_id:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à —Å–Ω–∞—á–∞–ª–∞
                employee_data = RedisManager.get_employee_data(user_id)
                if employee_data:
                    return cls.objects.get(id=employee_data['id'])
                
                employee = cls.objects.filter(telegram_id=user_id, is_active=True).first()
                if employee:
                    # –ö–µ—à–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                    RedisManager.cache_employee_data(
                        user_id, 
                        {
                            'id': employee.id,
                            'full_name': employee.full_name,
                            'position': employee.position,
                            'telegram_id': employee.telegram_id,
                            'telegram_username': employee.telegram_username,
                        }
                    )
                    return employee
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ telegram_id {user_id}: {e}")
        
        # –ü–æ–∏—Å–∫ –ø–æ username
        return cls.find_by_username(username)
    
    @classmethod
    def find_by_username(cls, username):
        """
        –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ username —Å relaxed matching
        """
        if not username:
            return None
        
        normalized_username = cls.normalize_username(username)
        
        try:
            # 1. –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ telegram_username
            employees = cls.objects.filter(
                telegram_username__iexact=username,
                is_active=True
            )
            
            if employees.count() == 1:
                return employees.first()
            
            # 2. –ü–æ–∏—Å–∫ –ø–æ normalized_username
            employees = cls.objects.filter(
                normalized_username=normalized_username,
                is_active=True
            )
            
            if employees.count() == 1:
                return employees.first()
                
        except Exception as e:
            import logging
            logger = logging.getLogger(__name__)
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ username {username}: {e}")
        
        return None
    
    def update_telegram_data(self, telegram_user):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        """
        updated = False
        
        if hasattr(telegram_user, 'username') and telegram_user.username and not self.telegram_username:
            self.telegram_username = telegram_user.username
            updated = True
        
        if hasattr(telegram_user, 'id') and telegram_user.id and not self.telegram_id:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ telegram_id —É–Ω–∏–∫–∞–ª–µ–Ω
            existing = Employee.objects.filter(telegram_id=telegram_user.id).exclude(pk=self.pk).first()
            if not existing:
                self.telegram_id = telegram_user.id
                updated = True
        
        if updated:
            self.save(update_fields=['telegram_id', 'telegram_username'])
            return True
        
        return False


class Interest(models.Model):
    """–ú–æ–¥–µ–ª—å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤/–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"""
    
    INTEREST_TYPES = [
        ('coffee', '‚òïÔ∏è –¢–∞–π–Ω—ã–π –∫–æ—Ñ–µ'),
        ('lunch', 'üçù –û–±–µ–¥ –≤—Å–ª–µ–ø—É—é'), 
        ('walk', 'üö∂ –°–ª–µ–ø–∞—è –ø—Ä–æ–≥—É–ª–∫–∞'),
        ('chess', '‚ôüÔ∏è –®–∞—Ö–º–∞—Ç—ã'),
        ('pingpong', 'üèì –ù–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å'),
        ('games', 'üé≤ –ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã'),
        ('photo', 'üì∏ –§–æ—Ç–æ–∫–≤–µ—Å—Ç—ã'),
        ('masterclass', 'üß† –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã'),
        ('clubs', 'üìö –ö–ª—É–±—ã –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º'),
    ]
    
    code = models.CharField("–ö–æ–¥", max_length=20, choices=INTEREST_TYPES, unique=True)
    name = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ", max_length=100)
    emoji = models.CharField("–≠–º–æ–¥–∑–∏", max_length=10)
    description = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ", blank=True)
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω—ã–π", default=True)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    auto_schedule = models.BooleanField("–ê–≤—Ç–æ-–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", default=True)
    schedule_frequency = models.CharField(
        "–ß–∞—Å—Ç–æ—Ç–∞", 
        max_length=20, 
        choices=[
            ('weekly', '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ'),
            ('biweekly', '–†–∞–∑ –≤ –¥–≤–µ –Ω–µ–¥–µ–ª–∏'), 
            ('monthly', '–ï–∂–µ–º–µ—Å—è—á–Ω–æ'),
        ],
        default='weekly'
    )
    
    class Meta:
        verbose_name = "–ò–Ω—Ç–µ—Ä–µ—Å"
        verbose_name_plural = "–ò–Ω—Ç–µ—Ä–µ—Å—ã"
        ordering = ['code']
    
    def __str__(self):
        return f"{self.emoji} {self.name}"
    
    def get_active_subscribers_count(self):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        return self.employeeinterest_set.filter(is_active=True).count()


class EmployeeInterest(models.Model):
    """–°–≤—è–∑—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏"""
    
    employee = models.ForeignKey(Employee, on_delete=models.CASCADE, related_name='interests')
    interest = models.ForeignKey(Interest, on_delete=models.CASCADE)
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω–∞", default=True)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    receive_notifications = models.BooleanField("–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", default=True)
    notification_frequency = models.CharField(
        "–ß–∞—Å—Ç–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
        max_length=20,
        choices=[
            ('immediate', '–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ'),
            ('daily', '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ'),
            ('weekly', '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ'),
        ],
        default='immediate'
    )
    
    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω–∞", auto_now_add=True)
    updated_at = models.DateTimeField("–û–±–Ω–æ–≤–ª–µ–Ω–∞", auto_now=True)
    
    class Meta:
        verbose_name = "–ò–Ω—Ç–µ—Ä–µ—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
        verbose_name_plural = "–ò–Ω—Ç–µ—Ä–µ—Å—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
        unique_together = ['employee', 'interest']
        indexes = [
            models.Index(fields=['employee', 'is_active']),
            models.Index(fields=['interest', 'is_active']),
        ]
    
    def __str__(self):
        status = "‚úÖ" if self.is_active else "‚ùå"
        return f"{status} {self.employee.full_name} - {self.interest.name}"


class Activity(models.Model):
    """–ú–æ–¥–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏/–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    
    ACTIVITY_TYPES = [
        ('coffee', '–¢–∞–π–Ω—ã–π –∫–æ—Ñ–µ'),
        ('lunch', '–û–±–µ–¥ –≤—Å–ª–µ–ø—É—é'),
        ('walk', '–°–ª–µ–ø–∞—è –ø—Ä–æ–≥—É–ª–∫–∞'), 
        ('chess', '–®–∞—Ö–º–∞—Ç—ã'),
        ('pingpong', '–ù–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å'),
        ('games', '–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã'),
        ('photo', '–§–æ—Ç–æ–∫–≤–µ—Å—Ç'),
        ('masterclass', '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å'),
        ('club', '–ö–ª—É–± –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º'),
    ]
    
    STATUS_CHOICES = [
        ('draft', '–ß–µ—Ä–Ω–æ–≤–∏–∫'),
        ('scheduled', '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'),
        ('active', '–ê–∫—Ç–∏–≤–Ω–æ'),
        ('completed', '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'),
        ('cancelled', '–û—Ç–º–µ–Ω–µ–Ω–æ'),
    ]
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    title = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ", max_length=200)
    activity_type = models.CharField("–¢–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", max_length=20, choices=ACTIVITY_TYPES)
    interest = models.ForeignKey(Interest, on_delete=models.CASCADE, verbose_name="–ò–Ω—Ç–µ—Ä–µ—Å")
    description = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ", blank=True)
    
    # –í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
    scheduled_date = models.DateField("–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è")
    scheduled_time = models.TimeField("–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è", blank=True, null=True)
    duration_minutes = models.IntegerField("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω—É—Ç)", default=30)
    
    # –°—Ç–∞—Ç—É—Å
    status = models.CharField("–°—Ç–∞—Ç—É—Å", max_length=20, choices=STATUS_CHOICES, default='draft')
    max_participants = models.IntegerField("–ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", default=2)
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–ª—è
    is_auto_created = models.BooleanField("–ê–≤—Ç–æ-—Å–æ–∑–¥–∞–Ω–æ", default=False)
    created_by = models.ForeignKey(
        Employee, 
        on_delete=models.SET_NULL, 
        verbose_name="–°–æ–∑–¥–∞–Ω–æ",
        blank=True, 
        null=True,
        related_name='created_activities'
    )
    
    # –î–∞—Ç—ã
    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω–æ", auto_now_add=True)
    updated_at = models.DateTimeField("–û–±–Ω–æ–≤–ª–µ–Ω–æ", auto_now=True)
    
    class Meta:
        verbose_name = "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
        verbose_name_plural = "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
        ordering = ['-scheduled_date', '-scheduled_time']
        indexes = [
            models.Index(fields=['activity_type', 'status']),
            models.Index(fields=['scheduled_date', 'status']),
            models.Index(fields=['interest', 'status']),
        ]
    
    def __str__(self):
        return f"{self.get_activity_type_display()}: {self.title} ({self.scheduled_date})"
    
    def get_participants_count(self):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–µ—à–∞
        participants = RedisManager.get_activity_participants(self.id)
        if participants is not None:
            return len([p for p in participants if p.get('status') == 'confirmed'])
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î –∏ –∫–µ—à–∏—Ä—É–µ–º
        participants_data = []
        for p in self.participants.all():
            participants_data.append({
                'id': p.id,
                'employee_id': p.employee.id,
                'employee_name': p.employee.full_name,
                'status': p.status
            })
        
        RedisManager.cache_activity_participants(self.id, participants_data)
        return len([p for p in participants_data if p.get('status') == 'confirmed'])
    
    def is_fully_booked(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
        return self.get_participants_count() >= self.max_participants
    
    def can_join(self):
        """–ú–æ–∂–Ω–æ –ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        return (self.status in ['scheduled', 'active'] and 
                not self.is_fully_booked())


class ActivityParticipant(models.Model):
    """–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    
    STATUS_CHOICES = [
        ('invited', '–ü—Ä–∏–≥–ª–∞—à–µ–Ω'),
        ('confirmed', '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª'),
        ('declined', '–û—Ç–∫–∞–∑–∞–ª—Å—è'),
        ('attended', '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª'),
        ('no_show', '–ù–µ —è–≤–∏–ª—Å—è'),
    ]
    
    activity = models.ForeignKey(Activity, on_delete=models.CASCADE, related_name='participants')
    employee = models.ForeignKey(Employee, on_delete=models.CASCADE, related_name='activities')
    status = models.CharField("–°—Ç–∞—Ç—É—Å", max_length=20, choices=STATUS_CHOICES, default='invited')
    
    # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    rating = models.IntegerField(
        "–û—Ü–µ–Ω–∫–∞", 
        blank=True, 
        null=True,
        validators=[MinValueValidator(1), MaxValueValidator(5)]
    )
    feedback = models.TextField("–û—Ç–∑—ã–≤", blank=True)
    
    # –î–∞—Ç—ã
    invited_at = models.DateTimeField("–ü—Ä–∏–≥–ª–∞—à–µ–Ω", auto_now_add=True)
    responded_at = models.DateTimeField("–û—Ç–≤–µ—Ç–∏–ª", blank=True, null=True)
    attended_at = models.DateTimeField("–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª", blank=True, null=True)
    
    class Meta:
        verbose_name = "–£—á–∞—Å—Ç–Ω–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
        verbose_name_plural = "–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"
        unique_together = ['activity', 'employee']
        indexes = [
            models.Index(fields=['activity', 'status']),
            models.Index(fields=['employee', 'status']),
        ]
    
    def __str__(self):
        return f"{self.employee.full_name} - {self.activity.title} ({self.get_status_display()})"


class Achievement(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    
    ACHIEVEMENT_TYPES = [
        ('participation', '–£—á–∞—Å—Ç–∏–µ'),
        ('consistency', '–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ'),
        ('social', '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'),
        ('expert', '–≠–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—å'),
        ('special', '–û—Å–æ–±–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ'),
    ]
    
    name = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ", max_length=200)
    description = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ")
    achievement_type = models.CharField("–¢–∏–ø –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", max_length=20, choices=ACHIEVEMENT_TYPES)
    icon = models.CharField("–ò–∫–æ–Ω–∫–∞", max_length=50, default="üèÜ")
    
    # –£—Å–ª–æ–≤–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è
    condition_type = models.CharField(
        "–¢–∏–ø —É—Å–ª–æ–≤–∏—è",
        max_length=20,
        choices=[
            ('count', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–∏–π'),
            ('streak', '–°–µ—Ä–∏—è —É—á–∞—Å—Ç–∏–π'),
            ('variety', '–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π'),
            ('manual', '–†—É—á–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ'),
        ]
    )
    condition_value = models.IntegerField("–ó–Ω–∞—á–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏—è", default=1)
    condition_activity_type = models.CharField(
        "–¢–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —É—Å–ª–æ–≤–∏—è", 
        max_length=20, 
        blank=True, 
        null=True
    )
    
    # –ù–∞–≥—Ä–∞–¥–∞
    points_reward = models.IntegerField("–ù–∞–≥—Ä–∞–¥–∞ –≤ –±–∞–ª–ª–∞—Ö", default=10)
    
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω–æ", default=True)
    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω–æ", auto_now_add=True)
    
    class Meta:
        verbose_name = "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ"
        verbose_name_plural = "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"
        ordering = ['achievement_type', 'name']
    
    def __str__(self):
        return f"{self.icon} {self.name}"


class EmployeeAchievement(models.Model):
    """–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    
    employee = models.ForeignKey(Employee, on_delete=models.CASCADE, related_name='achievements')
    achievement = models.ForeignKey(Achievement, on_delete=models.CASCADE)
    earned_at = models.DateTimeField("–ü–æ–ª—É—á–µ–Ω–æ", auto_now_add=True)
    progress = models.FloatField("–ü—Ä–æ–≥—Ä–µ—Å—Å", default=0.0)
    
    class Meta:
        verbose_name = "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
        verbose_name_plural = "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
        unique_together = ['employee', 'achievement']
        ordering = ['-earned_at']
    
    def __str__(self):
        return f"{self.employee.full_name} - {self.achievement.name}"


class BotAdmin(models.Model):
    """–ú–æ–¥–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞"""
    
    employee = models.OneToOneField(Employee, on_delete=models.CASCADE, related_name='bot_admin')
    is_super_admin = models.BooleanField("–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", default=False)
    can_manage_users = models.BooleanField("–ú–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", default=True)
    can_manage_activities = models.BooleanField("–ú–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏", default=True)
    can_view_reports = models.BooleanField("–ú–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã", default=True)
    
    added_by = models.ForeignKey(
        Employee, 
        on_delete=models.SET_NULL, 
        related_name='added_admins',
        blank=True, 
        null=True
    )
    added_at = models.DateTimeField("–î–æ–±–∞–≤–ª–µ–Ω", auto_now_add=True)
    
    class Meta:
        verbose_name = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞"
        verbose_name_plural = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞"
    
    def __str__(self):
        admin_type = "ü§¥ –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω" if self.is_super_admin else "üë®üíº –ê–¥–º–∏–Ω"
        return f"{admin_type}: {self.employee.full_name}"


# === –°–ò–°–¢–ï–ú–ê –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í ===

class AdminUser(models.Model):
    """–ú–æ–¥–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
    ROLE_CHOICES = [
        ('superadmin', '–°—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'),
        ('admin', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'),
        ('moderator', '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä'),
    ]
    
    user = models.OneToOneField('Employee', on_delete=models.CASCADE, related_name='admin_profile')
    role = models.CharField("–†–æ–ª—å", max_length=20, choices=ROLE_CHOICES, default='moderator')
    permissions = models.JSONField("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞", default=list, blank=True)
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–µ–Ω", default=True)
    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω", auto_now_add=True)
    updated_at = models.DateTimeField("–û–±–Ω–æ–≤–ª–µ–Ω", auto_now=True)

    class Meta:
        db_table = 'admin_users'
        verbose_name = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
        verbose_name_plural = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã'
        ordering = ['-created_at']

    def __str__(self):
        return f"{self.user.full_name} ({self.role})"

    def has_permission(self, permission):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
        if self.role == 'superadmin':
            return True
        return permission in self.permissions

    def get_role_display_with_emoji(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–æ–ª–∏ —Å —ç–º–æ–¥–∑–∏"""
        emoji_map = {
            'superadmin': 'üëë',
            'admin': 'üîß', 
            'moderator': 'üëÅÔ∏è'
        }
        emoji = emoji_map.get(self.role, 'üë§')
        return f"{emoji} {self.get_role_display()}"


class AdminLog(models.Model):
    """–ú–æ–¥–µ–ª—å –ª–æ–≥–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    ACTION_CHOICES = [
        ('login', '–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É'),
        ('command', '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã'),
        ('manage', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–º'),
        ('system', '–°–∏—Å—Ç–µ–º–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'),
        ('error', '–û—à–∏–±–∫–∞'),
    ]
    
    admin = models.ForeignKey(AdminUser, on_delete=models.CASCADE, related_name='logs', verbose_name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
    action = models.CharField("–î–µ–π—Å—Ç–≤–∏–µ", max_length=50, choices=ACTION_CHOICES)
    command = models.CharField("–ö–æ–º–∞–Ω–¥–∞", max_length=100, blank=True)
    target_type = models.CharField("–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞", max_length=50, blank=True)
    target_id = models.IntegerField("ID –æ–±—ä–µ–∫—Ç–∞", null=True, blank=True)
    details = models.JSONField("–î–µ—Ç–∞–ª–∏", default=dict)
    ip_address = models.GenericIPAddressField("IP –∞–¥—Ä–µ—Å", null=True, blank=True)
    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω", auto_now_add=True)

    class Meta:
        db_table = 'admin_logs'
        verbose_name = '–õ–æ–≥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
        verbose_name_plural = '–õ–æ–≥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤'
        ordering = ['-created_at']
        indexes = [
            models.Index(fields=['admin', 'created_at']),
            models.Index(fields=['action', 'created_at']),
            models.Index(fields=['target_type', 'target_id']),
        ]

    def __str__(self):
        return f"{self.admin.user.full_name} - {self.action} - {self.created_at.strftime('%d.%m.%Y %H:%M')}"

    def get_action_display_with_emoji(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å —ç–º–æ–¥–∑–∏"""
        emoji_map = {
            'login': 'üîê',
            'command': '‚å®Ô∏è',
            'manage': '‚öôÔ∏è',
            'system': 'üñ•Ô∏è',
            'error': '‚ùå'
        }
        emoji = emoji_map.get(self.action, 'üìù')
        return f"{emoji} {self.get_action_display()}"


# === –°–∏—Å—Ç–µ–º–∞ "–¢–∞–π–Ω—ã–π –∫–æ—Ñ–µ" ===

class SecretCoffee(models.Model):
    """–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è —Ç–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ"""
    
    week_start = models.DateField("–ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏", help_text="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –Ω–µ–¥–µ–ª–∏, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Å–æ–∑–¥–∞—é—Ç—Å—è –ø–∞—Ä—ã")
    title = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏", max_length=200, blank=True)
    description = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ", blank=True)
    
    # –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏
    STATUS_CHOICES = [
        ('draft', '–ß–µ—Ä–Ω–æ–≤–∏–∫'),
        ('active', '–ê–∫—Ç–∏–≤–Ω–∞—è'),
        ('completed', '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'),
        ('cancelled', '–û—Ç–º–µ–Ω–µ–Ω–∞'),
    ]
    status = models.CharField("–°—Ç–∞—Ç—É—Å", max_length=20, choices=STATUS_CHOICES, default='draft')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä
    max_pairs = models.IntegerField("–ú–∞–∫—Å–∏–º—É–º –ø–∞—Ä", default=50, help_text="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –¥–ª—è —Å–µ—Å—Å–∏–∏")
    algorithm_used = models.CharField(
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º", 
        max_length=50, 
        blank=True,
        help_text="–ê–ª–≥–æ—Ä–∏—Ç–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä"
    )
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
    registration_deadline = models.DateTimeField("–î–µ–¥–ª–∞–π–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", blank=True, null=True)
    meeting_deadline = models.DateField("–î–µ–¥–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á", blank=True, null=True)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_participants = models.IntegerField("–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", default=0)
    successful_pairs = models.IntegerField("–£—Å–ø–µ—à–Ω—ã—Ö –ø–∞—Ä", default=0)
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–ª—è
    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω–æ", auto_now_add=True)
    updated_at = models.DateTimeField("–û–±–Ω–æ–≤–ª–µ–Ω–æ", auto_now=True)
    created_by = models.ForeignKey(
        Employee,
        on_delete=models.SET_NULL,
        verbose_name="–°–æ–∑–¥–∞–Ω–æ",
        blank=True,
        null=True,
        related_name='created_coffee_sessions'
    )
    
    class Meta:
        verbose_name = "–°–µ—Å—Å–∏—è —Ç–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ"
        verbose_name_plural = "–°–µ—Å—Å–∏–∏ —Ç–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ"
        ordering = ['-week_start']
        unique_together = ['week_start']  # –û–¥–Ω–∞ —Å–µ—Å—Å–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é
        indexes = [
            models.Index(fields=['week_start', 'status']),
            models.Index(fields=['status', 'created_at']),
        ]
    
    def __str__(self):
        title = self.title or f"–¢–∞–π–Ω—ã–π –∫–æ—Ñ–µ –Ω–∞ –Ω–µ–¥–µ–ª—é {self.week_start.strftime('%d.%m.%Y')}"
        return f"{title} ({self.get_status_display()})"
    
    def save(self, *args, **kwargs):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"""
        if not self.title:
            self.title = f"–¢–∞–π–Ω—ã–π –∫–æ—Ñ–µ –Ω–∞ –Ω–µ–¥–µ–ª—é {self.week_start.strftime('%d.%m.%Y')}"
        super().save(*args, **kwargs)
    
    def get_pairs_count(self):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä"""
        return self.coffee_pairs.count()
    
    def get_confirmed_pairs_count(self):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä (–æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏)"""
        return self.coffee_pairs.filter(
            confirmed_employee1=True,
            confirmed_employee2=True
        ).count()
    
    def get_participation_rate(self):
        """–ü—Ä–æ—Ü–µ–Ω—Ç —É—á–∞—Å—Ç–∏—è (–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∫ –æ–±—â–µ–º—É —á–∏—Å–ª—É)"""
        total = self.get_pairs_count()
        if total == 0:
            return 0
        confirmed = self.get_confirmed_pairs_count()
        return round((confirmed / total) * 100, 1)


class CoffeePair(models.Model):
    """–ü–∞—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ"""
    
    secret_coffee = models.ForeignKey(
        SecretCoffee, 
        on_delete=models.CASCADE, 
        related_name='coffee_pairs',
        verbose_name="–°–µ—Å—Å–∏—è —Ç–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ"
    )
    employee1 = models.ForeignKey(
        Employee, 
        on_delete=models.CASCADE, 
        related_name='coffee_pairs_as_first',
        verbose_name="–ü–µ—Ä–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫"
    )
    employee2 = models.ForeignKey(
        Employee, 
        on_delete=models.CASCADE, 
        related_name='coffee_pairs_as_second',
        verbose_name="–í—Ç–æ—Ä–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫"
    )
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    confirmed_employee1 = models.BooleanField("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ", default=False)
    confirmed_employee2 = models.BooleanField("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ", default=False)
    
    # –ß–∞—Ç –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è
    chat_created = models.BooleanField("–ß–∞—Ç —Å–æ–∑–¥–∞–Ω", default=False)
    chat_id = models.BigIntegerField("ID —á–∞—Ç–∞", blank=True, null=True)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å—Ç—Ä–µ—á–µ
    meeting_scheduled = models.BooleanField("–í—Å—Ç—Ä–µ—á–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞", default=False)
    meeting_date = models.DateTimeField("–î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏", blank=True, null=True)
    meeting_place = models.CharField("–ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏", max_length=200, blank=True)
    meeting_completed = models.BooleanField("–í—Å—Ç—Ä–µ—á–∞ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å", default=False)
    
    # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    feedback_employee1 = models.TextField("–û—Ç–∑—ã–≤ –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", blank=True)
    feedback_employee2 = models.TextField("–û—Ç–∑—ã–≤ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", blank=True)
    rating_employee1 = models.IntegerField(
        "–û—Ü–µ–Ω–∫–∞ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ", 
        blank=True, 
        null=True,
        validators=[MinValueValidator(1), MaxValueValidator(5)],
        help_text="–û—Ü–µ–Ω–∫–∞ –æ—Ç 1 –¥–æ 5"
    )
    rating_employee2 = models.IntegerField(
        "–û—Ü–µ–Ω–∫–∞ –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ", 
        blank=True, 
        null=True,
        validators=[MinValueValidator(1), MaxValueValidator(5)],
        help_text="–û—Ü–µ–Ω–∫–∞ –æ—Ç 1 –¥–æ 5"
    )
    
    # –ê–ª–≥–æ—Ä–∏—Ç–º matching
    match_score = models.FloatField("–û—Ü–µ–Ω–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏", default=0.0, help_text="–û—Ü–µ–Ω–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –æ—Ç 0 –¥–æ 1")
    match_reason = models.TextField("–ü—Ä–∏—á–∏–Ω–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –ø–∞—Ä—É", blank=True)
    
    # –°—Ç–∞—Ç—É—Å –ø–∞—Ä—ã
    STATUS_CHOICES = [
        ('created', '–°–æ–∑–¥–∞–Ω–∞'),
        ('notified', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã'),
        ('confirmed', '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞'),
        ('meeting_scheduled', '–í—Å—Ç—Ä–µ—á–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞'),
        ('completed', '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'),
        ('declined', '–û—Ç–∫–∞–∑–∞–ª–∏—Å—å'),
        ('expired', '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞'),
    ]
    status = models.CharField("–°—Ç–∞—Ç—É—Å", max_length=20, choices=STATUS_CHOICES, default='created')
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω–æ", auto_now_add=True)
    notified_at = models.DateTimeField("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã", blank=True, null=True)
    confirmed_at = models.DateTimeField("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ", blank=True, null=True)
    completed_at = models.DateTimeField("–ó–∞–≤–µ—Ä—à–µ–Ω–æ", blank=True, null=True)
    
    class Meta:
        verbose_name = "–ü–∞—Ä–∞ –¥–ª—è —Ç–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ"
        verbose_name_plural = "–ü–∞—Ä—ã –¥–ª—è —Ç–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ"
        ordering = ['-created_at']
        unique_together = [
            ['secret_coffee', 'employee1', 'employee2']  # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –ø–∞—Ä–∞ –≤ —Ä–∞–º–∫–∞—Ö —Å–µ—Å—Å–∏–∏
        ]
        indexes = [
            models.Index(fields=['secret_coffee', 'status']),
            models.Index(fields=['employee1', 'status']),
            models.Index(fields=['employee2', 'status']),
            models.Index(fields=['status', 'created_at']),
        ]
    
    def __str__(self):
        return f"{self.employee1.full_name} ‚Üî {self.employee2.full_name} ({self.secret_coffee.week_start})"
    
    def save(self, *args, **kwargs):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Ä–∞–∑–Ω—ã–µ
        if self.employee1_id == self.employee2_id:
            raise ValueError("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø–∞—Ä–µ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
        if self.confirmed_employee1 and self.confirmed_employee2 and self.status == 'notified':
            self.status = 'confirmed'
            self.confirmed_at = models.functions.Now()
        
        super().save(*args, **kwargs)
    
    def is_fully_confirmed(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ª–∏ –æ–±–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        return self.confirmed_employee1 and self.confirmed_employee2
    
    def has_feedback_from_both(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∏ –æ–±–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"""
        return bool(self.feedback_employee1) and bool(self.feedback_employee2)
    
    def get_average_rating(self):
        """–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –æ—Ç –æ–±–æ–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        ratings = [r for r in [self.rating_employee1, self.rating_employee2] if r is not None]
        if not ratings:
            return None
        return sum(ratings) / len(ratings)
    
    def get_other_employee(self, current_employee):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ç–æ—Ä–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –ø–∞—Ä–µ"""
        if current_employee.id == self.employee1_id:
            return self.employee2
        elif current_employee.id == self.employee2_id:
            return self.employee1
        return None
    
    def can_be_confirmed_by(self, employee):
        """–ú–æ–∂–µ—Ç –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –ø–∞—Ä–µ"""
        if employee.id == self.employee1_id:
            return not self.confirmed_employee1
        elif employee.id == self.employee2_id:
            return not self.confirmed_employee2
        return False
    
    def confirm_by_employee(self, employee):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        if employee.id == self.employee1_id and not self.confirmed_employee1:
            self.confirmed_employee1 = True
            self.save()
            return True
        elif employee.id == self.employee2_id and not self.confirmed_employee2:
            self.confirmed_employee2 = True
            self.save()
            return True
        return False