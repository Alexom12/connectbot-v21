"""
Redis –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import json
import logging
from typing import Dict, Any, Optional, List
from django.core.cache import cache
from django.conf import settings

logger = logging.getLogger(__name__)


class MenuCache:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Redis"""
    
    CACHE_PREFIX = 'menu'
    DEFAULT_TIMEOUT = getattr(settings, 'CACHE_TTL', {}).get('user_menu', 1800)  # 30 minutes
    
    @classmethod
    def _get_cache_key(cls, user_id: int, menu_type: str = 'main') -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –∫—ç—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return f"{cls.CACHE_PREFIX}:user:{user_id}:{menu_type}"
    
    @classmethod
    def get_user_menu(cls, user_id: int, menu_type: str = 'main') -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            menu_type: –¢–∏–ø –º–µ–Ω—é (main, preferences, activities)
        
        Returns:
            –î–∞–Ω–Ω—ã–µ –º–µ–Ω—é –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        try:
            cache_key = cls._get_cache_key(user_id, menu_type)
            cached_data = cache.get(cache_key)
            
            if cached_data:
                logger.debug(f"Menu cache hit for user {user_id}, type {menu_type}")
                return json.loads(cached_data) if isinstance(cached_data, str) else cached_data
            
            logger.debug(f"Menu cache miss for user {user_id}, type {menu_type}")
            return None
            
        except Exception as e:
            logger.error(f"Error getting menu from cache for user {user_id}: {e}")
            return None
    
    @classmethod
    def set_user_menu(cls, user_id: int, menu_data: Dict[str, Any], 
                      menu_type: str = 'main', timeout: Optional[int] = None) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            menu_data: –î–∞–Ω–Ω—ã–µ –º–µ–Ω—é –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
            menu_type: –¢–∏–ø –º–µ–Ω—é
            timeout: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        """
        try:
            cache_key = cls._get_cache_key(user_id, menu_type)
            timeout = timeout or cls.DEFAULT_TIMEOUT
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            cache_data = {
                'data': menu_data,
                'user_id': user_id,
                'menu_type': menu_type,
                'cached_at': cache.get('cache_timestamp', 0),
            }
            
            cache.set(cache_key, json.dumps(cache_data), timeout)
            logger.debug(f"Menu cached for user {user_id}, type {menu_type}, timeout {timeout}s")
            return True
            
        except Exception as e:
            logger.error(f"Error caching menu for user {user_id}: {e}")
            return False
    
    @classmethod
    def delete_user_menu(cls, user_id: int, menu_type: str = 'main') -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            menu_type: –¢–∏–ø –º–µ–Ω—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ
        """
        try:
            cache_key = cls._get_cache_key(user_id, menu_type)
            cache.delete(cache_key)
            logger.debug(f"Menu cache cleared for user {user_id}, type {menu_type}")
            return True
            
        except Exception as e:
            logger.error(f"Error deleting menu cache for user {user_id}: {e}")
            return False
    
    @classmethod
    def clear_user_all_menus(cls, user_id: int) -> bool:
        """
        –û—á–∏—â–∞–µ—Ç –≤—Å–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ
        """
        try:
            menu_types = ['main', 'preferences', 'activities', 'admin']
            for menu_type in menu_types:
                cls.delete_user_menu(user_id, menu_type)
            
            logger.info(f"All menu cache cleared for user {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"Error clearing all menus for user {user_id}: {e}")
            return False
    
    @classmethod
    def get_cached_users(cls) -> List[int]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –º–µ–Ω—é
        
        Returns:
            –°–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        try:
            # –≠—Ç–æ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ - –≤ —Ä–µ–∞–ª—å–Ω–æ–º Redis –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SCAN
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            logger.debug("Getting cached users list")
            return []
            
        except Exception as e:
            logger.error(f"Error getting cached users: {e}")
            return []
    
    @classmethod
    def refresh_user_menu(cls, user_id: int, menu_type: str = 'main') -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            menu_type: –¢–∏–ø –º–µ–Ω—é
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
        """
        try:
            menu_data = cls.get_user_menu(user_id, menu_type)
            if menu_data:
                cls.set_user_menu(user_id, menu_data.get('data', {}), menu_type)
                logger.debug(f"Menu cache refreshed for user {user_id}, type {menu_type}")
                return True
            return False
            
        except Exception as e:
            logger.error(f"Error refreshing menu cache for user {user_id}: {e}")
            return False


class MenuBuilder:
    """–°—Ç—Ä–æ–∏—Ç–µ–ª—å –º–µ–Ω—é —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    @classmethod
    def build_main_menu(cls, user_id: int, user_role: str = 'user') -> Dict[str, Any]:
        """
        –°—Ç—Ä–æ–∏—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (user, admin, super_admin)
        
        Returns:
            –î–∞–Ω–Ω—ã–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cached_menu = MenuCache.get_user_menu(user_id, 'main')
        if cached_menu and cached_menu.get('data'):
            return cached_menu['data']
        
        # –°—Ç—Ä–æ–∏–º –º–µ–Ω—é
        menu_data = {
            'type': 'main',
            'user_id': user_id,
            'role': user_role,
            'options': []
        }
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        menu_data['options'].extend([
            {'key': 'profile', 'label': 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'action': 'show_profile'},
            {'key': 'activities', 'label': 'üéØ –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', 'action': 'show_activities'},
            {'key': 'preferences', 'label': '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'action': 'show_preferences'},
        ])
        
        # –û–ø—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        if user_role in ['admin', 'super_admin']:
            menu_data['options'].extend([
                {'key': 'admin_panel', 'label': 'üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'action': 'admin_panel'},
                {'key': 'manage_users', 'label': 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', 'action': 'manage_users'},
            ])
        
        # –ö—ç—à–∏—Ä—É–µ–º –º–µ–Ω—é
        MenuCache.set_user_menu(user_id, menu_data, 'main')
        
        return menu_data
    
    @classmethod
    def build_preferences_menu(cls, user_id: int) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cached_menu = MenuCache.get_user_menu(user_id, 'preferences')
        if cached_menu and cached_menu.get('data'):
            return cached_menu['data']
        
        # –°—Ç—Ä–æ–∏–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        menu_data = {
            'type': 'preferences',
            'user_id': user_id,
            'options': [
                {'key': 'interests', 'label': '‚ù§Ô∏è –ò–Ω—Ç–µ—Ä–µ—Å—ã', 'action': 'edit_interests'},
                {'key': 'notifications', 'label': 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'action': 'edit_notifications'},
                {'key': 'privacy', 'label': 'üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å', 'action': 'edit_privacy'},
                {'key': 'back', 'label': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'action': 'main_menu'},
            ]
        }
        
        # –ö—ç—à–∏—Ä—É–µ–º –º–µ–Ω—é
        MenuCache.set_user_menu(user_id, menu_data, 'preferences')
        
        return menu_data