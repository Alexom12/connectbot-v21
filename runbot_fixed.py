"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
"""
import asyncio
import logging
import ssl
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')

import django
django.setup()

from django.conf import settings
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram.request import HTTPXRequest
from asgiref.sync import sync_to_async
import httpx

from employees.utils import AuthManager, PreferenceManager
from employees.redis_utils import RedisManager
from bots.menu_manager import MenuManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class ConnectBotFixed:
    def __init__(self):
        self.token = settings.TELEGRAM_BOT_TOKEN
        self.application = None
        self.redis_available = RedisManager.is_redis_available()
        
        if self.redis_available:
            logger.info("‚úÖ Redis –¥–æ—Å—Ç—É–ø–µ–Ω, –≤–∫–ª—é—á–µ–Ω–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–π")
        else:
            logger.warning("‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–æ")
    
    def create_custom_request(self):
        """–°–æ–∑–¥–∞–µ—Ç HTTPXRequest —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ SSL –ø—Ä–æ–±–ª–µ–º"""
        # –°–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        ssl_context = ssl.create_default_context()
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º httpx –∫–ª–∏–µ–Ω—Ç
        httpx_client = httpx.AsyncClient(
            timeout=httpx.Timeout(
                connect=30.0,  # 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                read=30.0,     # 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ —á—Ç–µ–Ω–∏–µ
                write=30.0,    # 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–ø–∏—Å—å
                pool=30.0      # 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            ),
            verify=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL
            limits=httpx.Limits(
                max_keepalive_connections=10,
                max_connections=20,
                keepalive_expiry=30
            )
        )
        
        return HTTPXRequest(
            http_version="1.1",
            client=httpx_client
        )
    
    async def get_user_session(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.redis_available:
            return {}
        
        try:
            session_data = RedisManager.get_bot_session(user_id)
            return session_data or {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {}
    
    async def update_user_session(self, user_id: int, session_data: dict):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.redis_available:
            return
        
        try:
            current_session = await self.get_user_session(user_id)
            current_session.update(session_data)
            RedisManager.store_bot_session(user_id, current_session)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    async def clear_user_session(self, user_id: int):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.redis_available:
            return
        
        try:
            RedisManager.clear_bot_session(user_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        user_id = user.id
        username = user.username or user.first_name
        
        logger.info(f"üöÄ –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            auth_manager = AuthManager()
            is_authorized = await sync_to_async(auth_manager.is_user_authorized)(user_id, username)
            
            if not is_authorized:
                logger.warning(f"‚ùå –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {user_id})")
                await update.message.reply_text(
                    f"‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, {username}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
                )
                return
            
            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.clear_user_session(user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            employee_data = await sync_to_async(auth_manager.get_user_data)(user_id)
            
            if employee_data:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
                session_data = {
                    'employee_id': employee_data['id'],
                    'username': employee_data['username'],
                    'role': employee_data['role']
                }
                await self.update_user_session(user_id, session_data)
                
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {employee_data['role']}")
                
                await update.message.reply_text(
                    f"üëã –ü—Ä–∏–≤–µ—Ç, {employee_data['username']}!\n"
                    f"üè¢ –í–∞—à–∞ —Ä–æ–ª—å: {employee_data['role']}\n\n"
                    "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ConnectBot!\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é."
                )
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}", exc_info=True)
            try:
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            except Exception as reply_error:
                logger.error(f"üí• –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {reply_error}")
    
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        try:
            user_id = update.effective_user.id
            session_data = await self.get_user_session(user_id)
            
            if not session_data:
                await update.message.reply_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω—é —á–µ—Ä–µ–∑ MenuManager
            menu_manager = MenuManager()
            menu_data = await sync_to_async(menu_manager.get_main_menu)(
                session_data.get('employee_id'),
                session_data.get('role')
            )
            
            await update.message.reply_text(**menu_data)
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}", exc_info=True)
            try:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except Exception as reply_error:
                logger.error(f"üí• –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –º–µ–Ω—é: {reply_error}")
    
    async def menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
        user = update.effective_user
        logger.info(f"üìã –ö–æ–º–∞–Ω–¥–∞ /menu –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (ID: {user.id})")
        
        try:
            await self.show_main_menu(update, context)
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /menu: {e}", exc_info=True)
    
    async def preferences(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /preferences"""
        user = update.effective_user
        logger.info(f"‚öôÔ∏è –ö–æ–º–∞–Ω–¥–∞ /preferences –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (ID: {user.id})")
        
        try:
            user_id = update.effective_user.id
            session_data = await self.get_user_session(user_id)
            
            if not session_data:
                await update.message.reply_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ PreferenceManager
            preference_manager = PreferenceManager()
            preferences_data = await sync_to_async(preference_manager.get_user_preferences_menu)(
                session_data.get('employee_id')
            )
            
            await update.message.reply_text(**preferences_data)
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /preferences: {e}", exc_info=True)
            try:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except Exception as reply_error:
                logger.error(f"üí• –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {reply_error}")
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        try:
            user_id = update.effective_user.id
            session_data = await self.get_user_session(user_id)
            
            if not session_data:
                await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
                return
            
            callback_data = query.data
            logger.info(f"üîò Callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.username}: {callback_data}")
            
            if callback_data == "refresh_menu":
                menu_manager = MenuManager()
                menu_data = await sync_to_async(menu_manager.get_main_menu)(
                    session_data.get('employee_id'),
                    session_data.get('role')
                )
                await query.edit_message_text(**menu_data)
            
            elif callback_data.startswith("coffee_"):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ñ–µ–π–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
                coffee_type = callback_data.replace("coffee_", "")
                await self.handle_coffee_order(query, coffee_type, session_data)
            
            elif callback_data.startswith("pref_"):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                pref_action = callback_data.replace("pref_", "")
                await self.handle_preference_change(query, pref_action, session_data)
            
            else:
                await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
                
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}", exc_info=True)
            try:
                await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except Exception as edit_error:
                logger.error(f"üí• –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
    
    async def handle_coffee_order(self, query, coffee_type: str, session_data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –∫–æ—Ñ–µ"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ –∫–æ—Ñ–µ
            await query.edit_message_text(
                f"‚òï –ó–∞–∫–∞–∑ –∫–æ—Ñ–µ '{coffee_type}' –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {session_data.get('username')}\n"
                f"üè¢ –†–æ–ª—å: {session_data.get('role')}"
            )
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ –∫–æ—Ñ–µ: {e}")
    
    async def handle_preference_change(self, query, pref_action: str, session_data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
            await query.edit_message_text(
                f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ '{pref_action}' –∏–∑–º–µ–Ω–µ–Ω–∞.\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {session_data.get('username')}"
            )
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        message_text = update.message.text
        
        logger.info(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.username}: {message_text}")
        
        try:
            await update.message.reply_text(
                f"ü§ñ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞."
            )
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}", exc_info=True)
        
        if update and hasattr(update, 'effective_message'):
            try:
                await update.effective_message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∞."
                )
            except Exception as e:
                logger.error(f"üí• –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("menu", self.menu))
        self.application.add_handler(CommandHandler("preferences", self.preferences))
        
        # Callback –∑–∞–ø—Ä–æ—Å—ã
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
        
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ ConnectBot —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–µ—Ç–∏...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º request –æ–±—ä–µ–∫—Ç–æ–º
            custom_request = self.create_custom_request()
            
            self.application = Application.builder().token(self.token).request(custom_request).build()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.setup_handlers()
            
            logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º polling...")
            logger.info(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω: {self.token[:10]}...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            self.application.run_polling(
                poll_interval=2.0,  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ 2 —Å–µ–∫—É–Ω–¥—ã
                timeout=30,         # –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
                read_timeout=30,    # –¢–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è 30 —Å–µ–∫—É–Ω–¥
                write_timeout=30,   # –¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Å–∏ 30 —Å–µ–∫—É–Ω–¥
                connect_timeout=30, # –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 30 —Å–µ–∫—É–Ω–¥
                allowed_updates=Update.ALL_TYPES
            )
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
            raise


if __name__ == '__main__':
    bot = ConnectBotFixed()
    bot.run()