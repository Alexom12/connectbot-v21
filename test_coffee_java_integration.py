#!/usr/bin/env python3
"""
üß™ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã "–¢–∞–π–Ω—ã–π –∫–æ—Ñ–µ" —Å Java –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–º
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä —á–µ—Ä–µ–∑ Java API –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Django –º–æ–¥–µ–ª–∏
"""

import os
import sys
import json
import django
import requests
from datetime import datetime, date, timedelta
from django.utils import timezone

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django –æ–∫—Ä—É–∂–µ–Ω–∏—è
def setup_django():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Django –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
    project_root = os.path.dirname(os.path.abspath(__file__))
    sys.path.insert(0, project_root)
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
    django.setup()

setup_django()

from employees.models import Employee, SecretCoffee, CoffeePair


class SecretCoffeeJavaIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ç–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ —Å Java –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–º"""
    
    def __init__(self):
        self.java_service_url = "http://localhost:8080"
        self.employees = []
        self.coffee_session = None
    
    def print_header(self):
        """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        print("üöÄ" + "="*60 + "üöÄ")
        print("‚òï –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –¢–ê–ô–ù–û–ì–û –ö–û–§–ï –° JAVA –ú–ò–ö–†–û–°–ï–†–í–ò–°–û–ú ‚òï")
        print("üöÄ" + "="*60 + "üöÄ")
        print(f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üåê Java Service: {self.java_service_url}")
        print()
    
    def check_java_service(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Java –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞"""
        print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ Java –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞...")
        try:
            health_url = f"{self.java_service_url}/api/matching/health"
            response = requests.get(health_url, timeout=5)
            
            if response.status_code in [200, 503]:  # UP –∏–ª–∏ DEGRADED
                health_data = response.json()
                print(f"‚úÖ Java —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω")
                print(f"   –°–µ—Ä–≤–∏—Å: {health_data.get('service')}")
                print(f"   –í–µ—Ä—Å–∏—è: {health_data.get('version')}")
                print(f"   –°—Ç–∞—Ç—É—Å: {health_data.get('overall_status', health_data.get('status'))}")
                return True
            else:
                print(f"‚ùå Java —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: HTTP {response.status_code}")
                return False
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Java —Å–µ—Ä–≤–∏—Å—É: {e}")
            return False
        
        print()
    
    def get_employees_for_coffee(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ"""
        print("üë• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        self.employees = list(Employee.objects.filter(
            is_active=True,
            authorized=True
        ))
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(self.employees)}")
        
        for emp in self.employees:
            print(f"   üë§ {emp.full_name} ({emp.position or '–ë–µ–∑ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏'})")
        
        print()
        return len(self.employees) >= 2  # –ú–∏–Ω–∏–º—É–º 2 –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—ã
    
    def create_coffee_session(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é —Ç–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ"""
        print("‚òï –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Ç–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ...")
        
        # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
        today = date.today()
        week_start = today - timedelta(days=today.weekday())
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        SecretCoffee.objects.filter(week_start=week_start).delete()
        
        self.coffee_session = SecretCoffee.objects.create(
            week_start=week_start,
            title=f'Java-–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∞–π–Ω—ã–π –∫–æ—Ñ–µ {week_start.strftime("%d.%m.%Y")}',
            description='–ü–∞—Ä—ã —Å–æ–∑–¥–∞–Ω—ã —á–µ—Ä–µ–∑ Java –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å matching',
            status='active',
            algorithm_used='java_microservice',
            registration_deadline=timezone.now() + timedelta(days=2),
            meeting_deadline=week_start + timedelta(days=5),
            total_participants=len(self.employees)
        )
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è: {self.coffee_session.title}")
        print(f"   üìÖ –ù–µ–¥–µ–ª—è: {self.coffee_session.week_start}")
        print(f"   ü§ñ –ê–ª–≥–æ—Ä–∏—Ç–º: {self.coffee_session.algorithm_used}")
        print()
    
    def create_pairs_via_java(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞—Ä—ã —á–µ—Ä–µ–∑ Java –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å"""
        print("ü§ù –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä —á–µ—Ä–µ–∑ Java –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å...")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Java API
        java_employees = []
        for emp in self.employees:
            java_emp = {
                'id': emp.id,
                'full_name': emp.full_name,
                'position': emp.position or '',
                'department': getattr(emp.department, 'name', '') if emp.department else '',
                'is_active': emp.is_active
            }
            java_employees.append(java_emp)
        
        print(f"   üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(java_employees)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ Java API...")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º matching
            matching_url = f"{self.java_service_url}/api/matching/coffee/simple"
            
            response = requests.post(
                matching_url,
                json=java_employees,
                headers={'Content-Type': 'application/json'},
                timeout=15
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"   ‚úÖ Java API –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ!")
                print(f"   üìä –°—Ç–∞—Ç—É—Å: {result.get('successful', False)}")
                print(f"   üé≤ –ê–ª–≥–æ—Ä–∏—Ç–º: {result.get('algorithm', 'unknown')}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                pairs_data = result.get('pairs', [])
                unmatched_data = result.get('unmatched', [])
                
                print(f"   üíë –°–æ–∑–¥–∞–Ω–æ –ø–∞—Ä: {len(pairs_data)}")
                print(f"   üòû –ë–µ–∑ –ø–∞—Ä—ã: {len(unmatched_data)}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—ã –≤ Django –º–æ–¥–µ–ª–∏
                self.save_java_pairs_to_django(pairs_data)
                
                return True
            else:
                print(f"   ‚ùå Java API –æ—à–∏–±–∫–∞: HTTP {response.status_code}")
                print(f"   üìÑ –û—Ç–≤–µ—Ç: {response.text[:200]}")
                return False
                
        except requests.exceptions.RequestException as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Java API: {e}")
            return False
    
    def save_java_pairs_to_django(self, pairs_data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞—Ä—ã –∏–∑ Java API –≤ Django –º–æ–¥–µ–ª–∏"""
        print("   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä –≤ Django...")
        
        saved_pairs = 0
        for pair_data in pairs_data:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
                emp1_data = pair_data.get('employee1', {})
                emp2_data = pair_data.get('employee2', {})
                
                emp1_id = emp1_data.get('id')
                emp2_id = emp2_data.get('id')
                
                if not emp1_id or not emp2_id:
                    print(f"      ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—É - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã
                try:
                    employee1 = Employee.objects.get(id=emp1_id)
                    employee2 = Employee.objects.get(id=emp2_id)
                except Employee.DoesNotExist as e:
                    print(f"      ‚ö†Ô∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—É
                coffee_pair = CoffeePair.objects.create(
                    secret_coffee=self.coffee_session,
                    employee1=employee1,
                    employee2=employee2,
                    match_score=pair_data.get('match_score', 1.0),
                    match_reason=f"Java –∞–ª–≥–æ—Ä–∏—Ç–º: {self.coffee_session.algorithm_used}",
                    status='created'
                )
                
                saved_pairs += 1
                print(f"      ‚úÖ –ü–∞—Ä–∞ {saved_pairs}: {employee1.full_name} ‚Üî {employee2.full_name}")
                print(f"         üéØ Score: {coffee_pair.match_score}")
                
            except Exception as e:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—ã: {e}")
        
        print(f"   üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–∞—Ä –≤ Django: {saved_pairs}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
        self.coffee_session.successful_pairs = saved_pairs
        self.coffee_session.save()
        
        print()
    
    def demonstrate_django_models(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å Django –º–æ–¥–µ–ª—è–º–∏"""
        print("üß™ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Django –º–æ–¥–µ–ª–µ–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
        total_pairs = self.coffee_session.get_pairs_count()
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:")
        print(f"   üÜî ID —Å–µ—Å—Å–∏–∏: {self.coffee_session.id}")
        print(f"   üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {self.coffee_session.title}")
        print(f"   üìÖ –ù–µ–¥–µ–ª—è: {self.coffee_session.week_start}")
        print(f"   ü§ñ –ê–ª–≥–æ—Ä–∏—Ç–º: {self.coffee_session.algorithm_used}")
        print(f"   üíë –ü–∞—Ä —Å–æ–∑–¥–∞–Ω–æ: {total_pairs}")
        print()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å –ø–∞—Ä–∞–º–∏
        if total_pairs > 0:
            print("üíë –°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã:")
            pairs = self.coffee_session.coffee_pairs.all()
            
            for i, pair in enumerate(pairs, 1):
                print(f"   {i}. {pair}")
                print(f"      üÜî ID: {pair.id}")
                print(f"      üéØ Score: {pair.match_score}")
                print(f"      üìä –°—Ç–∞—Ç—É—Å: {pair.get_status_display()}")
                print(f"      üí≠ –ü—Ä–∏—á–∏–Ω–∞: {pair.match_reason}")
                
                # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –º–æ–¥–µ–ª–∏
                print(f"      üîÑ –ú–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å {pair.employee1.full_name}: {pair.can_be_confirmed_by(pair.employee1)}")
                print(f"      üîÑ –ú–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å {pair.employee2.full_name}: {pair.can_be_confirmed_by(pair.employee2)}")
        
        print()
    
    def test_model_methods(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–µ—Ç–æ–¥—ã –º–æ–¥–µ–ª–µ–π"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –º–æ–¥–µ–ª–µ–π...")
        
        pairs = self.coffee_session.coffee_pairs.all()
        if pairs.exists():
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            test_pair = pairs.first()
            
            print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—É: {test_pair}")
            print()
            
            # –¢–µ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            print("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞...")
            success = test_pair.confirm_by_employee(test_pair.employee1)
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success else '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å'}")
            print(f"   –°—Ç–∞—Ç—É—Å –ø–∞—Ä—ã: {test_pair.get_status_display()}")
            
            # –¢–µ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞  
            print("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞...")
            success = test_pair.confirm_by_employee(test_pair.employee2)
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success else '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å'}")
            print(f"   –°—Ç–∞—Ç—É—Å –ø–∞—Ä—ã: {test_pair.get_status_display()}")
            print(f"   –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {'‚úÖ –î–∞' if test_pair.is_fully_confirmed() else '‚ùå –ù–µ—Ç'}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
            print(f"\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:")
            print(f"   üíë –í—Å–µ–≥–æ –ø–∞—Ä: {self.coffee_session.get_pairs_count()}")
            print(f"   ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö: {self.coffee_session.get_confirmed_pairs_count()}")
            print(f"   üìà –£—á–∞—Å—Ç–∏–µ: {self.coffee_session.get_participation_rate()}%")
        
        print()
    
    def run_integration_demo(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        self.print_header()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Java —Å–µ—Ä–≤–∏—Å
        java_available = self.check_java_service()
        
        if not java_available:
            print("‚ùå Java –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é.")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        if not self.get_employees_for_coffee():
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä.")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        self.create_coffee_session()
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã —á–µ—Ä–µ–∑ Java
        if self.create_pairs_via_java():
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º Django –º–æ–¥–µ–ª–∏
            self.demonstrate_django_models()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –º–æ–¥–µ–ª–µ–π
            self.test_model_methods()
            
            print("üéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—ã —á–µ—Ä–µ–∑ Java –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å")
        
        print("üöÄ" + "="*60 + "üöÄ")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        integration = SecretCoffeeJavaIntegration()
        integration.run_integration_demo()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()