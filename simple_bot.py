"""
–ü—Ä–æ—Å—Ç–µ–π—à–∏–π Telegram –±–æ—Ç –Ω–∞ requests –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º —Å python-telegram-bot
"""
import os
import sys
import time
import requests
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(str(Path(__file__).parent))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')

import django
django.setup()

from django.conf import settings
from employees.utils import AuthManager

class SimpleTelegramBot:
    def __init__(self):
        self.token = settings.TELEGRAM_BOT_TOKEN
        self.base_url = f"https://api.telegram.org/bot{self.token}/"
        self.offset = 0
        self.session = requests.Session()
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è requests
        self.session.timeout = 30
        
    def get_me(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
        try:
            response = self.session.get(self.base_url + "getMe", timeout=10)
            if response.status_code == 200:
                data = response.json()
                if data['ok']:
                    return data['result']
            return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ get_me: {e}")
            return None
    
    def get_updates(self):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∞–π–º–∞—É—Ç–æ–≤"""
        try:
            params = {
                'offset': self.offset,
                'timeout': 5,  # –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç
                'limit': 10
            }
            
            response = self.session.get(
                self.base_url + "getUpdates", 
                params=params, 
                timeout=10  # –ö–æ—Ä–æ—Ç–∫–∏–π –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç
            )
            
            if response.status_code == 200:
                data = response.json()
                if data['ok']:
                    return data['result']
            return []
            
        except Exception as e:
            # –ù–µ –ø–µ—á–∞—Ç–∞–µ–º –æ—à–∏–±–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞, –æ–Ω–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã
            if "timed out" not in str(e).lower():
                print(f"–û—à–∏–±–∫–∞ get_updates: {e}")
            return []
    
    def send_message(self, chat_id, text):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        max_retries = 3
        for attempt in range(max_retries):
            try:
                params = {
                    'chat_id': chat_id,
                    'text': text
                }
                
                response = self.session.post(
                    self.base_url + "sendMessage", 
                    data=params, 
                    timeout=30  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
                )
                
                if response.status_code == 200:
                    data = response.json()
                    if data['ok']:
                        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                        return True
                
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text[:100]}")
                return False
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
                if attempt < max_retries - 1:
                    time.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    
        return False
    
    def process_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        chat_id = message['chat']['id']
        user = message.get('from', {})
        text = message.get('text', '')
        
        user_id = user.get('id')
        username = user.get('username') or user.get('first_name') or str(user_id)
        
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username} (ID: {user_id}): {text}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if text == '/start':
            return self.handle_start(chat_id, user_id, username)
        elif text == '/status':
            return self.handle_status(chat_id)
        elif text == '/help':
            return self.handle_help(chat_id)
        else:
            return self.handle_text(chat_id, text)
    
    def handle_start(self, chat_id, user_id, username):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –æ–∂–∏–¥–∞–µ–º–æ–º AuthManager
            class TelegramUser:
                def __init__(self, user_id, username, first_name):
                    self.id = user_id
                    self.username = username  
                    self.first_name = first_name
            
            telegram_user = TelegramUser(user_id, username, username)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ authorize_employee –∏–∑ AuthManager
            from asgiref.sync import sync_to_async
            import asyncio
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                employee, is_new = loop.run_until_complete(
                    AuthManager.authorize_employee(telegram_user)
                )
            finally:
                loop.close()
            
            if employee:
                text = (
                    f"‚úÖ –ü—Ä–∏–≤–µ—Ç, {employee.full_name}!\\n"
                    f"üè¢ –ü–æ–∑–∏—Ü–∏—è: {employee.position}\\n"
                    f"üè¨ –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: {employee.department}\\n"
                    f"üìß Email: {employee.email}\\n\\n"
                    f"ü§ñ ConnectBot —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ requests!\\n"
                    f"–ö–æ–º–∞–Ω–¥—ã: /status /help"
                )
                if is_new:
                    text += "\\n\\nüéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã."
            else:
                text = f"‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è {username}\\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                    
            return self.send_message(chat_id, text)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ handle_start: {e}")
            return self.send_message(chat_id, "‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
    
    def handle_status(self, chat_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status"""
        try:
            from employees.models import Employee
            
            user_count = Employee.objects.filter(is_active=True).count()
            
            text = (
                f"üìä –°—Ç–∞—Ç—É—Å ConnectBot\\n\\n"
                f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\\n"
                f"‚è∞ –í—Ä–µ–º—è: {time.strftime('%H:%M:%S')}\\n"
                f"‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ requests"
            )
            
            return self.send_message(chat_id, text)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ handle_status: {e}")
            return self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
    
    def handle_help(self, chat_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        text = (
            f"üÜò –ü–æ–º–æ—â—å ConnectBot\\n\\n"
            f"/start - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\\n"
            f"/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\\n"
            f"/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\\n\\n"
            f"–ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞."
        )
        return self.send_message(chat_id, text)
    
    def handle_text(self, chat_id, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        response = f"üìù –ü–æ–ª—É—á–µ–Ω–æ: {text}\\n\\n–ö–æ–º–∞–Ω–¥—ã: /start /status /help"
        return self.send_message(chat_id, response)
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ ConnectBot –Ω–∞ requests...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
        me = self.get_me()
        if not me:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–æ—Ç—É")
            return
        
        print(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{me['username']} ({me['first_name']})")
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        
        error_count = 0
        max_errors = 10
        
        while True:
            try:
                updates = self.get_updates()
                
                if updates:
                    error_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                    
                    for update in updates:
                        update_id = update['update_id']
                        self.offset = update_id + 1
                        
                        if 'message' in update:
                            self.process_message(update['message'])
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
                    time.sleep(1)
                
            except KeyboardInterrupt:
                print("\\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
                break
            except Exception as e:
                error_count += 1
                print(f"‚ùå –û—à–∏–±–∫–∞ #{error_count}: {e}")
                
                if error_count >= max_errors:
                    print(f"üí• –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ ({max_errors}), –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è...")
                    break
                
                # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                time.sleep(min(5, error_count))
        
        print("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    bot = SimpleTelegramBot()
    bot.run()