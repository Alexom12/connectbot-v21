from bots.menu_manager import MenuManager
from bots.utils.retry_utils import async_retry_decorator
from bots.services.notification_service import notification_service
from bots.services.context_service import context_service
from telegram.error import NetworkError, TimedOut
import logging

logger = logging.getLogger(__name__)


@async_retry_decorator(attempts=3, min_wait=1, max_wait=8, retry_exceptions=(NetworkError, TimedOut))
async def _send_with_keyboard(target, text, keyboard, parse_mode=None):
    return await target.reply_text(text, reply_markup=keyboard, parse_mode=parse_mode)


@async_retry_decorator(attempts=2, min_wait=0.5, max_wait=4, retry_exceptions=(NetworkError, TimedOut))
async def _send_without_keyboard(target, text, parse_mode=None):
    return await target.reply_text(text, parse_mode=parse_mode)


async def reply_with_menu(update, text, menu_type='main', parse_mode=None, user_id=None, context_data=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –º–µ–Ω—é –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    try:
        # –ï—Å–ª–∏ user_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ update
        if user_id is None:
            user_id = getattr(update.effective_user, 'id', None)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–º–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
        user_context = None
        if user_id:
            user_context = await context_service.get_user_context(user_id)
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Å–ª–æ–≤–∞—Ä—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å AttributeError
            if not isinstance(user_context, dict):
                user_context = {}

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∫ —Ç–µ–∫—Å—Ç—É
            if context_data is None or not isinstance(context_data, dict):
                context_data = {}

            # –î–æ–±–∞–≤–ª—è–µ–º —É–º–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if user_context.get('smart_tips'):
                tips_to_show = user_context['smart_tips'][:2]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 2 –ø–æ–¥—Å–∫–∞–∑–æ–∫
                if tips_to_show:
                    text += "\n\nüí° " + "\nüí° ".join(tips_to_show)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        reply_markup = await MenuManager.get_reply_keyboard_for_menu(menu_type, user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        reply_markup = await MenuManager.create_main_reply_keyboard(user_id)

    target = getattr(update, 'message', None) or getattr(update, 'effective_message', None)
    if not target:
        return

    try:
        return await _send_with_keyboard(target, text, reply_markup, parse_mode=parse_mode)
    except Exception:
        # Fallback: try sending without keyboard
        try:
            return await _send_without_keyboard(target, text, parse_mode=parse_mode)
        except Exception:
            return


async def reply_with_footer(update, text, parse_mode=None):
    """Reply to a message with a footer menu attached.

    Use tenacity-based retries for transient network errors. If sending with footer
    fails, fallback to sending without footer.
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–º–µ—Å—Ç–æ Inline –∫–Ω–æ–ø–æ–∫
        user_id = getattr(update.effective_user, 'id', None)
        reply_markup = await MenuManager.create_main_reply_keyboard(user_id)
    except Exception:
        reply_markup = None

    target = getattr(update, 'message', None) or getattr(update, 'effective_message', None)
    if not target:
        return

    if reply_markup:
        try:
            return await _send_with_keyboard(target, text, reply_markup, parse_mode=parse_mode)
        except Exception:
            # Fallback: try sending without keyboard
            try:
                return await _send_without_keyboard(target, text, parse_mode=parse_mode)
            except Exception:
                return
    else:
        try:
            return await _send_without_keyboard(target, text, parse_mode=parse_mode)
        except Exception:
            return


async def reply_with_smart_notifications(update, text, menu_type='main', parse_mode=None, context_data=None, user_id=None):
    """–£–º–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏

    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π user_id ‚Äî –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑–æ–≤—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∏–∑ threaded contexts
    –∏ –ø–µ—Ä–µ–¥–∞—é—Ç user_id —è–≤–Ω–æ.
    """
    try:
        if user_id is None:
            user_id = getattr(update.effective_user, 'id', None)
    except Exception:
        user_id = None
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_context = None
    if user_id:
        try:
            user_context = await context_service.get_user_context(user_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            user_context = {}

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ context_data, —á—Ç–æ–±—ã –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è –≤—ã–∑—ã–≤–∞—Ç—å .get —É None –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤
        if not isinstance(user_context, dict):
            user_context = {}
        if context_data is None or not isinstance(context_data, dict):
            context_data = {}

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        if context_data.get('has_pending_actions'):
            text += f"\n\nüí° –£ –≤–∞—Å –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ–Ω—é."
        if context_data.get('new_achievements'):
            text += f"\n\nüèÜ –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {context_data['new_achievements']}"

        # –î–æ–±–∞–≤–ª—è–µ–º —É–º–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if user_context.get('smart_tips'):
            tips_to_show = user_context['smart_tips'][:2]
            if tips_to_show:
                text += "\n\nüåü " + "\nüåü ".join(tips_to_show)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if user_context.get('priority_level') == 'urgent':
            text = f"üö® –°–†–û–ß–ù–û! {text}"
        elif user_context.get('priority_level') == 'high':
            text = f"üîî –í–ê–ñ–ù–û! {text}"
    
    try:
        return await reply_with_menu(update, text, menu_type, parse_mode, user_id, context_data)
    except TypeError:
        # backward-compat: older reply_with_menu signatures might differ
        return await reply_with_menu(update, text, menu_type, parse_mode, context_data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        # fallback to simple reply
        try:
            return await reply_with_menu(update, text, menu_type, parse_mode)
        except Exception:
            return None


async def notify_about_pending_actions(update, pending_data=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ–∂–∏–¥–∞—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
    user_id = getattr(update.effective_user, 'id', None)
    
    if pending_data is None:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
        from bots.menu_manager import MenuManager
        counts = await MenuManager.get_notification_counts(user_id)
        pending_data = counts
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    user_context = await context_service.get_user_context(user_id) if user_id else None
    
    if pending_data.get('total', 0) > 0:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        recommendations = ""
        if user_context and user_context.get('quick_actions'):
            quick_actions = user_context['quick_actions'][:2]
            if quick_actions:
                recommendations = f"\n\nüéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º: {', '.join(quick_actions)}"
        
        notification_text = f"""
üîî *–£ –≤–∞—Å –æ–∂–∏–¥–∞—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è!*

‚Ä¢ ü§ù –í—Å—Ç—Ä–µ—á: {pending_data.get('meetings', 0)}
‚Ä¢ üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π —Å–µ–≥–æ–¥–Ω—è: {pending_data.get('today_activities', 0)}
‚Ä¢ üö® –°—Ä–æ—á–Ω—ã—Ö: {pending_data.get('urgent_actions', 0)}
‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {pending_data.get('notifications', 0)}
{recommendations}

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–∑–¥–µ–ª—ã –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
"""
        return await reply_with_smart_notifications(update, notification_text, 'main', 'Markdown', user_id)
    
    return None


async def send_urgent_notification(update, title, message, urgency='normal'):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º"""
    user_id = getattr(update.effective_user, 'id', None)
    
    urgency_icons = {
        'low': '‚ÑπÔ∏è',
        'normal': 'üîî', 
        'high': '‚ö†Ô∏è',
        'urgent': 'üö®'
    }
    
    icon = urgency_icons.get(urgency, 'üîî')
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    user_context = await context_service.get_user_context(user_id) if user_id else None
    context_tip = ""
    
    if user_context and user_context.get('smart_tips'):
        relevant_tips = [tip for tip in user_context['smart_tips'] if any(word in tip.lower() for word in ['—Å—Ä–æ—á–Ω', '–¥–µ–π—Å—Ç–≤', '–ø–æ–¥—Ç–≤–µ—Ä–¥'])]
        if relevant_tips:
            context_tip = f"\n\nüí° {relevant_tips[0]}"
    
    notification_text = f"""
{icon} *{title}*

{message}
{context_tip}

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.
"""
    
    return await reply_with_smart_notifications(update, notification_text, 'main', 'Markdown', user_id)


async def send_contextual_welcome(update, additional_message=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    user_id = getattr(update.effective_user, 'id', None)
    
    if not user_id:
        # Fallback –¥–ª—è —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ user_id –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        welcome_text = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ConnectBot!

ü§ñ –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π.

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
"""
        return await reply_with_menu(update, welcome_text, 'main')
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    contextual_welcome = await context_service.get_contextual_welcome(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    user_context = await context_service.get_user_context(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_parts = [f"üëã {contextual_welcome}"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if additional_message:
        welcome_parts.append(f"\n{additional_message}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±—ã—Å—Ç—Ä—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º
    if user_context.get('quick_actions'):
        quick_actions = user_context['quick_actions'][:3]
        if quick_actions:
            welcome_parts.append(f"\nüéØ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: {', '.join(quick_actions)}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if user_context.get('activity_profile', {}).get('experience_level') in ['new', 'beginner']:
        welcome_parts.append("\nüí° –°–æ–≤–µ—Ç: –ù–∞—á–Ω–∏—Ç–µ —Å —Ä–∞–∑–¥–µ–ª–∞ 'üéØ –ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã' —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è!")
    
    welcome_text = "\n".join(welcome_parts)
    
    return await reply_with_smart_notifications(update, welcome_text, 'main', None, user_id)


async def send_adaptive_suggestions(update, current_action=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = getattr(update.effective_user, 'id', None)
    
    if not user_id:
        return None
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    suggestions = await context_service.get_adaptive_menu_suggestions(user_id)
    
    if not suggestions.get('recommended_actions'):
        return None
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
    suggestion_text = "üí° *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    if suggestions['recommended_actions']:
        suggestion_text += "üéØ *–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å:*\n"
        for action in suggestions['recommended_actions'][:3]:
            suggestion_text += f"‚Ä¢ {action}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    if suggestions['educational_tips']:
        suggestion_text += "\nüåü *–°–æ–≤–µ—Ç—ã:*\n"
        for tip in suggestions['educational_tips'][:2]:
            suggestion_text += f"‚Ä¢ {tip}\n"
    
    # –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–¥–µ–ª
    if suggestions['highlight_section']:
        section_names = {
            'profile': 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å',
            'interests': 'üéØ –ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã', 
            'calendar': 'üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å',
            'coffee': '‚òï –¢–∞–π–Ω—ã–π –∫–æ—Ñ–µ'
        }
        highlighted = section_names.get(suggestions['highlight_section'])
        if highlighted:
            suggestion_text += f"\nüìå *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º:* {highlighted}"
    
    return await reply_with_smart_notifications(update, suggestion_text, 'main', 'Markdown', user_id)


async def log_user_interaction(update, action_type, menu_item, success=True):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    user_id = getattr(update.effective_user, 'id', None)
    
    if user_id:
        await context_service.log_user_interaction(user_id, action_type, menu_item, success)
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –∑–Ω–∞—á–∏–º—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö
        if action_type in ['completed_task', 'confirmed_meeting', 'joined_activity']:
            await notification_service.clear_notification_cache(user_id)
            logger.info(f"–ö—ç—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—á–∏—â–µ–Ω –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {action_type}")


async def send_educational_tip(update, tip_type=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    user_id = getattr(update.effective_user, 'id', None)
    
    if not user_id:
        return None
    
    user_context = await context_service.get_user_context(user_id)
    experience_level = user_context.get('activity_profile', {}).get('experience_level', 'beginner')
    
    # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –æ–ø—ã—Ç–∞
    tips_by_level = {
        'new': [
            "üí° –ß–∏—Å–ª–∞ –≤ —Å–∫–æ–±–∫–∞—Ö –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π",
            "üéØ –ù–∞—á–Ω–∏—Ç–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ 'üéØ –ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã'",
            "ü§ù –¢–∞–π–Ω—ã–π –∫–æ—Ñ–µ - –æ—Ç–ª–∏—á–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–æ–ª–ª–µ–≥–∞–º–∏!"
        ],
        'beginner': [
            "üåü –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–∞–∑–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π",
            "üìÖ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ–±—ã—Ç–∏—è",
            "üîî –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /refresh –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
        ],
        'intermediate': [
            "üèÜ –°—Ç—Ä–µ–º–∏—Ç–µ—Å—å –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è",
            "üí¨ –ê–∫—Ç–∏–≤–Ω–æ –æ–±—â–∞–π—Ç–µ—Å—å —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏ –≤ –¢–∞–π–Ω–æ–º –∫–æ—Ñ–µ",
            "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —É—á–∞—Å—Ç–∏—è"
        ],
        'advanced': [
            "üöÄ –í—ã - —ç–∫—Å–ø–µ—Ä—Ç! –ü–æ–º–æ–≥–∞–π—Ç–µ –Ω–æ–≤–∏—á–∫–∞–º –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ",
            "üé™ –ü—Ä–æ–±—É–π—Ç–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—Å—Ç—Ä–µ—á –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π",
            "üí´ –î–µ–ª–∏—Ç–µ—Å—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –±–æ—Ç–∞"
        ],
        'expert': [
            "üëë –í—ã - –º–∞—Å—Ç–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å –∫–æ–ª–ª–µ–≥!",
            "üåü –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–æ–º –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤",
            "üí° –ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –∏–¥–µ–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞"
        ]
    }
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
    tips = tips_by_level.get(experience_level, tips_by_level['beginner'])
    
    if tip_type == 'random':
        import random
        tip = random.choice(tips)
    else:
        tip = tips[0]
    
    tip_text = f"""
üéì *–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –º–∏–Ω—É—Ç–∫–∞*

{tip}

üí° –£—Ä–æ–≤–µ–Ω—å: {experience_level.title()}
"""
    
    return await reply_with_smart_notifications(update, tip_text, 'main', 'Markdown', user_id)


async def handle_quick_action(update, action_type, context_data=None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    user_id = getattr(update.effective_user, 'id', None)
    
    if not user_id:
        return await reply_with_menu(update, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 'main')
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await log_user_interaction(update, 'quick_action', action_type, True)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    action_handlers = {
        'confirm_urgent': lambda: _handle_confirm_urgent(update, user_id),
        'plan_week': lambda: _handle_plan_week(update, user_id),
        'review_stats': lambda: _handle_review_stats(update, user_id),
        'setup_interests': lambda: _handle_setup_interests(update, user_id)
    }
    
    handler = action_handlers.get(action_type)
    if handler:
        return await handler()
    
    # Fallback
    return await reply_with_menu(update, "‚úÖ –ë—ã—Å—Ç—Ä–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!", 'main')


async def _handle_confirm_urgent(update, user_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Ä–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    counts = await notification_service.get_user_notification_counts(user_id)
    
    if counts['urgent_actions'] > 0:
        text = f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ {counts['urgent_actions']} —Å—Ä–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π!"
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    else:
        text = "üéâ –°—Ä–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ—Ç!"
    
    return await reply_with_smart_notifications(update, text, 'main', None, user_id)


async def _handle_plan_week(update, user_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–µ–ª–∏"""
    text = """
üìã *–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–µ–ª–∏*

–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é:
‚Ä¢ üóìÔ∏è –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ —É—á–∞—Å—Ç–∏–µ –≤ 2-3 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö
‚Ä¢ ü§ù –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –¢–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ
‚Ä¢ üéØ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –æ–±–Ω–æ–≤–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–∑–¥–µ–ª—ã –º–µ–Ω—é!
"""
    return await reply_with_smart_notifications(update, text, 'main', 'Markdown', user_id)


async def _handle_review_stats(update, user_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    user_context = await context_service.get_user_context(user_id)
    activity_profile = user_context.get('activity_profile', {})
    
    text = f"""
üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activity_profile.get('activity_label', '–ù–æ–≤–∏—á–æ–∫')}
‚Ä¢ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: {activity_profile.get('total_activities', 0)}
‚Ä¢ –£—á–∞—Å—Ç–∏–π –≤ –≤—Å—Ç—Ä–µ—á–∞—Ö: {activity_profile.get('total_meetings', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –º–µ—Å—è—Ü: {activity_profile.get('recent_activities', 0)}

üéØ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –¥–ª—è —Ä–æ—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!
"""
    return await reply_with_smart_notifications(update, text, 'profile', 'Markdown', user_id)


async def _handle_setup_interests(update, user_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    from employees.models import Employee
    try:
        employee = await Employee.objects.aget(telegram_id=user_id)
        interests_text = await MenuManager.create_interests_menu(employee)
        return await reply_with_smart_notifications(update, interests_text, 'interests', 'Markdown', user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {e}")
        return await reply_with_menu(update, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤", 'main')