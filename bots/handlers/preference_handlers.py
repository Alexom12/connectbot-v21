import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler, CommandHandler
from activities.services.preference_service import preference_service
from employees.models import Employee

logger = logging.getLogger(__name__)

async def show_preferences_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    
    try:
        employee = await Employee.objects.aget(telegram_id=user_id)
        preferences = await preference_service.get_or_create_preferences(employee)
        
        keyboard = [
            [InlineKeyboardButton("üïê –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å", callback_data="pref_availability")],
            [InlineKeyboardButton("üíª –§–æ—Ä–º–∞—Ç –≤—Å—Ç—Ä–µ—á", callback_data="pref_format")],
            [InlineKeyboardButton("üéØ –¢–µ–º—ã –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞", callback_data="pref_topics")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")],
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        current_settings = f"""
*–¢–ï–ö–£–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò:*

üïê *–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:* {len(preferences.availability_slots)} —Å–ª–æ—Ç–æ–≤
üíª *–§–æ—Ä–º–∞—Ç:* {preferences.get_preferred_format_display()}
üéØ *–ò–Ω—Ç–µ—Ä–µ—Å—ã:* {', '.join(preferences.topics_of_interest[:3])}{'...' if len(preferences.topics_of_interest) > 3 else ''}
"""
        
        await update.message.reply_text(
            f"‚öôÔ∏è *–ù–ê–°–¢–†–û–ô–ö–ò –¢–ê–ô–ù–û–ì–û –ö–û–§–ï*\n\n{current_settings}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Employee.DoesNotExist:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ —Å–∏—Å—Ç–µ–º–µ.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_preference_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    try:
        employee = await Employee.objects.aget(telegram_id=user_id)
        
        if data == 'pref_availability':
            await show_availability_settings(query, context, employee)
        elif data == 'pref_format':
            await show_format_settings(query, context, employee)
        elif data == 'pref_topics':
            await show_topics_settings(query, context, employee)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_availability_settings(query, context, employee):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
    preferences = await preference_service.get_or_create_preferences(employee)
    
    keyboard = [
        [InlineKeyboardButton("üïê –ü–Ω 10:00-12:00", callback_data="avail_mon_10")],
        [InlineKeyboardButton("üïê –ü–Ω 14:00-16:00", callback_data="avail_mon_14")],
        [InlineKeyboardButton("üïê –í—Ç 10:00-12:00", callback_data="avail_tue_10")],
        [InlineKeyboardButton("üïê –í—Ç 14:00-16:00", callback_data="avail_tue_14")],
        [InlineKeyboardButton("üïê –°—Ä 12:00-14:00", callback_data="avail_wed_12")],
        [InlineKeyboardButton("üïê –ß—Ç 16:00-18:00", callback_data="avail_thu_16")],
        [InlineKeyboardButton("üïê –ü—Ç 11:00-13:00", callback_data="avail_fri_11")],
        [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="avail_save")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="pref_back")],
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
    current_slots = "\n".join([f"‚úÖ {slot}" for slot in preferences.availability_slots])
    
    await query.edit_message_text(
        f"üïê *–ù–ê–°–¢–†–û–ô–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò*\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã:\n\n"
        f"*–¢–µ–∫—É—â–∏–µ —Å–ª–æ—Ç—ã:*\n{current_slots if current_slots else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}\n\n"
        f"‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç—ã, –∫–æ–≥–¥–∞ –≤—ã –æ–±—ã—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã –¥–ª—è –∫–æ—Ñ–µ-–≤—Å—Ç—Ä–µ—á.",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_format_settings(query, context, employee):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á"""
    preferences = await preference_service.get_or_create_preferences(employee)
    
    keyboard = [
        [InlineKeyboardButton("üíª –¢–æ–ª—å–∫–æ –æ–Ω–ª–∞–π–Ω", callback_data="format_online")],
        [InlineKeyboardButton("üè¢ –¢–æ–ª—å–∫–æ –æ—Ñ—Ñ–ª–∞–π–Ω", callback_data="format_offline")],
        [InlineKeyboardButton("üíªüè¢ –û–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞", callback_data="format_both")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="pref_back")],
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üíª *–§–û–†–ú–ê–¢ –í–°–¢–†–ï–ß*\n\n"
        f"*–¢–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç:* {preferences.get_preferred_format_display()}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Å—Ç—Ä–µ—á:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_topics_settings(query, context, employee):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    preferences = await preference_service.get_or_create_preferences(employee)
    
    keyboard = [
        [InlineKeyboardButton("üíº –†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞", callback_data="topic_work")],
        [InlineKeyboardButton("üé® –•–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è", callback_data="topic_hobby")],
        [InlineKeyboardButton("‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", callback_data="topic_travel")],
        [InlineKeyboardButton("üìö –ö–Ω–∏–≥–∏ –∏ —Ñ–∏–ª—å–º—ã", callback_data="topic_books")],
        [InlineKeyboardButton("üèÉ –°–ø–æ—Ä—Ç –∏ –∑–¥–æ—Ä–æ–≤—å–µ", callback_data="topic_sport")],
        [InlineKeyboardButton("üî¨ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", callback_data="topic_tech")],
        [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="topics_save")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="pref_back")],
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    current_topics = ", ".join(preferences.topics_of_interest)
    
    await query.edit_message_text(
        f"üéØ *–¢–ï–ú–´ –î–õ–Ø –†–ê–ó–ì–û–í–û–†–ê*\n\n"
        f"*–¢–µ–∫—É—â–∏–µ —Ç–µ–º—ã:* {current_topics}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–∞–º —Ç–µ–º—ã –¥–ª—è –æ–±—â–µ–Ω–∏—è:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

def setup_preference_handlers(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
    application.add_handler(CommandHandler("preferences", show_preferences_menu))
    application.add_handler(CallbackQueryHandler(handle_preference_callback, pattern="^pref_"))
    application.add_handler(CallbackQueryHandler(handle_preference_callback, pattern="^avail_"))
    application.add_handler(CallbackQueryHandler(handle_preference_callback, pattern="^format_"))
    application.add_handler(CallbackQueryHandler(handle_preference_callback, pattern="^topic_"))