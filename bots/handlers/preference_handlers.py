import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler, CommandHandler, MessageHandler, filters
from activities.services.preference_service import preference_service
from employees.models import Employee
from employees.utils import PreferenceManager
from bots.services.redis_service import redis_service
from asgiref.sync import sync_to_async
from bots.utils.message_utils import reply_with_menu
from bots.menu_manager import MenuManager

logger = logging.getLogger(__name__)

async def show_preferences_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π —á–µ—Ä–µ–∑ Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    user_id = update.effective_user.id
    
    try:
        employee = await Employee.objects.aget(telegram_id=user_id)
        preferences = await preference_service.get_or_create_preferences(employee)
        
        current_settings = f"""
*–¢–ï–ö–£–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò:*

üïê *–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:* {len(preferences.availability_slots)} —Å–ª–æ—Ç–æ–≤
üíª *–§–æ—Ä–º–∞—Ç:* {preferences.get_preferred_format_display()}
üéØ *–ò–Ω—Ç–µ—Ä–µ—Å—ã:* {', '.join(preferences.topics_of_interest[:3])}{'...' if len(preferences.topics_of_interest) > 3 else ''}

–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:
‚Ä¢ üéØ –ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
"""
        
        await reply_with_menu(update, current_settings, menu_type='interests', parse_mode='Markdown')
        
    except Employee.DoesNotExist:
        await reply_with_menu(update, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ —Å–∏—Å—Ç–µ–º–µ.", menu_type='main')
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await reply_with_menu(update, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", menu_type='main')

async def handle_preference_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    try:
        employee = await Employee.objects.aget(telegram_id=user_id)
        
        # Existing preference menu actions
        if data == 'pref_availability':
            await show_availability_settings(query, context, employee)
        elif data == 'pref_format':
            await show_format_settings(query, context, employee)
        elif data == 'pref_topics':
            await show_topics_settings(query, context, employee)
        
        # Toggle individual interest from menu_manager ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
        elif data.startswith('toggle_interest_'):
            interest_code = data.replace('toggle_interest_', '')
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º
                current_eis = await PreferenceManager.get_employee_interests(employee)
                current_active = {ei.interest.code for ei in current_eis if ei.is_active}

                if interest_code in current_active:
                    new_active = current_active - {interest_code}
                    action = 'removed'
                else:
                    new_active = current_active | {interest_code}
                    action = 'added'

                success = await PreferenceManager.update_employee_interests(employee, list(new_active))

                # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                try:
                    from employees.redis_utils import RedisManager
                    RedisManager.invalidate_employee_cache(employee.id)
                except Exception:
                    logger.debug('INTERESTS_DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–µ—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ—Å–ª–µ toggle interest')

                if success:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å InlineKeyboard)
                    interests_text = await MenuManager.create_interests_menu(employee, selection_mode=True)
                    new_keyboard = await MenuManager.create_interests_selection_keyboard(employee)
                    try:
                        await query.edit_message_text(interests_text, reply_markup=new_keyboard, parse_mode='Markdown')
                    except Exception:
                        # fallback ‚Äî –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
                        await query.answer(f"{'–í–ö–õ' if action=='added' else '–í–´–ö–õ'}: {interest_code}", show_alert=False)
                else:
                    await query.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏', show_alert=True)
            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ toggle interest {interest_code} –¥–ª—è user {user_id}: {e}")
                await query.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', show_alert=True)

        # Save pending interests ‚Äî confirmation button. Previously read pending_interests from context
        # which was never populated when we used immediate toggle; to avoid accidentally clearing
        # subscriptions we now just re-read current active interests from DB and acknowledge.
        elif data == 'save_interests':
            try:
                current_eis = await PreferenceManager.get_employee_interests(employee)
                active_codes = [ei.interest.code for ei in current_eis if ei.is_active]
                # Call update with the same set (idempotent) to ensure DB/cache consistency
                success = await PreferenceManager.update_employee_interests(employee, active_codes)
                if success:
                    await query.answer('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', show_alert=True)
                    # Refresh menu
                    interests_text = await MenuManager.create_interests_menu(employee)
                    await reply_with_menu(update, interests_text, menu_type='interests', parse_mode='Markdown')
                else:
                    await query.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏', show_alert=True)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {e}")
                await query.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏', show_alert=True)

        elif data == 'disable_all_interests':
            # Ask for confirmation via edit
            keyboard = [
                [InlineKeyboardButton("–î–∞, –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data="confirm_disable_all")],
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="pref_back")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤?", reply_markup=reply_markup)
        elif data == 'confirm_disable_all':
            try:
                success = await PreferenceManager.disable_all_interests(employee)
                if success:
                    # invalidate cache already happens in disable_all_interests
                    await query.edit_message_text('–í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.')
                else:
                    await query.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ', show_alert=True)
            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ confirm_disable_all –¥–ª—è user {user_id}: {e}")
                await query.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', show_alert=True)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_availability_settings(query, context, employee):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    preferences = await preference_service.get_or_create_preferences(employee)
    
    keyboard = [
        [InlineKeyboardButton("üïê –ü–Ω 10:00-12:00", callback_data="avail_mon_10")],
        [InlineKeyboardButton("üïê –ü–Ω 14:00-16:00", callback_data="avail_mon_14")],
        [InlineKeyboardButton("üïê –í—Ç 10:00-12:00", callback_data="avail_tue_10")],
        [InlineKeyboardButton("üïê –í—Ç 14:00-16:00", callback_data="avail_tue_14")],
        [InlineKeyboardButton("üïê –°—Ä 12:00-14:00", callback_data="avail_wed_12")],
        [InlineKeyboardButton("üïê –ß—Ç 16:00-18:00", callback_data="avail_thu_16")],
        [InlineKeyboardButton("üïê –ü—Ç 11:00-13:00", callback_data="avail_fri_11")],
        [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="avail_save")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="pref_back")],
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
    current_slots = "\n".join([f"‚úÖ {slot}" for slot in preferences.availability_slots])
    
    await query.edit_message_text(
        f"üïê *–ù–ê–°–¢–†–û–ô–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò*\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã:\n\n"
        f"*–¢–µ–∫—É—â–∏–µ —Å–ª–æ—Ç—ã:*\n{current_slots if current_slots else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}\n\n"
        f"‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç—ã, –∫–æ–≥–¥–∞ –≤—ã –æ–±—ã—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã –¥–ª—è –∫–æ—Ñ–µ-–≤—Å—Ç—Ä–µ—á.",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_format_settings(query, context, employee):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    preferences = await preference_service.get_or_create_preferences(employee)
    
    keyboard = [
        [InlineKeyboardButton("üíª –¢–æ–ª—å–∫–æ –æ–Ω–ª–∞–π–Ω", callback_data="format_online")],
        [InlineKeyboardButton("üè¢ –¢–æ–ª—å–∫–æ –æ—Ñ—Ñ–ª–∞–π–Ω", callback_data="format_offline")],
        [InlineKeyboardButton("üíªüè¢ –û–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞", callback_data="format_both")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="pref_back")],
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üíª *–§–û–†–ú–ê–¢ –í–°–¢–†–ï–ß*\n\n"
        f"*–¢–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç:* {preferences.get_preferred_format_display()}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Å—Ç—Ä–µ—á:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_topics_settings(query, context, employee):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    preferences = await preference_service.get_or_create_preferences(employee)
    
    keyboard = [
        [InlineKeyboardButton("üíº –†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞", callback_data="topic_work")],
        [InlineKeyboardButton("üé® –•–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è", callback_data="topic_hobby")],
        [InlineKeyboardButton("‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", callback_data="topic_travel")],
        [InlineKeyboardButton("üìö –ö–Ω–∏–≥–∏ –∏ —Ñ–∏–ª—å–º—ã", callback_data="topic_books")],
        [InlineKeyboardButton("üèÉ –°–ø–æ—Ä—Ç –∏ –∑–¥–æ—Ä–æ–≤—å–µ", callback_data="topic_sport")],
        [InlineKeyboardButton("üî¨ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", callback_data="topic_tech")],
        [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="topics_save")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="pref_back")],
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    current_topics = ", ".join(preferences.topics_of_interest)
    
    await query.edit_message_text(
        f"üéØ *–¢–ï–ú–´ –î–õ–Ø –†–ê–ó–ì–û–í–û–†–ê*\n\n"
        f"*–¢–µ–∫—É—â–∏–µ —Ç–µ–º—ã:* {current_topics}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–∞–º —Ç–µ–º—ã –¥–ª—è –æ–±—â–µ–Ω–∏—è:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_text_preferences(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏ (—Ñ–æ–ª–ª–±–µ–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥).

    –¢–µ–ø–µ—Ä—å –≤—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ InlineKeyboard –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ `handle_preference_callback`.
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.
    """
    text = update.message.text
    user_id = update.effective_user.id

    try:
        employee = await Employee.objects.aget(telegram_id=user_id)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –∑–∞–ø—Ä–æ—Å–∏–ª –º–µ–Ω—é –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Inline –º–µ–Ω—é
        if text and text.strip() == "üéØ –ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã":
            interests_text = await MenuManager.create_interests_menu(employee, selection_mode=True)
            keyboard = await MenuManager.create_interests_selection_keyboard(employee)
            target = getattr(update, 'message', None) or getattr(update, 'effective_message', None)
            if target:
                await target.reply_text(interests_text, reply_markup=keyboard, parse_mode='Markdown')
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π (–û—Ç–ø–∏—Å–∞—Ç—å—Å—è / –ù–∞–∑–∞–¥)
                await reply_with_menu(update, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏.', menu_type='interests', parse_mode='Markdown')
            return

        # –†–∞–Ω–µ–µ —Ç—É—Ç –±—ã–ª–∞ –∫–Ω–æ–ø–∫–∞ "üö´ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ–≥–æ" ‚Äî —É–¥–∞–ª–µ–Ω–∞ –∏–∑ UI, –ø–æ—ç—Ç–æ–º—É –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–Ω—è—Ç–∞.

        if text and text.strip() == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
            return await reply_with_menu(update, '–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', menu_type='main', parse_mode='Markdown')

        # –ò–Ω–∞—á–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ –º–µ–Ω—é –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∫–∞–∫ —Ñ–æ–ª–ª–±–µ–∫
        interests_text = await MenuManager.create_interests_menu(employee)
        keyboard = await MenuManager.create_interests_selection_keyboard(employee)
        target = getattr(update, 'message', None) or getattr(update, 'effective_message', None)
        if target:
            await target.reply_text(interests_text, reply_markup=keyboard, parse_mode='Markdown')
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π (–û—Ç–ø–∏—Å–∞—Ç—å—Å—è / –ù–∞–∑–∞–¥)
            await reply_with_menu(update, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏.', menu_type='interests', parse_mode='Markdown')
            
    except Employee.DoesNotExist:
        await reply_with_menu(update, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ —Å–∏—Å—Ç–µ–º–µ.", menu_type='main')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: {e}")
        await reply_with_menu(update, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", menu_type='main')

def setup_preference_handlers(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
    # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    application.add_handler(CommandHandler("preferences", show_preferences_menu))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    application.add_handler(CallbackQueryHandler(handle_preference_callback, pattern="^pref_"))
    application.add_handler(CallbackQueryHandler(handle_preference_callback, pattern="^avail_"))
    application.add_handler(CallbackQueryHandler(handle_preference_callback, pattern="^format_"))
    application.add_handler(CallbackQueryHandler(handle_preference_callback, pattern="^topic_"))
    
    # Interest toggles and actions from menu_manager
    application.add_handler(CallbackQueryHandler(handle_preference_callback, pattern="^toggle_interest_"))
    # Inline callbacks only for toggle_interest (save/disable handled via ReplyKeyboard text handlers)
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–µ–Ω—é –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ (ReplyKeyboard –∫–Ω–æ–ø–∫–∏)
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ –æ–±—â–∏–π –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    try:
        application.add_handler(MessageHandler(filters.Regex(r'^(üéØ –ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã|‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é)$') & ~filters.COMMAND, handle_text_preferences))
    except Exception:
        # –ù–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö PTB filters.Regex –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è; –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_preferences))
    
    # –î–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º InlineKeyboard ‚Äî callbacks –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ handle_preference_callback