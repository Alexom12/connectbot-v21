"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∑–∞–ø—É—Å–∫–∞ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —É–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
"""
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from bots.menu_manager import MenuManager
from bots.utils.message_utils import (
    reply_with_menu, 
    reply_with_smart_notifications,
    send_contextual_welcome,
    send_adaptive_suggestions,
    send_educational_tip,
    log_user_interaction,
    handle_quick_action
)
from bots.services.notification_service import notification_service
from bots.services.context_service import context_service
from employees.models import Employee
from asgiref.sync import sync_to_async

logger = logging.getLogger(__name__)


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —É–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    user = update.effective_user
    user_id = user.id

    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await log_user_interaction(update, 'bot_start', 'start', True)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    welcome_addition = f"""
üìã *–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚òï *–¢–∞–π–Ω—ã–π –∫–æ—Ñ–µ* - –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ —Å –∫–æ–ª–ª–µ–≥–∞–º–∏
üéØ *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏* - –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è  
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏* - –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—ã—Ç–∞
üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è* - –≤—Å–µ–≥–¥–∞ –≤ –∫—É—Ä—Å–µ —Å–æ–±—ã—Ç–∏–π

üí° *–ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ üß† –£–º–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –º–µ–Ω—é
‚Ä¢ üìà –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
"""
    
    await send_contextual_welcome(update, welcome_addition)
    
    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ —Å —É–º–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏"""
    user_id = update.effective_user.id
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏
    await log_user_interaction(update, 'help_request', 'help', True)
    
    help_text = await MenuManager.create_help_menu()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
    user_context = await context_service.get_user_context(user_id)
    if user_context.get('smart_tips'):
        context_tips = "\n\nüåü *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:*\n" + "\n".join([f"‚Ä¢ {tip}" for tip in user_context['smart_tips'][:2]])
        help_text += context_tips
    
    await reply_with_smart_notifications(update, help_text, menu_type='help', parse_mode='Markdown')


async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏"""
    user_id = update.effective_user.id
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é
    await log_user_interaction(update, 'menu_open', 'main', True)
    
    menu_text = await MenuManager.create_main_menu_message(user_id)
    await reply_with_smart_notifications(update, menu_text, menu_type='main', parse_mode='Markdown')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
    async def send_suggestions():
        await send_adaptive_suggestions(update)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º context –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    if context.application:
        context.application.create_task(send_suggestions())


async def notifications_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /notifications - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    user = update.effective_user
    user_id = user.id
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await log_user_interaction(update, 'notifications_view', 'notifications', True)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notifications_text = await MenuManager.create_notifications_menu(user_id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    user_context = await context_service.get_user_context(user_id)
    if user_context.get('quick_actions'):
        recommendations = "\n\nüéØ *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*\n" + "\n".join([f"‚Ä¢ {action}" for action in user_context['quick_actions'][:3]])
        notifications_text += recommendations
    
    await reply_with_smart_notifications(update, notifications_text, menu_type='main', parse_mode='Markdown')
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º")


async def refresh_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /refresh - –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å —É–º–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
    user = update.effective_user
    user_id = user.id
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    await log_user_interaction(update, 'data_refresh', 'refresh', True)
    
    # –û—á–∏—â–∞–µ–º –∫—ç—à –∏ –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await notification_service.clear_notification_cache(user_id)
    counts = await notification_service.get_user_notification_counts(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_context = await context_service.get_user_context(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    if counts['total'] == 0:
        refresh_text = """
üîÑ *–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!*

üéâ *–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏!* –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.

üåü *–°—Ç–∞—Ç—É—Å:* ‚úÖ –ò–¥–µ–∞–ª—å–Ω–æ
üí´ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* –ú–æ–∂–µ—Ç–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!
"""
    else:
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        activity_level = user_context.get('activity_profile', {}).get('activity_level', 'new')
        
        if activity_level == 'new':
            motivation = "üí° –û—Ç–ª–∏—á–Ω—ã–π —Å—Ç–∞—Ä—Ç! –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π."
        elif activity_level == 'low':
            motivation = "üöÄ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å! –ö–∞–∂–¥–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º."
        elif activity_level == 'medium':
            motivation = "üèÜ –û—Ç–ª–∏—á–Ω—ã–π —Ç–µ–º–ø! –í—ã –Ω–∞ –ø—É—Ç–∏ –∫ —Å—Ç–∞—Ç—É—Å—É –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞."
        else:
            motivation = "üëë –í—ã - –∑–≤–µ–∑–¥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å –∫–æ–ª–ª–µ–≥!"
        
        changes_info = ""
        if counts['urgent_actions'] > 0:
            changes_info = f"\nüö® *–í–Ω–∏–º–∞–Ω–∏–µ!* –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {counts['urgent_actions']} —Å—Ä–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π!"
        
        refresh_text = f"""
üîÑ *–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!*

*–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:*
‚Ä¢ üö® –°—Ä–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: {counts['urgent_actions']}
‚Ä¢ ü§ù –û–∂–∏–¥–∞—é—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏: {counts['meetings']}
‚Ä¢ üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è: {counts['today_activities']}
‚Ä¢ üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –Ω–µ–¥–µ–ª–µ: {counts['week_activities']}
‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {counts['notifications']}
{changes_info}

üí° *–í—Å–µ–≥–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π: {counts['total']}*
{motivation}
"""
    
    await reply_with_smart_notifications(update, refresh_text, menu_type='main', parse_mode='Markdown')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
    async def send_tip():
        await send_educational_tip(update, 'random')
    
    if context.application:
        context.application.create_task(send_tip())
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ–±–Ω–æ–≤–∏–ª –¥–∞–Ω–Ω—ã–µ. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {counts['total']}")


async def tips_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tips - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏"""
    user_id = update.effective_user.id
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Å–∫–∞–∑–æ–∫
    await log_user_interaction(update, 'tips_request', 'tips', True)
    
    await send_educational_tip(update, 'random')
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏")


async def context_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /context - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
    user = update.effective_user
    user_id = user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    user_context = await context_service.get_user_context(user_id)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞
    context_text = f"""
üîç *–í–∞—à —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç*

*–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user_context.get('activity_profile', {}).get('activity_label', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞: {user_context.get('activity_profile', {}).get('experience_level', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π: {user_context.get('priority_level', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

*–í—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:*
‚Ä¢ –í—Ä–µ–º—è —Å—É—Ç–æ–∫: {user_context.get('time_context', {}).get('time_label', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚Ä¢ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {user_context.get('time_context', {}).get('day_tip', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: {user_context.get('activity_profile', {}).get('total_activities', 0)}
‚Ä¢ –£—á–∞—Å—Ç–∏–π –≤ –≤—Å—Ç—Ä–µ—á–∞—Ö: {user_context.get('activity_profile', {}).get('total_meetings', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –º–µ—Å—è—Ü: {user_context.get('activity_profile', {}).get('recent_activities', 0)}

*–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*
‚Ä¢ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {user_context.get('notifications', {}).get('counts', {}).get('total', 0)}
‚Ä¢ –°—Ä–æ—á–Ω—ã–µ: {user_context.get('notifications', {}).get('counts', {}).get('urgent_actions', 0)}

üí° –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –æ–ø—ã—Ç–∞.
"""
    
    await reply_with_smart_notifications(update, context_text, menu_type='main', parse_mode='Markdown')
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")


async def suggestions_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /suggestions - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    user_id = update.effective_user.id
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    await log_user_interaction(update, 'suggestions_request', 'suggestions', True)
    
    await send_adaptive_suggestions(update)
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")


async def clear_notifications_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear - –æ—á–∏—â–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    user = update.effective_user
    user_id = user.id
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É
    await log_user_interaction(update, 'cache_clear', 'clear', True)
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
    await notification_service.clear_notification_cache(user_id)
    
    clear_text = """
üßπ *–ö—ç—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—á–∏—â–µ–Ω!*

–î–∞–Ω–Ω—ã–µ –æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã. 

üîß *–î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:*
‚Ä¢ –û—á–∏—â–µ–Ω –∫—ç—à Redis
‚Ä¢ –°–±—Ä–æ—à–µ–Ω—ã —Å—á–µ—Ç—á–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π  
‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è

üí° –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
"""
    
    await reply_with_smart_notifications(update, clear_text, menu_type='main', parse_mode='Markdown')
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—á–∏—Å—Ç–∏–ª –∫—ç—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")


async def quick_action_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π /quick <action>"""
    user = update.effective_user
    user_id = user.id
    action_type = context.args[0] if context.args else None
    
    if not action_type:
        help_text = """
‚ö° *–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è*

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/quick confirm - –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å—Ä–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
/quick plan - –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–µ–ª–∏
/quick stats - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
/quick interests - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤

üí° –≠—Ç–∏ –∫–æ–º–∞–Ω–¥—ã —ç–∫–æ–Ω–æ–º—è—Ç –≤—Ä–µ–º—è –Ω–∞ —á–∞—Å—Ç—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏!
"""
        await reply_with_smart_notifications(update, help_text, menu_type='main', parse_mode='Markdown')
        return
    
    action_map = {
        'confirm': 'confirm_urgent',
        'plan': 'plan_week', 
        'stats': 'review_stats',
        'interests': 'setup_interests'
    }
    
    mapped_action = action_map.get(action_type)
    if mapped_action:
        await handle_quick_action(update, mapped_action)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤—ã–ø–æ–ª–Ω–∏–ª –±—ã—Å—Ç—Ä–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action_type}")
    else:
        error_text = f"""
‚ùå *–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –±—ã—Å—Ç—Ä–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ*

–î–µ–π—Å—Ç–≤–∏–µ "{action_type}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /quick –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.
"""
        await reply_with_smart_notifications(update, error_text, menu_type='main', parse_mode='Markdown')


async def handle_text_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    text = update.message.text
    user = update.effective_user
    user_id = user.id
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
        await log_user_interaction(update, 'text_interaction', text, True)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ (—É–±–∏—Ä–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è)
        clean_text = text.split(' (')[0] if ' (' in text else text
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏ —Å —ç–º–æ–¥–∑–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if clean_text in ["üîî –ü–æ–º–æ—â—å", "‚ùì –ü–æ–º–æ—â—å"]:
            await help_command(update, context)
            return
            
        elif clean_text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
            employee = await Employee.objects.aget(telegram_id=user.id)
            profile_text = await MenuManager.create_profile_menu(employee)
            await reply_with_smart_notifications(update, profile_text, menu_type='profile', parse_mode='Markdown')
            
        elif clean_text == "üéØ –ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ + Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π
            try:
                employee = await Employee.objects.aget(telegram_id=user.id)
                interests_text = await MenuManager.create_interests_menu(employee, selection_mode=True)
                keyboard = await MenuManager.create_interests_selection_keyboard(employee)
                target = getattr(update, 'message', None) or getattr(update, 'effective_message', None)
                if target:
                    await target.reply_text(interests_text, reply_markup=keyboard, parse_mode='Markdown')
                    # –û—Ç–¥–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π (–û—Ç–ø–∏—Å–∞—Ç—å—Å—è / –ù–∞–∑–∞–¥)
                    await reply_with_menu(update, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏.', menu_type='interests', parse_mode='Markdown')
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–Ω—é –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {e}")
                # –§–æ–ª–ª–±–µ–∫ –∫ —Å—Ç–∞—Ä–æ–º—É –ø–æ–≤–µ–¥–µ–Ω–∏—é
                employee = await Employee.objects.aget(telegram_id=user.id)
                interests_text = await MenuManager.create_interests_menu(employee)
                await reply_with_smart_notifications(update, interests_text, menu_type='interests', parse_mode='Markdown')
            
        elif clean_text == "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å":
            employee = await Employee.objects.aget(telegram_id=user.id)
            calendar_text = await MenuManager.create_calendar_menu(employee)
            await reply_with_smart_notifications(update, calendar_text, menu_type='calendar', parse_mode='Markdown')
            
        elif clean_text == "üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è":
            employee = await Employee.objects.aget(telegram_id=user.id)
            achievements_text = await MenuManager.create_achievements_menu(employee)
            await reply_with_smart_notifications(update, achievements_text, menu_type='main', parse_mode='Markdown')
            
        elif clean_text == "‚òï –¢–∞–π–Ω—ã–π –∫–æ—Ñ–µ":
            coffee_text = await MenuManager.create_coffee_menu()
            await reply_with_smart_notifications(update, coffee_text, menu_type='coffee', parse_mode='Markdown')
            
        elif clean_text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            settings_text = await MenuManager.create_settings_menu()
            await reply_with_smart_notifications(update, settings_text, menu_type='settings', parse_mode='Markdown')
            
        elif clean_text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
            await menu_command(update, context)
            
        elif clean_text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            employee = await Employee.objects.aget(telegram_id=user.id)
            counts = await notification_service.get_user_notification_counts(user_id)
            user_context = await context_service.get_user_context(user_id)
            activity_profile = user_context.get('activity_profile', {})
            
            stats_text = f"""
üìä *–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

*–¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*
‚Ä¢ üö® –°—Ä–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: {counts['urgent_actions']}
‚Ä¢ ü§ù –û–∂–∏–¥–∞—é—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏: {counts['meetings']}
‚Ä¢ üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è: {counts['today_activities']}
‚Ä¢ üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –Ω–µ–¥–µ–ª–µ: {counts['week_activities']}

*–ò—Å—Ç–æ—Ä–∏—è —É—á–∞—Å—Ç–∏—è:*
‚Ä¢ –í—Å–µ–≥–æ –≤—Å—Ç—Ä–µ—á: {activity_profile.get('total_meetings', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {await _get_active_interests_count(employee)}
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: 3
‚Ä¢ –î–Ω–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: 45

*–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:*
‚Ä¢ –°—Ç–∞—Ç—É—Å: {activity_profile.get('activity_label', '–ù–æ–≤–∏—á–æ–∫')}
‚Ä¢ –û–ø—ã—Ç: {activity_profile.get('experience_level', 'beginner').title()}
‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: {await _calculate_user_rating(activity_profile)}

üí° {await _get_motivational_message(activity_profile)}
"""
            await reply_with_smart_notifications(update, stats_text, menu_type='profile', parse_mode='Markdown')
            
        elif clean_text == "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è":
            employee = await Employee.objects.aget(telegram_id=user.id)
            achievements_text = await MenuManager.create_achievements_menu(employee)
            await reply_with_smart_notifications(update, achievements_text, menu_type='main', parse_mode='Markdown')
            
        elif clean_text == "üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å":
            employee = await Employee.objects.aget(telegram_id=user.id)
            counts = await notification_service.get_user_notification_counts(user_id)
            user_context = await context_service.get_user_context(user_id)
            activity_profile = user_context.get('activity_profile', {})
            
            activity_text = f"""
üìà *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –º–µ—Å—è—Ü–∞–º*

*–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è:*
‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: {counts['week_activities']}
‚Ä¢ –û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {counts['today_activities']}
‚Ä¢ –°—Ä–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: {counts['urgent_actions']}

*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü:*
‚Ä¢ –£—á–∞—Å—Ç–∏–π –≤ –≤—Å—Ç—Ä–µ—á–∞—Ö: {activity_profile.get('recent_activities', 0)}
‚Ä¢ –ü–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: 12
‚Ä¢ –ù–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: 2
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π: 22/30

*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è:*
{await _get_activity_recommendations(activity_profile)}

üéØ {await _get_activity_motivation(activity_profile)}
"""
            await reply_with_smart_notifications(update, activity_text, menu_type='profile', parse_mode='Markdown')
            
        elif clean_text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å":
            employee = await Employee.objects.aget(telegram_id=user.id)
            saved_text = "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!"
            interests_text = await MenuManager.create_interests_menu(employee)
            await reply_with_smart_notifications(update, f"{saved_text}\n\n{interests_text}", menu_type='interests', parse_mode='Markdown')
            
        # –†–∞–Ω–µ–µ –±—ã–ª–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ Reply-–∫–Ω–æ–ø–∫—É ‚Äî –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ UI, –ø–æ—ç—Ç–æ–º—É –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.
            
        elif clean_text in ["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "üö® –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"]:
            await handle_quick_action(update, 'confirm_urgent')
            
        elif clean_text == "‚è≠Ô∏è –û—Ç–∫–∞–∑–∞—Ç—å—Å—è":
            declined_text = "‚è≠Ô∏è –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —É—á–∞—Å—Ç–∏—è"
            await reply_with_smart_notifications(update, declined_text, menu_type='calendar', parse_mode='Markdown')
            
        elif clean_text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å":
            await refresh_command(update, context)
            
        elif clean_text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
            await notifications_command(update, context)
            
        elif clean_text == "üë§ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è":
            profile_data_text = "üë§ *–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è*\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
            await reply_with_smart_notifications(update, profile_data_text, menu_type='settings', parse_mode='Markdown')
            
        elif clean_text == "üåê –Ø–∑—ã–∫":
            language_text = "üåê *–í—ã–±–æ—Ä —è–∑—ã–∫–∞*\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
            await reply_with_smart_notifications(update, language_text, menu_type='settings', parse_mode='Markdown')
            
        elif clean_text == "üì± –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ":
            theme_text = "üì± *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è*\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
            await reply_with_smart_notifications(update, theme_text, menu_type='settings', parse_mode='Markdown')
            
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
            await menu_command(update, context)
            
    except Employee.DoesNotExist:
        # –ï—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await menu_command(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await menu_command(update, context)


async def _get_active_interests_count(employee):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    try:
        from employees.utils import PreferenceManager
        interests = await PreferenceManager.get_employee_interests(employee)
        active_interests = [ei for ei in interests if ei.is_active]
        return len(active_interests)
    except:
        return 0


async def _calculate_user_rating(activity_profile):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    recent_activities = activity_profile.get('recent_activities', 0)
    
    if recent_activities >= 15:
        return "‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è –≠–ª–∏—Ç–Ω—ã–π"
    elif recent_activities >= 10:
        return "‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
    elif recent_activities >= 5:
        return "‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–π"
    elif recent_activities >= 1:
        return "‚≠êÔ∏è‚≠êÔ∏è –ù–∞—á–∏–Ω–∞—é—â–∏–π"
    else:
        return "‚≠êÔ∏è –ù–æ–≤–∏—á–æ–∫"


async def _get_motivational_message(activity_profile):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    level = activity_profile.get('activity_level', 'new')
    
    messages = {
        'new': "–ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π - –∫–∞–∂–¥–∞—è –≤—Å—Ç—Ä–µ—á–∞ —ç—Ç–æ –Ω–æ–≤—ã–π –æ–ø—ã—Ç!",
        'low': "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å! –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É.",
        'medium': "–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –í—ã —Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å —á–∞—Å—Ç—å—é –∫–æ–º—å—é–Ω–∏—Ç–∏.",
        'high': "–í—ã - –æ–±—Ä–∞–∑–µ—Ü –¥–ª—è –ø–æ–¥—Ä–∞–∂–∞–Ω–∏—è! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å –∫–æ–ª–ª–µ–≥!"
    }
    
    return messages.get(level, "–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö –¥–ª—è —Ä–æ—Å—Ç–∞!")


async def _get_activity_recommendations(activity_profile):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è"""
    level = activity_profile.get('activity_level', 'new')
    
    recommendations = {
        'new': """‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å –¢–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ 2-3 –∏–Ω—Ç–µ—Ä–µ—Å–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
‚Ä¢ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ 1 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –Ω–µ–¥–µ–ª—é""",
        
        'low': """‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ —É—á–∞—Å—Ç–∏–µ –¥–æ 2 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –≤ –Ω–µ–¥–µ–ª—é
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—Å—Ç—Ä–µ—á
‚Ä¢ –°—Ç—Ä–µ–º–∏—Ç–µ—Å—å –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π""",
        
        'medium': """‚Ä¢ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ 3+ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö –≤ –Ω–µ–¥–µ–ª—é
‚Ä¢ –°—Ç–∞–Ω—å—Ç–µ –º–µ–Ω—Ç–æ—Ä–æ–º –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤
‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—Å—Ç—Ä–µ—á""",
        
        'high': """‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö
‚Ä¢ –î–µ–ª–∏—Ç–µ—Å—å –æ–ø—ã—Ç–æ–º —Å –∫–æ–ª–ª–µ–≥–∞–º–∏
‚Ä¢ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —É–ª—É—á—à–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
    }
    
    return recommendations.get(level, "–ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π!")


async def _get_activity_motivation(activity_profile):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏—é –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    level = activity_profile.get('activity_level', 'new')
    
    motivations = {
        'new': "–ö–∞–∂–¥–æ–µ —É—á–∞—Å—Ç–∏–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!",
        'low': "–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–∏–≤—ã—á–∫—É!",
        'medium': "–í—ã –Ω–∞ –ø—É—Ç–∏ –∫ —Å—Ç–∞—Ç—É—Å—É —ç–∫—Å–ø–µ—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π!",
        'high': "–í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –≤–µ—Å—å –∫–æ–ª–ª–µ–∫—Ç–∏–≤!"
    }
    
    return motivations.get(level, "–£—á–∞—Å—Ç–≤—É–π—Ç–µ –∏ —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ—Å—å!")


def setup_start_handlers(application: Application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∑–∞–ø—É—Å–∫–∞ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —É–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("menu", menu_command))
        application.add_handler(CommandHandler("notifications", notifications_command))
        application.add_handler(CommandHandler("refresh", refresh_command))
        application.add_handler(CommandHandler("tips", tips_command))
        application.add_handler(CommandHandler("context", context_command))
        application.add_handler(CommandHandler("suggestions", suggestions_command))
        application.add_handler(CommandHandler("clear", clear_notifications_command))
        application.add_handler(CommandHandler("quick", quick_action_command))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_messages))

        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∑–∞–ø—É—Å–∫–∞ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        logger.info("üß† –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ContextService –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
        logger.info("üéØ –£–º–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã")
        logger.info("üìä –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –∑–∞–ø—É—â–µ–Ω–∞")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–ø—É—Å–∫–∞: {e}")