# bots/handlers/feedback_handlers.py

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CommandHandler,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

from activities.feedback_services import FeedbackService
from bots.services.user_service import format_user_for_logging
from bots.handlers.error_handlers import handle_text_instead_of_button, handle_unexpected_state
from bots.utils.message_utils import reply_with_menu
from bots.menu_manager import MenuManager

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
feedback_service = FeedbackService()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
ASK_RATING, ASK_COMMENT, ASK_SUGGESTIONS, ASK_FINAL = range(4)

async def start_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏, –ø–æ–∫–∞–∑—ã–≤–∞—è —Å–ø–∏—Å–æ–∫ –≤—Å—Ç—Ä–µ—á."""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {format_user_for_logging(user)} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —Å–±–æ—Ä –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.")

    pending_meetings = await feedback_service.get_pending_feedbacks_for_user(user.id)

    if not pending_meetings:
        await reply_with_menu(update, "–£ –≤–∞—Å –Ω–µ—Ç –≤—Å—Ç—Ä–µ—á, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–∑—ã–≤–∞. –°–ø–∞—Å–∏–±–æ!", menu_type='main')
        return ConversationHandler.END

    keyboard = [
        [
            InlineKeyboardButton(
                f"–í—Å—Ç—Ä–µ—á–∞ –æ—Ç {meeting.created_at.strftime('%d.%m')}",
                callback_data=f"feedback_{meeting.id}"
            )
        ]
        for meeting in pending_meetings
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Å—Ç—Ä–µ—á—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤:",
        reply_markup=reply_markup
    )
    return ASK_RATING

async def ask_rating(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏."""
    query = update.callback_query
    await query.answer()
    meeting_id = int(query.data.split('_')[1])
    
    context.user_data[f'meeting_id_{meeting_id}'] = {'id': meeting_id}

    keyboard = [
        [InlineKeyboardButton(f"‚≠ê{i}", callback_data=f"rating_{i}") for i in range(1, 6)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text="–û—Ü–µ–Ω–∏—Ç–µ –≤—Å—Ç—Ä–µ—á—É –æ—Ç 1 –¥–æ 5:", reply_markup=reply_markup)
    return ASK_COMMENT

async def handle_rating_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —à–∞–≥–µ –æ—Ü–µ–Ω–∫–∏."""
    await handle_text_instead_of_button(update, context)

async def ask_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ü–µ–Ω–∫—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."""
    query = update.callback_query
    await query.answer()
    rating = int(query.data.split('_')[1])
    
    # –ù–∞—Ö–æ–¥–∏–º meeting_id –≤ user_data
    meeting_key = next((key for key in context.user_data if key.startswith('meeting_id_')), None)
    if not meeting_key:
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END
        
    context.user_data[meeting_key]['rating'] = rating
    
    await query.edit_message_text(text="–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞.")
    return ASK_SUGGESTIONS

async def ask_suggestions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."""
    comment = update.message.text
    
    meeting_key = next((key for key in context.user_data if key.startswith('meeting_id_')), None)
    if not meeting_key:
        await reply_with_menu(update, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", menu_type='main')
        return ConversationHandler.END

    context.user_data[meeting_key]['comment'] = comment
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é. –ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ '–Ω–µ—Ç'.")
    return ASK_FINAL

async def end_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    suggestions = update.message.text
    user_id = update.effective_user.id

    meeting_key = next((key for key in context.user_data if key.startswith('meeting_id_')), None)
    if not meeting_key:
        await reply_with_menu(update, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", menu_type='main')
        return ConversationHandler.END

    feedback_data = context.user_data[meeting_key]
    
    await feedback_service.submit_feedback(
        meeting_id=feedback_data['id'],
        user_telegram_id=user_id,
        rating=feedback_data['rating'],
        anonymous_feedback=feedback_data.get('comment', ''),
        suggestions=suggestions if suggestions.lower() not in ['–Ω–µ—Ç', 'no'] else ''
    )
    
    await reply_with_menu(update, "‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ –ø—Ä–∏–Ω—è—Ç! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.", menu_type='main')
    
    # –û—á–∏—Å—Ç–∫–∞
    if meeting_key in context.user_data:
        del context.user_data[meeting_key]
    
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –¥–∏–∞–ª–æ–≥."""
    await reply_with_menu(update, "–°–±–æ—Ä –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω.", menu_type='main')
    context.user_data.clear()
    return ConversationHandler.END

async def feedback_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /feedback —á–µ—Ä–µ–∑ Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {format_user_for_logging(user)} –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤.")

    pending_meetings = await feedback_service.get_pending_feedbacks_for_user(user.id)

    if not pending_meetings:
        feedback_text = """
üìù *–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤*

–£ –≤–∞—Å –Ω–µ—Ç –≤—Å—Ç—Ä–µ—á, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–∑—ã–≤–∞. 

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! –û—Ç–∑—ã–≤—ã –ø–æ–º–æ–≥–∞—é—Ç –Ω–∞–º —É–ª—É—á—à–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –≤—Å—Ç—Ä–µ—á.

üí° –ü–æ—Å–ª–µ —É—á–∞—Å—Ç–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤—Å—Ç—Ä–µ—á–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤.
"""
        await reply_with_menu(update, feedback_text, menu_type='main', parse_mode='Markdown')
        return

    # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –æ—Ç–∑—ã–≤–∞, –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
    await start_feedback(update, context)

feedback_conv_handler = ConversationHandler(
    entry_points=[CommandHandler("feedback", start_feedback), CallbackQueryHandler(start_feedback, pattern=r"^feedback_\d+$")],
    states={
        ASK_RATING: [
            CallbackQueryHandler(ask_rating, pattern=r"^feedback_\d+$"),
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_instead_of_button),
        ],
        ASK_COMMENT: [
            CallbackQueryHandler(ask_comment, pattern=r"^rating_[1-5]$"),
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_instead_of_button),
        ],
        ASK_SUGGESTIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_suggestions)],
        ASK_FINAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, end_feedback)],
    },
    fallbacks=[
        CommandHandler("cancel", cancel),
        MessageHandler(filters.ALL, handle_unexpected_state),
    ],
)

def setup_feedback_handlers(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    # –î–æ–±–∞–≤–ª—è–µ–º conversation handler –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    application.add_handler(feedback_conv_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /feedback –¥–ª—è Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    application.add_handler(CommandHandler("feedback", feedback_command))