"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""
import logging
from telegram.ext import Application
from bots.utils.message_utils import reply_with_menu
from bots.menu_manager import MenuManager

logger = logging.getLogger(__name__)

async def send_telegram_message(telegram_id, message):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(message)}")
    # logger.debug(f"  {message[:70]}...")
    return True

async def send_notification_with_menu(update, message, menu_type='main', parse_mode=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –º–µ–Ω—é"""
    try:
        await reply_with_menu(update, message, menu_type=menu_type, parse_mode=parse_mode)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –º–µ–Ω—é: {e}")
        return False

async def send_coffee_match_notification(update, match_info):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –ø–∞—Ä–µ –¥–ª—è –¢–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ"""
    try:
        notification_text = f"""
‚òï *–ù–ê–ô–î–ï–ù–ê –ü–ê–†–ê –î–õ–Ø –¢–ê–ô–ù–û–ì–û –ö–û–§–ï!*

üéØ –í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω! 
üìã –í–∞—à –∫–æ–¥: `{match_info.get('employee_code', 'N/A')}`
üé™ –û–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫: *{match_info.get('recognition_sign', 'N/A')}*

üí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ¬ª —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ
üìÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´üìÖ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É¬ª —á—Ç–æ–±—ã —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å –≤—Ä–µ–º—è

ü§´ –ü–æ–º–Ω–∏—Ç–µ: —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –¥–æ –≤—Å—Ç—Ä–µ—á–∏!
"""
        
        await send_notification_with_menu(
            update, 
            notification_text, 
            menu_type='coffee', 
            parse_mode='Markdown'
        )
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–∞—Ä–µ: {e}")
        return False

async def send_activity_reminder(update, activity_info):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    try:
        activity_name = activity_info.get('name', '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å')
        scheduled_time = activity_info.get('time', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        location = activity_info.get('location', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        
        reminder_text = f"""
üîî *–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –û –ê–ö–¢–ò–í–ù–û–°–¢–ò*

üéØ *{activity_name}*
üïê –í—Ä–µ–º—è: {scheduled_time}
üìç –ú–µ—Å—Ç–æ: {location}

üí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é ¬´üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å¬ª
"""
        
        await send_notification_with_menu(
            update,
            reminder_text,
            menu_type='calendar',
            parse_mode='Markdown'
        )
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        return False

async def send_achievement_notification(update, achievement_info):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
    try:
        achievement_name = achievement_info.get('name', '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ')
        achievement_icon = achievement_info.get('icon', 'üèÜ')
        description = achievement_info.get('description', '')
        
        achievement_text = f"""
üèÜ *–ù–û–í–û–ï –î–û–°–¢–ò–ñ–ï–ù–ò–ï!*

{achievement_icon} *{achievement_name}*

{description}

üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è! 
–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üöÄ
"""
        
        await send_notification_with_menu(
            update,
            achievement_text,
            menu_type='main',
            parse_mode='Markdown'
        )
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏: {e}")
        return False

async def send_system_notification(update, notification_data):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    try:
        title = notification_data.get('title', '–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')
        message = notification_data.get('message', '')
        notification_type = notification_data.get('type', 'info')
        
        # –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        icons = {
            'info': '‚ÑπÔ∏è',
            'warning': '‚ö†Ô∏è',
            'error': '‚ùå',
            'success': '‚úÖ'
        }
        
        icon = icons.get(notification_type, '‚ÑπÔ∏è')
        
        system_text = f"""
{icon} *{title}*

{message}

üí° –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é ¬´‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª
"""
        
        await send_notification_with_menu(
            update,
            system_text,
            menu_type='main',
            parse_mode='Markdown'
        )
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

async def send_preferences_update_notification(update, update_info):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
    try:
        update_type = update_info.get('type', '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
        changes = update_info.get('changes', '–∏–∑–º–µ–Ω–µ–Ω–∏—è')
        
        preferences_text = f"""
‚öôÔ∏è *–û–ë–ù–û–í–õ–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö*

‚úÖ –í–∞—à–∏ {update_type} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!

{changes}

üí° –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–µ–Ω—é ¬´üéØ –ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã¬ª
"""
        
        await send_notification_with_menu(
            update,
            preferences_text,
            menu_type='interests',
            parse_mode='Markdown'
        )
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö: {e}")
        return False

async def handle_notification_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        test_notification = {
            'title': '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
            'message': '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã.',
            'type': 'info'
        }
        
        await send_system_notification(update, test_notification)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await send_notification_with_menu(
            update,
            "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            menu_type='main'
        )

def setup_notification_handlers(application: Application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        from telegram.ext import CommandHandler
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        application.add_handler(CommandHandler("test_notification", handle_notification_command))
        
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")