import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler, CommandHandler, MessageHandler, filters
from activities.services.anonymous_coffee_service import anonymous_coffee_service
from employees.models import Employee

logger = logging.getLogger(__name__)

async def start_coffee_scheduling(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏"""
    try:
        user_id = update.effective_user.id
        command = update.message.text
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º meeting_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        if '_' in command:
            meeting_id = command.split('_')[-1]
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        employee = await Employee.objects.aget(telegram_id=user_id)
        
        # –ù–∞—á–∏–Ω–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        success, result = await anonymous_coffee_service.handle_meeting_scheduling(meeting_id, employee)
        
        if not success:
            await update.message.reply_text(result)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['current_meeting'] = {
            'meeting_id': meeting_id,
            'meeting': result['meeting'],
            'partner': result['partner'],
            'employee_code': result['employee_code'],
            'recognition_sign': result['recognition_sign']
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="coffee_send_message")],
            [InlineKeyboardButton("üìÖ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É", callback_data="coffee_propose_meeting")],
            [InlineKeyboardButton("‚ùå –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞", callback_data="coffee_emergency_stop")],
            [InlineKeyboardButton("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="coffee_instructions")],
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"""üé≠ *–ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –¢–ê–ô–ù–û–ô –í–°–¢–†–ï–ß–ò*

ü§´ –û–±—â–∞–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞-–ø–æ—Å—Ä–µ–¥–Ω–∏–∫–∞
üìã –í–∞—à –∫–æ–¥: `{result['employee_code']}`
üéØ –û–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫: *{result['recognition_sign']}*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:""",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Employee.DoesNotExist:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ —Å–∏—Å—Ç–µ–º–µ.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_coffee_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏"""
    user_id = update.effective_user.id
    
    if 'current_meeting' not in context.user_data:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é.")
        return
    
    meeting_data = context.user_data['current_meeting']
    message_text = update.message.text
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞-–ø–æ—Å—Ä–µ–¥–Ω–∏–∫–∞
    employee = await Employee.objects.aget(telegram_id=user_id)
    success = await anonymous_coffee_service.send_message_via_bot(
        meeting_data['meeting'], employee, message_text
    )
    
    if success:
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∞—Ä—Ç–Ω–µ—Ä—É!")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")

async def handle_coffee_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data == 'coffee_send_message':
        await query.edit_message_text(
            "üí¨ *–û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø*\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –±–æ—Ç –ø–µ—Ä–µ—à–ª–µ—Ç –µ–≥–æ –≤–∞—à–µ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É –∞–Ω–æ–Ω–∏–º–Ω–æ.\n\n"
            "–ü–∞—Ä—Ç–Ω–µ—Ä —É–≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏.",
            parse_mode='Markdown'
        )
        
    elif data == 'coffee_propose_meeting':
        await show_meeting_proposal_menu(query, context)
        
    elif data == 'coffee_emergency_stop':
        await handle_emergency_stop_request(query, context)
        
    elif data == 'coffee_instructions':
        await show_coffee_instructions(query, context)

async def show_meeting_proposal_menu(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏"""
    meeting_data = context.user_data['current_meeting']
    
    keyboard = [
        [InlineKeyboardButton("üïê –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 10:00-12:00", callback_data="prop_mon_10")],
        [InlineKeyboardButton("üïê –í—Ç–æ—Ä–Ω–∏–∫ 14:00-16:00", callback_data="prop_tue_14")],
        [InlineKeyboardButton("üïê –°—Ä–µ–¥–∞ 12:00-14:00", callback_data="prop_wed_12")],
        [InlineKeyboardButton("üïê –ß–µ—Ç–≤–µ—Ä–≥ 16:00-18:00", callback_data="prop_thu_16")],
        [InlineKeyboardButton("üïê –ü—è—Ç–Ω–∏—Ü–∞ 11:00-13:00", callback_data="prop_fri_11")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="coffee_back")],
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üìÖ *–ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –í–°–¢–†–ï–ß–ò*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç:\n"
        "(–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–æ 3 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_emergency_stop_request(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="emergency_confirm")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="coffee_back")],
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üö® *–≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê*\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É?\n\n"
        "‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "‚Ä¢ –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç –≤—Å—Ç—Ä–µ—á—É\n"
        "‚Ä¢ –£–≤–µ–¥–æ–º–∏—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n"
        "‚Ä¢ –ë—É–¥–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ —Ä–∞–∑–æ–±—Ä–∞–Ω–æ\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤ –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞—è—Ö!",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_coffee_instructions(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –¢–∞–π–Ω–æ–º—É –∫–æ—Ñ–µ"""
    meeting_data = context.user_data['current_meeting']
    
    instructions = f"""üé≠ *–ò–ù–°–¢–†–£–ö–¶–ò–Ø –¢–ê–ô–ù–û–ì–û –ö–û–§–ï*

ü§´ *–°–û–•–†–ê–ù–Ø–ô–¢–ï –¢–ê–ô–ù–£*
‚Ä¢ –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π—Ç–µ —Å–≤–æ—é –ª–∏—á–Ω–æ—Å—Ç—å
‚Ä¢ –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å —É–∑–Ω–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∑–∞—Ä–∞–Ω–µ–µ
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∫–æ–¥—ã –¥–ª—è –æ–±—â–µ–Ω–∏—è

üí¨ *–û–ë–©–ï–ù–ò–ï –ß–ï–†–ï–ó –ë–û–¢–ê*
‚Ä¢ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–¥—É—Ç —á–µ—Ä–µ–∑ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–∞
‚Ä¢ –ë–æ—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å
‚Ä¢ –ú–∞–∫—Å. 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏ –æ—Ç –∫–∞–∂–¥–æ–≥–æ

üìÖ *–ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –í–°–¢–†–ï–ß–ò*
1. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –≤—Ä–µ–º—è/–º–µ—Å—Ç–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
2. –ü–∞—Ä—Ç–Ω–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –¥—Ä—É–≥–æ–µ
3. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏

üéØ *–û–ü–û–ó–ù–ê–ù–ò–ï –ù–ê –ú–ï–°–¢–ï*
‚Ä¢ –í–∞—à –∫–æ–¥: `{meeting_data['employee_code']}`
‚Ä¢ –û–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫: *{meeting_data['recognition_sign']}*
‚Ä¢ –§–æ—Ç–æ (–∑–∞ 5 –º–∏–Ω –¥–æ –≤—Å—Ç—Ä–µ—á–∏, –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ)

üö® *–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨*
‚Ä¢ /emergency_stop - —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
‚Ä¢ –í—Å–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –∞–Ω–æ–Ω–∏–º–Ω–æ —Ä–∞–∑–±–∏—Ä–∞—é—Ç—Å—è
‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω 24/7

–£–¥–∞—á–∏ –≤ –≤–∞—à–µ–º —Ç–∞–π–Ω–æ–º –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–∏! üé™"""
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="coffee_back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(instructions, reply_markup=reply_markup, parse_mode='Markdown')

def setup_secret_coffee_handlers(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¢–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ"""
    application.add_handler(CommandHandler("schedule_meeting", start_coffee_scheduling))
    application.add_handler(CallbackQueryHandler(handle_coffee_callback, pattern="^coffee_"))
    application.add_handler(CallbackQueryHandler(handle_coffee_callback, pattern="^prop_"))
    application.add_handler(CallbackQueryHandler(handle_coffee_callback, pattern="^emergency_"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_coffee_message))