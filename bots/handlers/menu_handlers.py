from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
from bots.services.redis_service import redis_service
import logging
from employees.utils import PreferenceManager
from employees.models import Employee
from bots.menu_manager import MenuManager
from asgiref.sync import sync_to_async
from bots.utils.message_utils import reply_with_menu

logger = logging.getLogger(__name__)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏"""
    menu_text = await MenuManager.create_main_menu_message()
    await reply_with_menu(update, menu_text, menu_type='main', parse_mode='Markdown')

async def handle_activity_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    query = update.callback_query
    try:
        await query.answer()
    except Exception as e:
        logger.warning(f"Failed to answer activity selection callback: {e}")
    
    user_id = query.from_user.id
    activity_type = query.data.replace('activity_', '')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['selected_activity'] = activity_type
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    activity_names = {
        'secret_coffee': '‚òïÔ∏è –¢–∞–π–Ω—ã–π –∫–æ—Ñ–µ',
        'chess': '‚ôüÔ∏è –®–∞—Ö–º–∞—Ç—ã',
        'ping_pong': 'üèì –ù–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å',
        'photo_quest': 'üì∏ –§–æ—Ç–æ–∫–≤–µ—Å—Ç—ã',
        'workshop': 'üß† –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã',
    }
    
    activity_name = activity_names.get(activity_type, activity_type)
    
    activity_text = f"""
*{activity_name}*

ü§ñ *–ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏*

–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞:

üë§ *–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å* - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
üéØ *–ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã* - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏
üìÖ *–ö–∞–ª–µ–Ω–¥–∞—Ä—å* - –≤–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è

üí° –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ —É–¥–æ–±–Ω–æ–µ –º–µ–Ω—é!
"""
    
    await reply_with_menu(update, activity_text, menu_type='main', parse_mode='Markdown')

async def handle_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    query = update.callback_query
    try:
        await query.answer()
    except Exception as e:
        logger.warning(f"Failed to answer subscription callback: {e}")
    
    user_id = query.from_user.id
    data = query.data

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ back_<target> ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
    if data.startswith('back_'):
        target = data.replace('back_', '')
        try:
            if target in ('main', 'to_main', 'back_main'):
                menu_text = await MenuManager.create_main_menu_message()
                await reply_with_menu(update, menu_text, menu_type='main', parse_mode='Markdown')
            elif target == 'profile':
                from employees.models import Employee
                employee = await Employee.objects.aget(telegram_id=user_id)
                profile_text = await MenuManager.create_profile_menu(employee)
                await reply_with_menu(update, profile_text, menu_type='profile', parse_mode='Markdown')
            elif target == 'help':
                help_text = await MenuManager.create_help_menu()
                await reply_with_menu(update, help_text, menu_type='help', parse_mode='Markdown')
            elif target == 'settings':
                settings_text = await MenuManager.create_settings_menu()
                await reply_with_menu(update, settings_text, menu_type='settings', parse_mode='Markdown')
            elif target == 'interests':
                from employees.models import Employee
                employee = await Employee.objects.aget(telegram_id=user_id)
                interests_text = await MenuManager.create_interests_menu(employee)
                await reply_with_menu(update, interests_text, menu_type='interests', parse_mode='Markdown')
            else:
                menu_text = await MenuManager.create_main_menu_message()
                await reply_with_menu(update, menu_text, menu_type='main', parse_mode='Markdown')
        except Exception:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ back callback '{data}'")
            menu_text = await MenuManager.create_main_menu_message()
            await reply_with_menu(update, menu_text, menu_type='main', parse_mode='Markdown')
        return
    
    if data.startswith('subscribe_'):
        activity_type = data.replace('subscribe_', '')
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
        subscribed_text = "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!"
        await reply_with_menu(update, subscribed_text, menu_type='main', parse_mode='Markdown')
        
    elif data.startswith('unsubscribe_'):
        activity_type = data.replace('unsubscribe_', '')
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø–∏—Å–∫–∏
        unsubscribed_text = "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
        await reply_with_menu(update, unsubscribed_text, menu_type='main', parse_mode='Markdown')

async def handle_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (menu_*) - –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    query = update.callback_query
    try:
        await query.answer()
    except Exception as e:
        logger.warning(f"Failed to answer menu callback: {e}")

    user_id = query.from_user.id
    logger.info(f"handle_menu_callback invoked: user={user_id} data={query.data}")

    try:
        employee = await Employee.objects.aget(telegram_id=user_id)
    except Employee.DoesNotExist:
        await query.edit_message_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
        return

    data = query.data

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∞–º
    if data == 'menu_profile':
        profile_text = await MenuManager.create_profile_menu(employee)
        await reply_with_menu(update, profile_text, menu_type='profile', parse_mode='Markdown')

    elif data == 'menu_interests':
        interests_text = await MenuManager.create_interests_menu(employee)
        await reply_with_menu(update, interests_text, menu_type='interests', parse_mode='Markdown')

    elif data == 'menu_calendar':
        calendar_text = await MenuManager.create_calendar_menu(employee)
        await reply_with_menu(update, calendar_text, menu_type='calendar', parse_mode='Markdown')

    elif data == 'menu_achievements':
        achievements_text = await MenuManager.create_achievements_menu(employee)
        await reply_with_menu(update, achievements_text, menu_type='main', parse_mode='Markdown')

    elif data == 'menu_help':
        help_text = await MenuManager.create_help_menu()
        await reply_with_menu(update, help_text, menu_type='help', parse_mode='Markdown')

    elif data == 'menu_settings':
        settings_text = await MenuManager.create_settings_menu()
        await reply_with_menu(update, settings_text, menu_type='settings', parse_mode='Markdown')

    elif data == 'back_main' or data == 'back_to_main':
        menu_text = await MenuManager.create_main_menu_message()
        await reply_with_menu(update, menu_text, menu_type='main', parse_mode='Markdown')

    # –ü—Ä–æ—Ñ–∏–ª—å - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    elif data.startswith('profile_'):
        action = data.replace('profile_', '')
        logger.info(f"Profile action requested: {action} for user {user_id}")
        if action == 'stats':
            try:
                stats_list = await sync_to_async(list)(employee.get_activity_stats())
                stats_lines = []
                for s in stats_list:
                    activity_label = s.get('activity_type') or s.get('activity_type', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    count = s.get('count', s.get('count', 0))
                    stats_lines.append(f"‚Ä¢ {activity_label}: {count}")
                if not stats_lines:
                    stats_lines = ["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º"]
            except Exception:
                stats_lines = ["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"]

            try:
                interests = await sync_to_async(employee.get_interests_list)()
                if interests:
                    interests_text = ', '.join([f"{i.emoji} {i.name}" for i in interests])
                else:
                    interests_text = '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'
            except Exception:
                interests_text = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã'

            text = "üìà *–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
            text += "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n"
            text += "\n".join(stats_lines) + "\n\n"
            text += f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {interests_text}\n"
            await reply_with_menu(update, text, menu_type='profile', parse_mode='Markdown')
            
        elif action == 'achievements':
            try:
                ach_list = await sync_to_async(list)(employee.achievements.select_related('achievement').all())
                achievements_lines = []
                for ea in ach_list:
                    icon = getattr(ea.achievement, 'icon', '') or ''
                    name = getattr(ea.achievement, 'name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    achievements_lines.append(f"‚úÖ {icon} {name}")
                if not achievements_lines:
                    achievements_lines = ["–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö!"]
            except Exception:
                achievements_lines = ["–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"]

            text = "üèÖ *–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è*\n\n" + "\n".join(achievements_lines)
            await reply_with_menu(update, text, menu_type='main', parse_mode='Markdown')
            
        elif action == 'activity':
            try:
                from django.db.models import Count
                from django.db.models.functions import ExtractYear, ExtractMonth
                import calendar

                qs = employee.activities.annotate(
                    year=ExtractYear('activity__scheduled_date'),
                    month=ExtractMonth('activity__scheduled_date')
                ).values('year', 'month').annotate(count=Count('id')).order_by('-year', '-month')

                monthly = await sync_to_async(list)(qs)

                if monthly:
                    lines = []
                    for r in monthly:
                        y = r.get('year') or ''
                        m = r.get('month') or 0
                        month_name = calendar.month_name[m] if m and m <= 12 else str(m)
                        lines.append(f"‚Ä¢ {month_name} {y}: {r.get('count', 0)}")
                else:
                    lines = ["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –º–µ—Å—è—Ü—ã"]
            except Exception:
                logger.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –º–µ—Å—è—Ü–∞–º –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è")
                lines = ["–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"]

            text = "üìÖ *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –º–µ—Å—è—Ü–∞–º*\n\n" + "\n".join(lines)
            await reply_with_menu(update, text, menu_type='profile', parse_mode='Markdown')
            
        else:
            profile_text = await MenuManager.create_profile_menu(employee)
            await reply_with_menu(update, profile_text, menu_type='profile', parse_mode='Markdown')

    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    elif data.startswith('achievements_'):
        action = data.replace('achievements_', '')
        if action == 'progress':
            await reply_with_menu(update, "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω.", menu_type='main', parse_mode='Markdown')
        elif action == 'leaderboard':
            await reply_with_menu(update, "üèÜ –¢–æ–ø —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", menu_type='main', parse_mode='Markdown')
        else:
            achievements_text = await MenuManager.create_achievements_menu(employee)
            await reply_with_menu(update, achievements_text, menu_type='main', parse_mode='Markdown')

    # –ü–æ–º–æ—â—å ‚Äî —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    elif data.startswith('help_'):
        topic = data.replace('help_', '')
        help_topics = {
            'interests': '‚ùì –ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã? –û—Ç–∫—Ä–æ–π—Ç–µ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Üí –ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏.',
            'optout': '‚ùì –ö–∞–∫ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏? –ù–∞–∂–º–∏—Ç–µ ¬´–û—Ç–ø–∏—Å–∞—Ç—å—Å—è¬ª –≤ –º–µ–Ω—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.',
            'notifications': '‚ùì –ù–µ –ø—Ä–∏—Ö–æ–¥—è—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è? –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ /preferences –∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—ã.',
            'contact_admin': 'üìû –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: @hr_admin'
        }
        text = help_topics.get(topic, '–¢–µ–º–∞ –ø–æ–º–æ—â–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        await reply_with_menu(update, text, menu_type='help', parse_mode='Markdown')

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    elif data.startswith('settings_'):
        key = data.replace('settings_', '')
        settings_text = await MenuManager.create_settings_menu()
        await reply_with_menu(update, settings_text, menu_type='settings', parse_mode='Markdown')

    # –ö–∞–ª–µ–Ω–¥–∞—Ä—å: –¥–µ–π—Å—Ç–≤–∏—è
    elif data == 'confirm_participation':
        await reply_with_menu(update, "‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ. –°–ø–∞—Å–∏–±–æ!", menu_type='calendar', parse_mode='Markdown')
    elif data == 'decline_activity':
        await reply_with_menu(update, "‚è≠Ô∏è –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —É—á–∞—Å—Ç–∏—è. –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", menu_type='calendar', parse_mode='Markdown')
    elif data == 'refresh_calendar':
        calendar_text = await MenuManager.create_calendar_menu(employee)
        await reply_with_menu(update, calendar_text, menu_type='calendar', parse_mode='Markdown')

    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        menu_text = await MenuManager.create_main_menu_message()
        await reply_with_menu(update, menu_text, menu_type='main', parse_mode='Markdown')

def setup_menu_handlers(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–µ–Ω—é (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    application.add_handler(CallbackQueryHandler(handle_activity_selection, pattern="^activity_"))
    application.add_handler(CallbackQueryHandler(handle_subscription, pattern="^(subscribe|unsubscribe)_"))
    application.add_handler(CallbackQueryHandler(show_main_menu, pattern="^back_to_main$"))
    
    # Menu navigation (main menu buttons)
    application.add_handler(CallbackQueryHandler(handle_menu_callback, pattern="^menu_"))
    
    # Profile submenu callbacks (profile_...)
    application.add_handler(CallbackQueryHandler(handle_menu_callback, pattern="^profile_"))
    
    # Catch any back_* callbacks (back_main, back_help, back_settings, etc.)
    application.add_handler(CallbackQueryHandler(handle_menu_callback, pattern="^back_"))
    application.add_handler(CallbackQueryHandler(handle_menu_callback, pattern="^back_main$"))