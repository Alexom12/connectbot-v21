from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
from bots.services.redis_service import redis_service
import logging

logger = logging.getLogger(__name__)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏"""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞
    user_data = await redis_service.get_user_data(user_id)
    
    keyboard = [
        [InlineKeyboardButton("‚òïÔ∏è –¢–∞–π–Ω—ã–π –∫–æ—Ñ–µ", callback_data="activity_secret_coffee")],
        [InlineKeyboardButton("‚ôüÔ∏è –®–∞—Ö–º–∞—Ç—ã", callback_data="activity_chess")],
        [InlineKeyboardButton("üèì –ù–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å", callback_data="activity_ping_pong")],
        [InlineKeyboardButton("üì∏ –§–æ—Ç–æ–∫–≤–µ—Å—Ç—ã", callback_data="activity_photo_quest")],
        [InlineKeyboardButton("üß† –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã", callback_data="activity_workshop")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
        [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üéØ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ConnectBot*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è —É—á–∞—Å—Ç–∏—è:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_activity_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    activity_type = query.data.replace('activity_', '')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['selected_activity'] = activity_type
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
    await show_activity_management(query, context, activity_type)

async def show_activity_management(query, context, activity_type):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é"""
    from activities.services import ActivityManager
    from employees.models import Employee
    
    user_id = query.from_user.id
    activity_names = {
        'secret_coffee': '‚òïÔ∏è –¢–∞–π–Ω—ã–π –∫–æ—Ñ–µ',
        'chess': '‚ôüÔ∏è –®–∞—Ö–º–∞—Ç—ã',
        'ping_pong': 'üèì –ù–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å',
        'photo_quest': 'üì∏ –§–æ—Ç–æ–∫–≤–µ—Å—Ç—ã',
        'workshop': 'üß† –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã',
    }
    
    activity_name = activity_names.get(activity_type, activity_type)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    try:
        employee = await Employee.objects.aget(telegram_id=user_id)
        manager = ActivityManager()
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
        is_subscribed = True  # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
        
        if is_subscribed:
            status_text = "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
            button_text = "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è"
            callback_data = f"unsubscribe_{activity_type}"
        else:
            status_text = "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
            button_text = "‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
            callback_data = f"subscribe_{activity_type}"
            
    except Employee.DoesNotExist:
        status_text = "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
        button_text = "üë§ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
        callback_data = "complete_registration"
    
    keyboard = [
        [InlineKeyboardButton(button_text, callback_data=callback_data)],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"stats_{activity_type}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")],
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"*{activity_name}*\n\n"
        f"{status_text}\n\n"
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏–µ–º:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data.startswith('subscribe_'):
        activity_type = data.replace('subscribe_', '')
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
        await query.edit_message_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!")
        
    elif data.startswith('unsubscribe_'):
        activity_type = data.replace('unsubscribe_', '')
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø–∏—Å–∫–∏
        await query.edit_message_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(update, context)

def setup_menu_handlers(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–µ–Ω—é"""
    application.add_handler(CallbackQueryHandler(handle_activity_selection, pattern="^activity_"))
    application.add_handler(CallbackQueryHandler(handle_subscription, pattern="^(subscribe|unsubscribe)_"))
    application.add_handler(CallbackQueryHandler(show_main_menu, pattern="^back_to_main$"))