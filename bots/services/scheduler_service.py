import logging
import asyncio
from datetime import datetime, timedelta
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
from django.utils import timezone
from config.settings import CONNECTBOT_SETTINGS
from activities.services.anonymous_coffee_service import anonymous_coffee_service
from activities.services.activity_manager import ActivityManager

logger = logging.getLogger(__name__)

class SchedulerService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –∑–∞–¥–∞—á"""
    
    def __init__(self):
        self.scheduler = BackgroundScheduler()
        self.is_running = False
    
    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            if self.is_running:
                logger.warning("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏
            self._setup_jobs()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            self.scheduler.start()
            self.is_running = True
            
            logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
            asyncio.create_task(self._create_weekly_sessions_async())
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            if self.scheduler.running:
                self.scheduler.shutdown()
                self.is_running = False
                logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    def _setup_jobs(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
        
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Å–µ—Å—Å–∏–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π - –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 09:00
        self.scheduler.add_job(
            self._create_weekly_sessions_async,
            trigger=CronTrigger(
                day_of_week='mon', 
                hour=9, 
                minute=0,
                timezone='Europe/Moscow'
            ),
            id='create_weekly_sessions',
            name='–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Å–µ—Å—Å–∏–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π',
            replace_existing=True
        )
        
        # 2. Matching –¥–ª—è –¢–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ - –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00
        self.scheduler.add_job(
            self._run_coffee_matching_async,
            trigger=CronTrigger(
                day_of_week='mon', 
                hour=10, 
                minute=0,
                timezone='Europe/Moscow'
            ),
            id='coffee_matching',
            name='Matching –¥–ª—è –¢–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ',
            replace_existing=True
        )
        
        # 3. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00
        self.scheduler.add_job(
            self._send_daily_reminders_async,
            trigger=CronTrigger(
                hour=9, 
                minute=0,
                timezone='Europe/Moscow'
            ),
            id='daily_reminders',
            name='–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
            replace_existing=True
        )
        
        # 4. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤—Å—Ç—Ä–µ—á–∞—Ö - –∫–∞–∂–¥—ã–π —á–∞—Å —Å 08:00 –¥–æ 20:00
        self.scheduler.add_job(
            self._send_meeting_reminders_async,
            trigger=CronTrigger(
                hour='8-20', 
                minute=0,
                timezone='Europe/Moscow'
            ),
            id='meeting_reminders',
            name='–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤—Å—Ç—Ä–µ—á–∞—Ö',
            replace_existing=True
        )
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 18:00
        self.scheduler.add_job(
            self._check_inactive_meetings_async,
            trigger=CronTrigger(
                hour=18, 
                minute=0,
                timezone='Europe/Moscow'
            ),
            id='inactive_meetings_check',
            name='–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á',
            replace_existing=True
        )
        
        # 6. –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø—è—Ç–Ω–∏—Ü–∞ –≤ 17:00
        self.scheduler.add_job(
            self._send_weekly_stats_async,
            trigger=CronTrigger(
                day_of_week='fri', 
                hour=17, 
                minute=0,
                timezone='Europe/Moscow'
            ),
            id='weekly_stats',
            name='–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
            replace_existing=True
        )
        
        logger.info("‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    async def _create_weekly_sessions_async(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Å–µ—Å—Å–∏–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞)"""
        try:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Å–µ—Å—Å–∏–π...")
            manager = ActivityManager()
            success = await manager.create_weekly_sessions()
            
            if success:
                logger.info("‚úÖ –ù–µ–¥–µ–ª—å–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–π: {e}")
    
    async def _run_coffee_matching_async(self):
        """–ó–∞–ø—É—Å–∫ matching –¥–ª—è –¢–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞)"""
        try:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ matching –¢–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ...")
            success = await anonymous_coffee_service.run_weekly_matching()
            
            if success:
                logger.info("‚úÖ Matching –¢–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ matching –¢–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ matching –¢–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ: {e}")
    
    async def _send_daily_reminders_async(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            logger.info("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
            
            from activities.models import ActivityParticipant, ActivitySession
            from datetime import date
            from bots.handlers.notification_handlers import send_telegram_message
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é
            today = timezone.now().date()
            week_start = today - timedelta(days=today.weekday())
            
            # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é
            sessions = ActivitySession.objects.filter(
                week_start=week_start,
                status='active'
            )
            
            reminder_count = 0
            
            async for session in sessions:
                # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç –ø–∞—Ä—ã
                participants = ActivityParticipant.objects.filter(
                    activity_session=session,
                    subscription_status=True
                ).select_related('employee')
                
                async for participant in participants:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–∞—Ä–∞
                    has_pair = await self._check_if_has_pair(session, participant.employee)
                    
                    if not has_pair:
                        message = self._get_reminder_message(session.activity_type)
                        success = await send_telegram_message(
                            participant.employee.telegram_id, 
                            message
                        )
                        if success:
                            reminder_count += 1
            
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {reminder_count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
    
    async def _send_meeting_reminders_async(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö"""
        try:
            logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å—Ç—Ä–µ—á –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
            
            from activities.models import SecretCoffeeMeeting
            from bots.handlers.notification_handlers import send_telegram_message
            
            now = timezone.now()
            reminder_time = now + timedelta(hours=1)  # –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –∑–∞ 1 —á–∞—Å
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å—Ç—Ä–µ—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–Ω—É—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞
            upcoming_meetings = SecretCoffeeMeeting.objects.filter(
                meeting_date__gte=now,
                meeting_date__lte=reminder_time,
                status='confirmed'
            ).select_related('employee1', 'employee2')
            
            reminder_count = 0
            
            async for meeting in upcoming_meetings:
                message = f"""‚è∞ *–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –û –í–°–¢–†–ï–ß–ï*

–ß–µ—Ä–µ–∑ 1 —á–∞—Å —É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –≤—Å—Ç—Ä–µ—á–∞ –¢–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ!

üóìÔ∏è {meeting.meeting_date.strftime('%d.%m.%Y %H:%M')}
üìç {meeting.meeting_location}
üéØ –ö–æ–¥: `{meeting.employee1_code if meeting.employee1 else meeting.employee2_code}`

–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫: *{meeting.recognition_sign}*"""
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–æ–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
                success1 = await send_telegram_message(meeting.employee1.telegram_id, message)
                success2 = await send_telegram_message(meeting.employee2.telegram_id, message)
                
                if success1 or success2:
                    reminder_count += 1
            
            if reminder_count > 0:
                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {reminder_count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –≤—Å—Ç—Ä–µ—á–∞—Ö")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –≤—Å—Ç—Ä–µ—á–∞—Ö: {e}")
    
    async def _check_inactive_meetings_async(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á"""
        try:
            logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á...")
            
            from activities.models import SecretCoffeeMeeting
            from datetime import timedelta
            
            deadline = timezone.now() - timedelta(days=2)  # 2 –¥–Ω—è –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å—Ç—Ä–µ—á–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä—à–µ 2 –¥–Ω–µ–π
            inactive_meetings = SecretCoffeeMeeting.objects.filter(
                status='scheduling',
                created_at__lte=deadline
            ).select_related('employee1', 'employee2')
            
            inactive_count = 0
            
            async for meeting in inactive_meetings:
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å—Ç—Ä–µ—á—É –≤ —Å—Ç–∞—Ç—É—Å "–Ω–µ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å"
                meeting.status = 'failed'
                await meeting.asave()
                inactive_count += 1
                
                logger.info(f"‚ö†Ô∏è –í—Å—Ç—Ä–µ—á–∞ {meeting.meeting_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å '–Ω–µ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å'")
            
            if inactive_count > 0:
                logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {inactive_count} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á: {e}")
    
    async def _send_weekly_stats_async(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω–∞–º"""
        try:
            logger.info("üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
            
            from activities.models import ActivitySession, SecretCoffeeMeeting
            from employees.models import Employee
            from config.settings import SUPER_ADMIN_ID
            from bots.handlers.notification_handlers import send_telegram_message
            
            today = timezone.now().date()
            week_start = today - timedelta(days=today.weekday())
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_sessions = await ActivitySession.objects.filter(
                week_start=week_start
            ).acount()
            
            coffee_meetings = await SecretCoffeeMeeting.objects.filter(
                activity_session__week_start=week_start
            ).acount()
            
            completed_meetings = await SecretCoffeeMeeting.objects.filter(
                activity_session__week_start=week_start,
                status='completed'
            ).acount()
            
            total_participants = await Employee.objects.filter(
                is_active=True
            ).acount()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            stats_message = f"""üìä *–ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê CONNECTBOT*

üìÖ –ù–µ–¥–µ–ª—è: {week_start.strftime('%d.%m.%Y')}

üéØ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:
‚Ä¢ –°–µ—Å—Å–∏–π —Å–æ–∑–¥–∞–Ω–æ: {total_sessions}
‚Ä¢ –¢–∞–π–Ω—ã—Ö –∫–æ—Ñ–µ: {coffee_meetings}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á: {completed_meetings}

üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:
‚Ä¢ –í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {total_participants}
‚Ä¢ –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: {round((coffee_meetings * 2 / total_participants) * 100) if total_participants > 0 else 0}%

üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å matching: {round((completed_meetings / coffee_meetings) * 100) if coffee_meetings > 0 else 0}%

–•–æ—Ä–æ—à–∏—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö! üéâ"""
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É
            if SUPER_ADMIN_ID:
                await send_telegram_message(SUPER_ADMIN_ID, stats_message)
            
            logger.info("‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def _check_if_has_pair(self, session, employee):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–∞—Ä–∞ –≤ —Å–µ—Å—Å–∏–∏"""
        from activities.models import ActivityPair
        
        try:
            pair1 = await ActivityPair.objects.filter(
                activity_session=session,
                employee1=employee
            ).aexists()
            
            pair2 = await ActivityPair.objects.filter(
                activity_session=session,
                employee2=employee
            ).aexists()
            
            return pair1 or pair2
            
        except Exception:
            return False
    
    def _get_reminder_message(self, activity_type):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        messages = {
            'secret_coffee': """‚òïÔ∏è *–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï: –¢–ê–ô–ù–´–ô –ö–û–§–ï*

–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –¢–∞–π–Ω—ã–π –∫–æ—Ñ–µ!

–ï—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏, —Å–∞–º–æ–µ –≤—Ä–µ–º—è —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å! üé≠

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ–Ω—é –±–æ—Ç–∞ ‚Üí –¢–∞–π–Ω—ã–π –∫–æ—Ñ–µ""",
            
            'chess': """‚ôüÔ∏è *–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï: –®–ê–•–ú–ê–¢–´*

–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å—ã–≥—Ä–∞—Ç—å —à–∞—Ö–º–∞—Ç–Ω—É—é –ø–∞—Ä—Ç–∏—é –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ!

–ù–∞–π–¥–∏—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –∏–≥—Ä—É üèÜ""",
            
            'ping_pong': """üèì *–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï: –ù–ê–°–¢–û–õ–¨–ù–´–ô –¢–ï–ù–ù–ò–°*

–°–∞–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –≤ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å!

–ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∏–≥—Ä—É —Å –∫–æ–ª–ª–µ–≥–æ–π üéØ"""
        }
        
        return messages.get(activity_type, "üéØ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ!")

    def get_scheduler_status(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if not self.scheduler.running:
            return {
                'status': 'stopped',
                'jobs': []
            }
        
        jobs = []
        for job in self.scheduler.get_jobs():
            jobs.append({
                'id': job.id,
                'name': job.name,
                'next_run': job.next_run_time.strftime('%Y-%m-%d %H:%M:%S') if job.next_run_time else 'None',
                'trigger': str(job.trigger)
            })
        
        return {
            'status': 'running',
            'job_count': len(jobs),
            'jobs': jobs
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler_service = SchedulerService()