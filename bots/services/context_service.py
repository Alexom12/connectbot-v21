"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É–º–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
"""
import logging
from asgiref.sync import sync_to_async
from django.utils import timezone
from datetime import timedelta
from employees.models import Employee
from activities.models import Activity, Meeting
from bots.services.notification_service import notification_service

logger = logging.getLogger(__name__)


class ContextService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–º–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫"""
    
    @staticmethod
    async def get_user_context(user_id):
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            dict: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        """
        try:
            employee = await Employee.objects.aget(telegram_id=user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            now = timezone.now()
            current_hour = now.hour
            current_weekday = now.weekday()
            current_date = now.date()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            activity_profile = await ContextService._analyze_activity_profile(employee)
            time_context = await ContextService._analyze_time_context(current_hour, current_weekday)
            notification_context = await notification_service.get_notification_summary(user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context = {
                'user_id': user_id,
                'employee': employee,
                'time_context': time_context,
                'activity_profile': activity_profile,
                'notifications': notification_context,
                'quick_actions': await ContextService._get_quick_actions(
                    employee, time_context, notification_context
                ),
                'smart_tips': await ContextService._get_smart_tips(
                    activity_profile, time_context, notification_context
                ),
                'priority_level': await ContextService._calculate_priority_level(notification_context)
            }
            
            logger.debug(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {context['priority_level']}")
            return context
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return await ContextService._get_default_context(user_id)
    
    @staticmethod
    async def _analyze_activity_profile(employee):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–∏—è –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö
            total_activities = await Activity.objects.filter(
                participants__employee=employee
            ).acount()
            
            # –ê–Ω–∞–ª–∏–∑ –≤—Å—Ç—Ä–µ—á
            # SecretCoffeeMeeting stores participants in employee1/employee2
            from django.db.models import Q
            total_meetings = await Meeting.objects.filter(
                Q(employee1=employee) | Q(employee2=employee)
            ).acount()
            
            # –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç—ã —É—á–∞—Å—Ç–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
            month_ago = timezone.now() - timedelta(days=30)
            recent_activities = await Activity.objects.filter(
                participants__employee=employee,
                scheduled_date__gte=month_ago
            ).acount()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if recent_activities >= 10:
                activity_level = "high"
                activity_label = "–ê–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ üèÜ"
            elif recent_activities >= 5:
                activity_level = "medium" 
                activity_label = "–†–µ–≥—É–ª—è—Ä–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ üëç"
            elif recent_activities >= 1:
                activity_level = "low"
                activity_label = "–ù–æ–≤–∏—á–æ–∫ üå±"
            else:
                activity_level = "new"
                activity_label = "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å üéØ"
            
            return {
                'total_activities': total_activities,
                'total_meetings': total_meetings,
                'recent_activities': recent_activities,
                'activity_level': activity_level,
                'activity_label': activity_label,
                'experience_level': await ContextService._calculate_experience_level(total_activities)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            return {
                'total_activities': 0,
                'total_meetings': 0,
                'recent_activities': 0,
                'activity_level': 'new',
                'activity_label': '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å üéØ',
                'experience_level': 'beginner'
            }
    
    @staticmethod
    async def _analyze_time_context(current_hour, current_weekday):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å—É—Ç–æ–∫
        if 5 <= current_hour < 12:
            time_of_day = "morning"
            time_label = "–£—Ç—Ä–æ ‚òÄÔ∏è"
            time_tip = "–û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–Ω—è!"
        elif 12 <= current_hour < 17:
            time_of_day = "afternoon" 
            time_label = "–î–µ–Ω—å üè¢"
            time_tip = "–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è - –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –≤—Å—Ç—Ä–µ—á!"
        elif 17 <= current_hour < 22:
            time_of_day = "evening"
            time_label = "–í–µ—á–µ—Ä üåô"
            time_tip = "–í—Ä–µ–º—è –¥–ª—è –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è"
        else:
            time_of_day = "night"
            time_label = "–ù–æ—á—å üåô"
            time_tip = "–ü–æ–∑–¥–Ω–∏–π —á–∞—Å, –æ—Ç–¥—ã—Ö–∞–π—Ç–µ!"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        if current_weekday == 0:
            day_context = "week_start"
            day_tip = "–ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ - –≤—Ä–µ–º—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á–∏!"
        elif current_weekday == 4:
            day_context = "week_end"
            day_tip = "–ö–æ–Ω–µ—Ü –Ω–µ–¥–µ–ª–∏ - –ø–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏!"
        elif current_weekday >= 5:
            day_context = "weekend"
            day_tip = "–í—ã—Ö–æ–¥–Ω—ã–µ - –≤—Ä–µ–º—è –¥–ª—è –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π!"
        else:
            day_context = "weekday"
            day_tip = "–†–∞–±–æ—á–∏–π –¥–µ–Ω—å - —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö!"
        
        return {
            'time_of_day': time_of_day,
            'time_label': time_label,
            'time_tip': time_tip,
            'day_context': day_context,
            'day_tip': day_tip,
            'current_hour': current_hour,
            'current_weekday': current_weekday
        }
    
    @staticmethod
    async def _calculate_experience_level(total_activities):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if total_activities >= 20:
            return "expert"
        elif total_activities >= 10:
            return "advanced"
        elif total_activities >= 5:
            return "intermediate"
        elif total_activities >= 1:
            return "beginner"
        else:
            return "new"
    
    @staticmethod
    async def _calculate_priority_level(notification_context):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        counts = notification_context['counts']
        
        if counts['urgent_actions'] > 0:
            return "urgent"
        elif counts['total'] >= 5:
            return "high"
        elif counts['total'] >= 3:
            return "medium"
        elif counts['total'] >= 1:
            return "low"
        else:
            return "none"
    
    @staticmethod
    async def _get_quick_actions(employee, time_context, notification_context):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        counts = notification_context['counts']
        quick_actions = []
        
        # –î–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if counts['urgent_actions'] > 0:
            quick_actions.append("üö® –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å—Ä–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        
        if counts['meetings'] > 0:
            quick_actions.append("ü§ù –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å—Ç—Ä–µ—á–∏")
        
        if counts['today_activities'] > 0:
            quick_actions.append("üìÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ")
        
        # –î–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
        if time_context['time_of_day'] == "morning":
            quick_actions.append("üìã –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å")
        
        if time_context['day_context'] == "week_start":
            quick_actions.append("üóìÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é")
        
        if time_context['day_context'] == "week_end":
            quick_actions.append("üìä –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏")
        
        # –î–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞
        activity_profile = await ContextService._analyze_activity_profile(employee)
        if activity_profile['experience_level'] == "new":
            quick_actions.append("üéØ –ù–∞—á–∞—Ç—å —Å –ø—Ä–æ—Å—Ç—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π
        return quick_actions[:4]
    
    @staticmethod
    async def _get_smart_tips(activity_profile, time_context, notification_context):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        tips = []
        counts = notification_context['counts']
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if counts['urgent_actions'] > 0:
            tips.append("üö® –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ —Å—Ä–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è!")
        
        if counts['total'] == 0:
            tips.append("üéâ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –ú–æ–∂–µ—Ç–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
        tips.append(time_context['time_tip'])
        tips.append(time_context['day_tip'])
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if activity_profile['activity_level'] == "new":
            tips.append("üí° –ù–∞—á–Ω–∏—Ç–µ —Å –¢–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ - —ç—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–æ–ª–ª–µ–≥–∞–º–∏!")
        elif activity_profile['activity_level'] == "low":
            tips.append("üåü –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π!")
        elif activity_profile['activity_level'] == "high":
            tips.append("üèÜ –í—ã - –∑–≤–µ–∑–¥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!")
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        if time_context['current_weekday'] == 0:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            tips.append("üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á –Ω–∞ –Ω–µ–¥–µ–ª—é!")
        elif time_context['current_weekday'] == 4:  # –ü—è—Ç–Ω–∏—Ü–∞
            tips.append("üéØ –ü—è—Ç–Ω–∏—Ü–∞ - –≤—Ä–µ–º—è –ø–æ–¥–≤–æ–¥–∏—Ç—å –∏—Ç–æ–≥–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—ã—Ö–æ–¥–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!")
        
        return tips
    
    @staticmethod
    async def _get_default_context(user_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            'user_id': user_id,
            'employee': None,
            'time_context': {
                'time_of_day': 'day',
                'time_label': '–î–µ–Ω—å üè¢',
                'time_tip': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
                'day_context': 'weekday',
                'day_tip': '–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!',
                'current_hour': 12,
                'current_weekday': 0
            },
            'activity_profile': {
                'total_activities': 0,
                'total_meetings': 0,
                'recent_activities': 0,
                'activity_level': 'new',
                'activity_label': '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å üéØ',
                'experience_level': 'beginner'
            },
            'notifications': {
                'counts': {'total': 0},
                'has_urgent': False,
                'has_pending': False,
                'primary_alert': None
            },
            'quick_actions': ["üéØ –ù–∞—á–∞—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ", "üìö –ò–∑—É—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"],
            'smart_tips': ["üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", "üîî –ß–∏—Å–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –æ–∂–∏–¥–∞—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"],
            'priority_level': 'none'
        }
    
    @staticmethod
    async def get_contextual_welcome(user_id):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        context = await ContextService.get_user_context(user_id)
        
        welcome_parts = []
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
        time_ctx = context['time_context']
        welcome_parts.append(f"{time_ctx['time_label']}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activity_ctx = context['activity_profile']
        welcome_parts.append(f"–í–∞—à —Å—Ç–∞—Ç—É—Å: {activity_ctx['activity_label']}")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notif_ctx = context['notifications']
        if notif_ctx['has_urgent']:
            welcome_parts.append("üö® –ï—Å—Ç—å —Å—Ä–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è!")
        elif notif_ctx['has_pending']:
            welcome_parts.append("üîî –ï—Å—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è")
        else:
            welcome_parts.append("üéâ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
        
        # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if context['quick_actions']:
            welcome_parts.append("üí° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: " + ", ".join(context['quick_actions'][:2]))
        
        return "\n".join(welcome_parts)
    
    @staticmethod
    async def get_adaptive_menu_suggestions(user_id):
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ suggestions –¥–ª—è –º–µ–Ω—é"""
        context = await ContextService.get_user_context(user_id)
        
        suggestions = {
            'highlight_section': None,
            'recommended_actions': [],
            'educational_tips': []
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º—ã–π —Ä–∞–∑–¥–µ–ª
        if context['notifications']['has_urgent']:
            suggestions['highlight_section'] = 'calendar'
        elif context['activity_profile']['experience_level'] == 'new':
            suggestions['highlight_section'] = 'interests'
        elif context['time_context']['day_context'] == 'week_start':
            suggestions['highlight_section'] = 'coffee'
        
        # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        suggestions['recommended_actions'] = context['quick_actions']
        
        # –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        suggestions['educational_tips'] = context['smart_tips']
        
        return suggestions
    
    @staticmethod
    async def log_user_interaction(user_id, action_type, menu_item, success=True):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        try:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–ª—è ML –∞–Ω–∞–ª–∏–∑–∞
            logger.info(f"–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: user={user_id}, action={action_type}, item={menu_item}, success={success}")
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –∑–Ω–∞—á–∏–º—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö
            if action_type in ['completed_task', 'joined_activity', 'confirmed_meeting']:
                # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–∏
                pass
                
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: {e}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
context_service = ContextService()