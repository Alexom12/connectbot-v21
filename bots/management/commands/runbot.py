"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞ ConnectBot
"""
import asyncio
import logging
from django.conf import settings
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from asgiref.sync import sync_to_async

logger = logging.getLogger(__name__)

class ConnectBot:
    def __init__(self):
        self.token = settings.TELEGRAM_BOT_TOKEN
        self.application = None
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        try:
            # –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –±–∞–∑–µ
            employee = await self.find_employee_by_user(user)
            
            if employee:
                await update.message.reply_text(
                    f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {employee.full_name}! üéâ\n"
                    "–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ ConnectBot."
                )
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
            else:
                await update.message.reply_text(
                    "üîê *–î–æ—Å—Ç—É–ø –∫ ConnectBot –æ–≥—Ä–∞–Ω–∏—á–µ–Ω*\n\n"
                    "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –∫–æ–º–ø–∞–Ω–∏–∏.\n"
                    "–ï—Å–ª–∏ –≤—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    @sync_to_async
    def find_employee_by_user(self, user):
        """–ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        from employees.models import Employee
        
        username = user.username
        
        if not username:
            return None
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è username
        normalized_username = self.normalize_username(username)
        
        try:
            # –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
            employee = Employee.objects.filter(
                telegram_username__iexact=username
            ).first()
            
            if employee:
                # –û–±–Ω–æ–≤–ª—è–µ–º telegram_id –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if not employee.telegram_id:
                    employee.telegram_id = user.id
                    employee.save()
                return employee
            
            # Relaxed matching –ø–æ–∏—Å–∫
            employees = Employee.objects.all()
            matches = []
            
            for emp in employees:
                if emp.telegram_username:
                    emp_normalized = self.normalize_username(emp.telegram_username)
                    if emp_normalized == normalized_username:
                        matches.append(emp)
            
            if len(matches) == 1:
                employee = matches[0]
                if not employee.telegram_id:
                    employee.telegram_id = user.id
                    employee.save()
                return employee
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
            
        return None
    
    def normalize_username(self, username):
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è username –¥–ª—è –ø–æ–∏—Å–∫–∞"""
        if not username:
            return ""
        return username.strip().lstrip('@').lower().replace('_', '').replace('-', '').replace('.', '')
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start))
        # –ó–¥–µ—Å—å –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.token:
            logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
        
        self.application = Application.builder().token(self.token).build()
        self.setup_handlers()
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
        await self.application.run_polling()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    bot = ConnectBot()
    
    try:
        asyncio.run(bot.run())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()
