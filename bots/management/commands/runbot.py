"""
Django –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞ ConnectBot v21
"""
import logging
import sys
from django.core.management.base import BaseCommand
from django.conf import settings

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = '–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ ConnectBot v21'

    def add_arguments(self, parser):
        parser.add_argument(
            '--with-scheduler',
            action='store_true',
            help='–ó–∞–ø—É—Å–∫ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –∑–∞–¥–∞—á',
        )

    def handle(self, *args, **options):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.setup_logging()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
        if not settings.TELEGRAM_BOT_TOKEN:
            self.stdout.write(
                self.style.ERROR('–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö')
            )
            self.stdout.write('–î–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª .env')
            return
        
        self.stdout.write("""
ü§ñ ConnectBot v21 - –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞
üìÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
üîî –° —Å–∏—Å—Ç–µ–º–æ–π —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –º–µ–Ω—é
        """)
        
        if options.get('with_scheduler'):
            self.stdout.write('–†–µ–∂–∏–º: –° –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –∑–∞–¥–∞—á')
            self._run_with_scheduler()
        else:
            self.stdout.write('–†–µ–∂–∏–º: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ (–±–µ–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞)')
            self._run_simple()

    def _run_simple(self):
        """–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        # –û–±—ë—Ä—Ç–∫–∞: –¥–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö
        from telegram.ext import Application
        from telegram.request import HTTPXRequest
        import httpx
        import time
        from bots.utils.retry_utils import sync_retry_decorator
        from httpx import ConnectError, ReadTimeout, HTTPError

        attempts_outer = 0
        while True:
            try:
                attempts_outer += 1
                self.stdout.write('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...')

                # –°–æ–∑–¥–∞–µ–º HTTPX –∫–ª–∏–µ–Ω—Ç —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
                transport = None
                try:
                    if hasattr(httpx, 'AsyncHTTPTransport'):
                        try:
                            transport = httpx.AsyncHTTPTransport(retries=5)
                            self.stdout.write('Using AsyncHTTPTransport(retries=5)')
                        except TypeError:
                            transport = httpx.AsyncHTTPTransport()
                            self.stdout.write('Using AsyncHTTPTransport() without retries')

                    if transport:
                        httpx_client = httpx.AsyncClient(
                            transport=transport,
                            timeout=httpx.Timeout(connect=60.0, read=60.0, write=60.0, pool=60.0),
                            limits=httpx.Limits(max_connections=60, max_keepalive_connections=20),
                            trust_env=False,
                        )
                    else:
                        httpx_client = httpx.AsyncClient(
                            timeout=httpx.Timeout(connect=60.0, read=60.0, write=60.0, pool=60.0),
                            limits=httpx.Limits(max_connections=60, max_keepalive_connections=20),
                            trust_env=False,
                        )
                except Exception:
                    httpx_client = httpx.AsyncClient(
                        timeout=httpx.Timeout(connect=60.0, read=60.0, write=60.0, pool=60.0),
                        limits=httpx.Limits(max_connections=60, max_keepalive_connections=20),
                        trust_env=False,
                    )

                try:
                    request = HTTPXRequest(client=httpx_client)
                    self.stdout.write('Using HTTPXRequest(client=AsyncClient)')
                except TypeError:
                    try:
                        request = HTTPXRequest(http_version="1.1", client=httpx_client)
                        self.stdout.write('Using HTTPXRequest(http_version, client=AsyncClient)')
                    except TypeError:
                        request = HTTPXRequest()
                        self.stdout.write('Using default HTTPXRequest() fallback')

                application = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).request(request).build()

                # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                self._setup_basic_handlers(application)

                self.stdout.write('‚úÖ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!')
                self.stdout.write('üîî –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞')
                self.stdout.write('üì± ReplyKeyboard —Å —Å—á–µ—Ç—á–∏–∫–∞–º–∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ')
                self.stdout.write('–ó–∞–ø—É—Å–∫ polling... (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)')

                # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling ‚Äî –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ run_polling
                # –†–µ—Ç—Ä–∞–π –Ω–∞ —É—Ä–æ–≤–Ω–µ run_polling ‚Äî –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π get_updates_request,
                # —Ç.–∫. —Ä–∞–∑–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ PTB –ø—Ä–∏–Ω–∏–º–∞—é—Ç —Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
                from telegram.error import Conflict as TelegramConflict

                @sync_retry_decorator(attempts=8, min_wait=2, max_wait=60, retry_exceptions=(ConnectError, ReadTimeout, HTTPError, TelegramConflict))
                def _run_polling_with_retry():
                    try:
                        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤: –ø—É—Å—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å–∞–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ—Ç–æ–¥.
                        application.run_polling(drop_pending_updates=True)
                    except KeyboardInterrupt:
                        raise

                _run_polling_with_retry()

                # –ï—Å–ª–∏ run_polling –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                break

            except KeyboardInterrupt:
                self.stdout.write(self.style.WARNING('\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'))
                break
            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –∏ –∂–¥—ë–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π, –Ω–µ –∑–∞–≤–µ—Ä—à–∞—è –ø—Ä–æ—Ü–µ—Å—Å
                self.stdout.write(self.style.ERROR(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempts_outer}): {e}'))
                wait_seconds = min(60, 2 ** min(attempts_outer, 6))
                self.stdout.write(f'–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {wait_seconds} —Å–µ–∫—É–Ω–¥...')
                try:
                    time.sleep(wait_seconds)
                except KeyboardInterrupt:
                    break

    def _run_with_scheduler(self):
        """–ó–∞–ø—É—Å–∫ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –∑–∞–¥–∞—á"""
        try:
            from bots.bot_instance import create_bot_application
            from bots.services.scheduler_service import scheduler_service
            
            self.stdout.write('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º...')
            
            application = create_bot_application()
            if not application:
                self.stdout.write(self.style.ERROR('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞'))
                return
            
            scheduler_service.start_scheduler()
            status = scheduler_service.get_scheduler_status()
            self.stdout.write(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {status['status']}, –∑–∞–¥–∞—á: {status['job_count']}")
            
            self.stdout.write('–ó–∞–ø—É—Å–∫ polling —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º... (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)')
            
            application.run_polling(
                drop_pending_updates=True,
                allowed_updates=['message', 'callback_query', 'chat_member']
            )
            
        except KeyboardInterrupt:
            self.stdout.write(self.style.WARNING('\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'–û—à–∏–±–∫–∞: {e}'))
        finally:
            try:
                scheduler_service.stop_scheduler()
                self.stdout.write('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
            except:
                pass

    def _setup_basic_handlers(self, application):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        from telegram import Update
        from telegram.ext import CommandHandler, MessageHandler, filters, ContextTypes
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ä—Ç–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        from bots.handlers.start_handlers import start_command, help_command, menu_command, handle_text_messages, notifications_command, refresh_command
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("menu", menu_command))
        application.add_handler(CommandHandler("notifications", notifications_command))
        application.add_handler(CommandHandler("refresh", refresh_command))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_messages))
        
        # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            try:
                user_id = update.effective_user.id
                self.stdout.write(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /test –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                from bots.utils.message_utils import reply_with_menu
                from bots.menu_manager import MenuManager
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
                counts = await MenuManager.get_notification_counts(user_id)
                
                test_text = f"""
‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.

üîî *–¢–µ–∫—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*
‚Ä¢ –û–∂–∏–¥–∞—é—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏: {counts['meetings']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è: {counts['today_activities']}
‚Ä¢ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {counts['total']}

üí° –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∞!
"""
                await reply_with_menu(update, test_text, menu_type='main', parse_mode='Markdown', user_id=user_id)
                self.stdout.write("‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ /test –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏")
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"–û—à–∏–±–∫–∞ –≤ test_command: {e}"))
        
        async def coffee_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            try:
                user_id = update.effective_user.id
                self.stdout.write(f"–ö–æ–º–∞–Ω–¥–∞ /coffee –æ—Ç {update.effective_user.first_name}")
                from bots.utils.message_utils import reply_with_menu
                from bots.menu_manager import MenuManager
                coffee_text = await MenuManager.create_coffee_menu()
                await reply_with_menu(update, coffee_text, menu_type='coffee', parse_mode='Markdown', user_id=user_id)
                self.stdout.write("‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ /coffee –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"–û—à–∏–±–∫–∞ –≤ coffee_command: {e}"))
        
        async def activities_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            try:
                user_id = update.effective_user.id
                self.stdout.write(f"–ö–æ–º–∞–Ω–¥–∞ /activities –æ—Ç {update.effective_user.first_name}")
                from bots.utils.message_utils import reply_with_menu
                from bots.menu_manager import MenuManager
                
                counts = await MenuManager.get_notification_counts(user_id)
                
                await reply_with_menu(update,
                    f"""üéØ *–ö–û–†–ü–û–†–ê–¢–ò–í–ù–´–ï –ê–ö–¢–ò–í–ù–û–°–¢–ò*

üîî *–¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*
‚Ä¢ –û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {counts['today_activities']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –Ω–∞ –Ω–µ–¥–µ–ª–µ: {counts['week_activities']}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π:

‚Ä¢ ‚òï –¢–∞–π–Ω—ã–π –∫–æ—Ñ–µ
‚Ä¢ üéØ –ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã  
‚Ä¢ üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å

üí° –í—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ —É–¥–æ–±–Ω–æ–µ –º–µ–Ω—é —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏!""",
                    menu_type='main',
                    parse_mode='Markdown',
                    user_id=user_id
                )
                self.stdout.write("‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ /activities –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏")
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"–û—à–∏–±–∫–∞ –≤ activities_command: {e}"))
        
        async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            try:
                user_id = update.effective_user.id
                self.stdout.write(f"–ö–æ–º–∞–Ω–¥–∞ /profile –æ—Ç {update.effective_user.first_name}")
                from bots.utils.message_utils import reply_with_menu
                from bots.menu_manager import MenuManager
                from employees.models import Employee
                
                user = update.effective_user
                employee = await Employee.objects.aget(telegram_id=user.id)
                profile_text = await MenuManager.create_profile_menu(employee)
                await reply_with_menu(update, profile_text, menu_type='profile', parse_mode='Markdown', user_id=user_id)
                self.stdout.write("‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ /profile –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏")
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"–û—à–∏–±–∫–∞ –≤ profile_command: {e}"))
        
        async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            try:
                user_id = update.effective_user.id
                self.stdout.write(f"–ö–æ–º–∞–Ω–¥–∞ /settings –æ—Ç {update.effective_user.first_name}")
                from bots.utils.message_utils import reply_with_menu
                from bots.menu_manager import MenuManager
                settings_text = await MenuManager.create_settings_menu()
                await reply_with_menu(update, settings_text, menu_type='settings', parse_mode='Markdown', user_id=user_id)
                self.stdout.write("‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ /settings –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"–û—à–∏–±–∫–∞ –≤ settings_command: {e}"))
        
        async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            try:
                user_id = update.effective_user.id
                self.stdout.write(f"–ö–æ–º–∞–Ω–¥–∞ /stats –æ—Ç {update.effective_user.first_name}")
                from bots.utils.message_utils import reply_with_menu
                from bots.menu_manager import MenuManager
                
                counts = await MenuManager.get_notification_counts(user_id)
                
                await reply_with_menu(update,
                    f"""üìä *–ú–û–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê*

üîî *–¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*
‚Ä¢ –û–∂–∏–¥–∞—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: {counts['total']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è: {counts['today_activities']}
‚Ä¢ –í—Å—Ç—Ä–µ—á –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ: {counts['meetings']}

–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:

‚Ä¢ üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å - –æ—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è  
‚Ä¢ üèÜ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è - –≤–∞—à–∏ –Ω–∞–≥—Ä–∞–¥—ã

üí° –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ —É–¥–æ–±–Ω–æ–µ –º–µ–Ω—é —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏!""",
                    menu_type='main',
                    parse_mode='Markdown',
                    user_id=user_id
                )
                self.stdout.write("‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ /stats –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏")
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"–û—à–∏–±–∫–∞ –≤ stats_command: {e}"))
        
        async def preferences_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            try:
                user_id = update.effective_user.id
                self.stdout.write(f"–ö–æ–º–∞–Ω–¥–∞ /preferences –æ—Ç {update.effective_user.first_name}")
                from bots.utils.message_utils import reply_with_menu
                from bots.menu_manager import MenuManager
                from employees.models import Employee
                
                user = update.effective_user
                employee = await Employee.objects.aget(telegram_id=user.id)
                interests_text = await MenuManager.create_interests_menu(employee)
                await reply_with_menu(update, interests_text, menu_type='interests', parse_mode='Markdown', user_id=user_id)
                self.stdout.write("‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ /preferences –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"–û—à–∏–±–∫–∞ –≤ preferences_command: {e}"))

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        application.add_handler(CommandHandler("test", test_command))
        application.add_handler(CommandHandler("coffee", coffee_command))
        application.add_handler(CommandHandler("activities", activities_command))
        application.add_handler(CommandHandler("profile", profile_command))
        application.add_handler(CommandHandler("settings", settings_command))
        application.add_handler(CommandHandler("stats", stats_command))
        application.add_handler(CommandHandler("preferences", preferences_command))

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        try:
            # Menu handlers –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            from bots.handlers.menu_handlers import setup_menu_handlers
            setup_menu_handlers(application)
            self.stdout.write("Registered menu callback handlers")
        except Exception as e:
            self.stdout.write(self.style.WARNING(f"Could not register menu handlers: {e}"))

        try:
            # Secret coffee handlers
            from bots.handlers.secret_coffee_handlers import setup_secret_coffee_handlers
            setup_secret_coffee_handlers(application)
            self.stdout.write("Registered secret coffee callback handlers")
        except Exception as e:
            self.stdout.write(self.style.WARNING(f"Could not register secret coffee handlers: {e}"))

        try:
            # Preference handlers
            from bots.handlers.preference_handlers import setup_preference_handlers
            setup_preference_handlers(application)
            self.stdout.write("Registered preference callback handlers")
        except Exception as e:
            self.stdout.write(self.style.WARNING(f"Could not register preference handlers: {e}"))

        try:
            # Feedback conversation handler
            from bots.handlers.feedback_handlers import feedback_conv_handler
            application.add_handler(feedback_conv_handler)
            self.stdout.write("Registered feedback conversation handler")
        except Exception as e:
            self.stdout.write(self.style.WARNING(f"Could not register feedback handler: {e}"))

        self.stdout.write("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        self.stdout.write("üì± –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ReplyKeyboardMarkup —Å —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        self.stdout.write("üîî –°—á–µ—Ç—á–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã –Ω–∞ –≤—Å–µ—Ö –∫–Ω–æ–ø–∫–∞—Ö –º–µ–Ω—é")

    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler(sys.stdout)
            ]
        )