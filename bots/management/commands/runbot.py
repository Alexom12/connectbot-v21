"""
Django –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞ ConnectBot v21
"""
import logging
import sys
from django.core.management.base import BaseCommand
from django.conf import settings

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = '–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ ConnectBot v21'

    def add_arguments(self, parser):
        parser.add_argument(
            '--with-scheduler',
            action='store_true',
            help='–ó–∞–ø—É—Å–∫ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –∑–∞–¥–∞—á',
        )

    def handle(self, *args, **options):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.setup_logging()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
        if not settings.TELEGRAM_BOT_TOKEN:
            self.stdout.write(
                self.style.ERROR('–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö')
            )
            self.stdout.write('–î–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª .env')
            return
        
        self.stdout.write("""
ü§ñ ConnectBot v21 - –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞
üìÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        """)
        
        if options.get('with_scheduler'):
            self.stdout.write('–†–µ–∂–∏–º: –° –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –∑–∞–¥–∞—á')
            self._run_with_scheduler()
        else:
            self.stdout.write('–†–µ–∂–∏–º: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ (–±–µ–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞)')
            self._run_simple()

    def _run_simple(self):
        """–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            from telegram.ext import Application
            from telegram.request import HTTPXRequest
            
            self.stdout.write('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...')
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (—Å–ª–æ–∂–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–∑—ã–≤–∞–ª–∏ —Ç–∞–π–º–∞—É—Ç—ã)
            application = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self._setup_basic_handlers(application)
            
            self.stdout.write('–ë–æ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!')
            self.stdout.write('–ó–∞–ø—É—Å–∫ polling... (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)')
            
            # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling (–ø—Ä–æ—Å—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –ª—É—á—à–µ)
            application.run_polling(drop_pending_updates=True)
            
        except KeyboardInterrupt:
            self.stdout.write(self.style.WARNING('\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'–û—à–∏–±–∫–∞: {e}'))
            # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ simple_bot –∫–∞–∫ fallback
            try:
                self.stdout.write('–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ simple_bot...')
                import subprocess
                import sys
                subprocess.run([sys.executable, 'manage.py', 'simple_bot'])
            except Exception as fallback_error:
                self.stdout.write(self.style.ERROR(f'Fallback –æ—à–∏–±–∫–∞: {fallback_error}'))

    def _run_with_scheduler(self):
        """–ó–∞–ø—É—Å–∫ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –∑–∞–¥–∞—á"""
        try:
            from bots.bot_instance import create_bot_application
            from bots.services.scheduler_service import scheduler_service
            
            self.stdout.write('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º...')
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
            application = create_bot_application()
            if not application:
                self.stdout.write(self.style.ERROR('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞'))
                return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            scheduler_service.start_scheduler()
            status = scheduler_service.get_scheduler_status()
            self.stdout.write(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {status['status']}, –∑–∞–¥–∞—á: {status['job_count']}")
            
            self.stdout.write('–ó–∞–ø—É—Å–∫ polling —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º... (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)')
            
            # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling
            application.run_polling(
                drop_pending_updates=True,
                allowed_updates=['message', 'callback_query', 'chat_member']
            )
            
        except KeyboardInterrupt:
            self.stdout.write(self.style.WARNING('\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'–û—à–∏–±–∫–∞: {e}'))
        finally:
            try:
                scheduler_service.stop_scheduler()
                self.stdout.write('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
            except:
                pass

    def _setup_basic_handlers(self, application):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        from telegram import Update
        from telegram.ext import CommandHandler, MessageHandler, filters, ContextTypes
        
        async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            try:
                self.stdout.write(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
                message = (
                    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ConnectBot v21!\n\n"
                    "ü§ñ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π\n"
                    "üìã –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
                )
                await update.message.reply_text(message)
                self.stdout.write("–û—Ç–≤–µ—Ç –Ω–∞ /start –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}"))
        
        async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            try:
                self.stdout.write(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
                message = (
                    "üîß *CONNECTBOT V21 - –°–ü–†–ê–í–ö–ê*\n\n"
                    "üéØ *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
                    "/start - –ó–∞–ø—É—Å–∫ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
                    "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
                    "/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
                    "‚òï *–¢–∞–π–Ω—ã–π –∫–æ—Ñ–µ:*\n"
                    "/coffee - –£—á–∞—Å—Ç–∏–µ –≤ –¢–∞–π–Ω–æ–º –∫–æ—Ñ–µ\n"
                    "/preferences - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å—Ç—Ä–µ—á\n\n"
                    "üéØ *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:*\n"
                    "/activities - –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π\n"
                    "/stats - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
                    "üë§ *–ü—Ä–æ—Ñ–∏–ª—å:*\n"
                    "/profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
                    "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
                    "üß™ *–¢–µ—Å—Ç:*\n"
                    "/test - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã\n\n"
                    "üöÄ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ!"
                )
                await update.message.reply_text(message, parse_mode='Markdown')
                self.stdout.write("–û—Ç–≤–µ—Ç –Ω–∞ /help –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"–û—à–∏–±–∫–∞ –≤ help_command: {e}"))
        
        async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            try:
                self.stdout.write(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /test –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
                await update.message.reply_text("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
                self.stdout.write("–û—Ç–≤–µ—Ç –Ω–∞ /test –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"–û—à–∏–±–∫–∞ –≤ test_command: {e}"))
        
        async def echo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
            try:
                self.stdout.write(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{update.message.text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
                await update.message.reply_text(f"Echo: {update.message.text}")
                self.stdout.write("Echo –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"–û—à–∏–±–∫–∞ –≤ echo_handler: {e}"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        async def coffee_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            try:
                self.stdout.write(f"–ö–æ–º–∞–Ω–¥–∞ /coffee –æ—Ç {update.effective_user.first_name}")
                await update.message.reply_text(
                    "‚òï *–¢–ê–ô–ù–´–ô –ö–û–§–ï*\n\n"
                    "ü§´ –ê–Ω–æ–Ω–∏–º–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–ª–ª–µ–≥–æ–π\n"
                    "üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /preferences –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
                    "üéØ –ú–∞—Ç—á–∏–Ω–≥ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º\n\n"
                    "üí° –î–ª—è —É—á–∞—Å—Ç–∏—è –æ–±–Ω–æ–≤–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å!",
                    parse_mode='Markdown'
                )
                self.stdout.write("‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ /coffee –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"–û—à–∏–±–∫–∞ –≤ coffee_command: {e}"))
        
        async def activities_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            try:
                self.stdout.write(f"–ö–æ–º–∞–Ω–¥–∞ /activities –æ—Ç {update.effective_user.first_name}")
                await update.message.reply_text(
                    "üéØ *–ö–û–†–ü–û–†–ê–¢–ò–í–ù–´–ï –ê–ö–¢–ò–í–ù–û–°–¢–ò*\n\n"
                    "‚òï /coffee - –¢–∞–π–Ω—ã–π –∫–æ—Ñ–µ\n"
                    "‚ôüÔ∏è –®–∞—Ö–º–∞—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä\n"
                    "üèì –ù–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å\n"
                    "üì∏ –§–æ—Ç–æ–∫–≤–µ—Å—Ç—ã\n"
                    "üß† –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã\n\n"
                    "üìä /stats - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                    "‚öôÔ∏è /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                    parse_mode='Markdown'
                )
                self.stdout.write("‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ /activities –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"–û—à–∏–±–∫–∞ –≤ activities_command: {e}"))
        
        async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            try:
                self.stdout.write(f"–ö–æ–º–∞–Ω–¥–∞ /profile –æ—Ç {update.effective_user.first_name}")
                user = update.effective_user
                await update.message.reply_text(
                    f"üë§ *–ú–û–ô –ü–†–û–§–ò–õ–¨*\n\n"
                    f"üÜî ID: {user.id}\n"
                    f"üëã –ò–º—è: {user.first_name}\n"
                    f"üìû Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
                    f"üìä /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
                    f"‚öôÔ∏è /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è\n"
                    f"‚òï /preferences - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¢–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ",
                    parse_mode='Markdown'
                )
                self.stdout.write("‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ /profile –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"–û—à–∏–±–∫–∞ –≤ profile_command: {e}"))
        
        async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            try:
                self.stdout.write(f"–ö–æ–º–∞–Ω–¥–∞ /settings –æ—Ç {update.effective_user.first_name}")
                await update.message.reply_text(
                    "‚öôÔ∏è *–ù–ê–°–¢–†–û–ô–ö–ò*\n\n"
                    "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –≤–∫–ª—é—á–µ–Ω—ã\n"
                    "‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: 09:00-18:00\n"
                    "üì± –§–æ—Ä–º–∞—Ç: Telegram\n\n"
                    "‚òï /preferences - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¢–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ\n"
                    "üîï /notifications - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏\n\n"
                    "üí° –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –±–æ–ª—å—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫!",
                    parse_mode='Markdown'
                )
                self.stdout.write("‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ /settings –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"–û—à–∏–±–∫–∞ –≤ settings_command: {e}"))
        
        async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            try:
                self.stdout.write(f"–ö–æ–º–∞–Ω–¥–∞ /stats –æ—Ç {update.effective_user.first_name}")
                await update.message.reply_text(
                    "üìä *–ú–û–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê*\n\n"
                    "‚òï *–¢–∞–π–Ω—ã–π –∫–æ—Ñ–µ:*\n"
                    "   ‚îî –í—Å—Ç—Ä–µ—á: 0\n"
                    "   ‚îî –†–µ–π—Ç–∏–Ω–≥: –Ω–æ–≤–∏—á–æ–∫\n\n"
                    "üéØ *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:*\n"
                    "   ‚îî –£—á–∞—Å—Ç–∏–π: 0\n"
                    "   ‚îî –û—á–∫–æ–≤: 0\n\n"
                    "üìà *–û–±—â–µ–µ:*\n"
                    "   ‚îî –î–Ω–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: 1\n"
                    "   ‚îî –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –Ω–∞—á–∏–Ω–∞—é—â–∏–π\n\n"
                    "üí° –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö –¥–ª—è —Ä–æ—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!",
                    parse_mode='Markdown'
                )
                self.stdout.write("‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ /stats –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"–û—à–∏–±–∫–∞ –≤ stats_command: {e}"))
        
        async def preferences_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            try:
                self.stdout.write(f"–ö–æ–º–∞–Ω–¥–∞ /preferences –æ—Ç {update.effective_user.first_name}")
                await update.message.reply_text(
                    "‚òï *–ù–ê–°–¢–†–û–ô–ö–ò –¢–ê–ô–ù–û–ì–û –ö–û–§–ï*\n\n"
                    "üïê –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ\n"
                    "üíª –§–æ—Ä–º–∞—Ç –≤—Å—Ç—Ä–µ—á: –Ω–µ —É–∫–∞–∑–∞–Ω\n"
                    "üéØ –¢–µ–º—ã –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: –Ω–µ –≤—ã–±—Ä–∞–Ω—ã\n\n"
                    "‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
                    "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è\n"
                    "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç (–æ–Ω–ª–∞–π–Ω/–æ—Ñ—Ñ–ª–∞–π–Ω)\n"
                    "‚Ä¢ –û—Ç–º–µ—Ç—å—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–µ–º—ã\n\n"
                    "üí° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞!",
                    parse_mode='Markdown'
                )
                self.stdout.write("‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ /preferences –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"–û—à–∏–±–∫–∞ –≤ preferences_command: {e}"))

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("test", test_command))
        application.add_handler(CommandHandler("menu", help_command))  # menu = help –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
        application.add_handler(CommandHandler("coffee", coffee_command))
        application.add_handler(CommandHandler("activities", activities_command))
        application.add_handler(CommandHandler("profile", profile_command))
        application.add_handler(CommandHandler("settings", settings_command))
        application.add_handler(CommandHandler("stats", stats_command))
        application.add_handler(CommandHandler("preferences", preferences_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo_handler))
        
        self.stdout.write("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã:")

    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler(sys.stdout)
            ]
        )