"""
Django –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞ ConnectBot v21
"""
import os
import asyncio
import logging
import signal
import sys
from django.core.management.base import BaseCommand
from django.conf import settings
from django.utils import timezone

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = '–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ ConnectBot v21'

    def add_arguments(self, parser):
        parser.add_argument(
            '--debug',
            action='store_true',
            help='–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏',
        )

    def handle(self, *args, **options):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.setup_logging(debug=options.get('debug', False))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
        if not settings.TELEGRAM_BOT_TOKEN:
            self.stdout.write(
                self.style.ERROR('‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö')
            )
            self.stdout.write('üí° –î–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª .env')
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤
        os.makedirs('logs', exist_ok=True)
        
        self.stdout.write("""
üöÄ ConnectBot v21
üìÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
ü§ñ –¢–∞–π–Ω—ã–π –∫–æ—Ñ–µ ‚Ä¢ –®–∞—Ö–º–∞—Ç—ã ‚Ä¢ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
üîß –í–µ—Ä—Å–∏—è —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –∑–∞–¥–∞—á
üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤–∫–ª—é—á–µ–Ω–∞
        """)
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        try:
            asyncio.run(self.run_bot())
        except KeyboardInterrupt:
            self.stdout.write(self.style.WARNING('\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}'))
            sys.exit(1)

    def setup_logging(self, debug=False):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        level = logging.DEBUG if debug else logging.INFO
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setFormatter(formatter)
        
        file_handler = logging.FileHandler('logs/bot.log', encoding='utf-8')
        file_handler.setFormatter(formatter)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
        logger = logging.getLogger()
        logger.setLevel(level)
        logger.addHandler(console_handler)
        logger.addHandler(file_handler)

    async def run_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        from bots.bot_instance import create_bot_application
        from bots.services.scheduler_service import scheduler_service
        from bots.admin_services import AdminAuthService, AdminStatsService, AdminLogService, SystemHealthService
        
        try:
            self.stdout.write('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ConnectBot v21...')
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
            application = create_bot_application()
            if not application:
                self.stdout.write(self.style.ERROR('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞'))
                return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
            self.stdout.write('üì¶ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ ConnectBot...')
            scheduler_service.start_scheduler()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            status = scheduler_service.get_scheduler_status()
            self.stdout.write(f"üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {status['status']}, –∑–∞–¥–∞—á: {status['job_count']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–∞—Ö
            for job in status['jobs']:
                self.stdout.write(f"   üéØ {job['name']} -> {job['next_run']}")
            
            self.stdout.write('‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã')
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            self.stdout.write('ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ (polling)...')
            await application.run_polling(
                drop_pending_updates=True,
                allowed_updates=['message', 'callback_query', 'chat_member']
            )
            
        except KeyboardInterrupt:
            self.stdout.write(self.style.WARNING('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}'))
            raise
        finally:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
            try:
                scheduler_service.stop_scheduler()
                self.stdout.write('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
                self.stdout.write('üëã ConnectBot –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É')
            except Exception as e:
                self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}'))