"""
–°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞–º–∏ ConnectBot
"""
import os
import sys
import argparse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')

import django
django.setup()

def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    from runbot import ConnectBot
    import asyncio
    
    print("üöÄ –ó–∞–ø—É—Å–∫ ConnectBot...")
    bot = ConnectBot()
    asyncio.run(bot.run())

def scheduler_status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    from bots.services.scheduler_service import scheduler_service
    
    status = scheduler_service.get_scheduler_status()
    
    print(f"üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {status['status'].upper()}")
    print(f"üìÖ –ó–∞–¥–∞—á: {status['job_count']}")
    
    if status['jobs']:
        print("\nüéØ –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
        for job in status['jobs']:
            print(f"   ‚Ä¢ {job['name']}")
            print(f"     ID: {job['id']}")
            print(f"     –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {job['next_run']}")
            print()

def start_scheduler():
    """–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    from bots.services.scheduler_service import scheduler_service
    
    print("üìÖ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
    scheduler_service.start_scheduler()
    
    if scheduler_service.is_running:
        print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        scheduler_status()
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫")

def stop_scheduler():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    from bots.services.scheduler_service import scheduler_service
    
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
    scheduler_service.stop_scheduler()
    print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def test_services():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    import asyncio
    from activities.services.activity_manager import ActivityManager
    from activities.services.anonymous_coffee_service import anonymous_coffee_service
    
    async def test():
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        # –¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        print("1. –¢–µ—Å—Ç ActivityManager...")
        manager = ActivityManager()
        success = await manager.create_weekly_sessions()
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—Ö' if success else '‚ùå –û—à–∏–±–∫–∞'}")
        
        # –¢–µ—Å—Ç –¢–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ
        print("2. –¢–µ—Å—Ç AnonymousCoffeeService...")
        success = await anonymous_coffee_service.run_weekly_matching()
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—Ö' if success else '‚ùå –û—à–∏–±–∫–∞'}")
        
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    asyncio.run(test())

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    parser = argparse.ArgumentParser(description='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ConnectBot')
    parser.add_argument('command', choices=[
        'start', 'status', 'start-scheduler', 
        'stop-scheduler', 'test', 'simple'
    ], help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    
    args = parser.parse_args()
    
    if args.command == 'start':
        start_bot()
    elif args.command == 'status':
        scheduler_status()
    elif args.command == 'start-scheduler':
        start_scheduler()
    elif args.command == 'stop-scheduler':
        stop_scheduler()
    elif args.command == 'test':
        test_services()
    elif args.command == 'simple':
        from runbot_simple import main as simple_main
        import asyncio
        asyncio.run(simple_main())

if __name__ == "__main__":
    main()