from django.core.management.base import BaseCommand
from bots.services.scheduler_service import scheduler_service
import logging

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = '–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á ConnectBot'

    def handle(self, *args, **options):
        self.stdout.write('üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á...')
        
        try:
            scheduler_service.start_scheduler()
            
            if scheduler_service.is_running:
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–∞—Ö
                status = scheduler_service.get_scheduler_status()
                self.stdout.write(f"üìÖ –ó–∞–¥–∞—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {status['job_count']}")
                
                for job in status['jobs']:
                    self.stdout.write(f"   ‚Ä¢ {job['name']} -> {job['next_run']}")
                    
            else:
                self.stdout.write(
                    self.style.ERROR('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫')
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞: {e}')
            )