"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –º–µ–Ω—é –¥–ª—è ConnectBot
"""
from telegram import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from asgiref.sync import sync_to_async
import logging
from bots.services.notification_service import notification_service

logger = logging.getLogger(__name__)


class MenuManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –±–æ—Ç–∞"""
    
    @staticmethod
    async def get_notification_counts(user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –æ–∂–∏–¥–∞—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        try:
            return await notification_service.get_user_notification_counts(user_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å: {e}")
            return {
                'total': 0,
                'today_activities': 0,
                'week_activities': 0,
                'meetings': 0,
                'notifications': 0,
                'urgent_actions': 0
            }
    
    @staticmethod
    async def format_button_with_count(button_text, count, show_zero=False):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É —Å —Å—á–µ—Ç—á–∏–∫–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if count > 0:
            return f"{button_text} ({count})"
        elif show_zero:
            return f"{button_text} (0)"
        return button_text
    
    @staticmethod
    async def create_main_reply_keyboard(user_id=None):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
        counts = await MenuManager.get_notification_counts(user_id) if user_id else {
            'total': 0, 
            'today_activities': 0, 
            'meetings': 0, 
            'notifications': 0
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notification_emoji = "üîî" if counts['notifications'] > 0 else "‚ùì"
        
        keyboard = [
            [
                KeyboardButton(await MenuManager.format_button_with_count("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", counts['total'])),
                KeyboardButton("üéØ –ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã")
            ],
            [
                KeyboardButton(await MenuManager.format_button_with_count("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", counts['today_activities'])),
                KeyboardButton("üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
            ],
            [
                KeyboardButton(await MenuManager.format_button_with_count("‚òï –¢–∞–π–Ω—ã–π –∫–æ—Ñ–µ", counts['meetings'])),
                KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            ],
            [
                KeyboardButton(await MenuManager.format_button_with_count(f"{notification_emoji} –ü–æ–º–æ—â—å", counts['notifications']))
            ],
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    @staticmethod
    async def create_profile_reply_keyboard(user_id=None):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
        counts = await MenuManager.get_notification_counts(user_id) if user_id else {
            'week_activities': 0, 
            'total': 0
        }
        
        keyboard = [
            [
                KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                KeyboardButton(await MenuManager.format_button_with_count("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", counts['week_activities']))
            ],
            [
                KeyboardButton("üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"),
                KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
            ],
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    @staticmethod
    async def create_interests_reply_keyboard(user_id=None):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
        # –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—ã —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∏—Ö –º–≥–Ω–æ–≤–µ–Ω–Ω–æ —á–µ—Ä–µ–∑ InlineKeyboard.
        # Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å).
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø–∏—Å–∫–∏ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
        keyboard = [
            [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")],
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    @staticmethod
    async def create_interests_selection_keyboard(employee, pending_codes=None):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è.

        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç optional pending_codes (set of interest.code) ‚Äî —ç—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º.
        –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–π –º–µ—Ç–∫–∏ -> –∫–æ–¥ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –≤ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞ (Redis) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π.
        """
        try:
            from employees.utils import PreferenceManager
            from employees.redis_utils import RedisManager

            if pending_codes is None:
                pending_codes = set()

            all_interests = await PreferenceManager.get_all_interests()
            employee_interests = await PreferenceManager.get_employee_interests(employee)

            current_active = {ei.interest.code for ei in employee_interests if ei.is_active}

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º InlineKeyboard: callback_data –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ –∏–Ω—Ç–µ—Ä–µ—Å–∞
            inline_keyboard = []
            row = []

            for interest in all_interests:
                # pending_codes overrides DB state when present
                if interest.code in pending_codes:
                    is_active = True
                elif interest.code in pending_codes and pending_codes is not None:
                    is_active = True
                else:
                    is_active = interest.code in current_active

                button_text = f"{('‚úÖ' if is_active else '‚ùå')} {interest.emoji} {interest.name}"
                callback = f"toggle_interest_{interest.code}"
                row.append(InlineKeyboardButton(button_text, callback_data=callback))

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä—è–¥—ã –ø–æ 2 –∫–Ω–æ–ø–∫–∏
                if len(row) == 2:
                    inline_keyboard.append(row)
                    row = []

            if row:
                inline_keyboard.append(row)

            # –†–∞–Ω—å—à–µ –∑–¥–µ—Å—å –±—ã–ª–∏ action-–∫–Ω–æ–ø–∫–∏ (—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å/–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è/–Ω–∞–∑–∞–¥).
            # –¢–µ–ø–µ—Ä—å –º—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∫–∞–∫ InlineKeyboard.

            try:
                # –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                total_buttons = sum(len(r) for r in inline_keyboard)
                logger.info(f"INTERESTS_DEBUG: Created InlineKeyboard for user {getattr(employee, 'telegram_id', getattr(employee, 'telegram_id', 'unknown'))}, buttons={total_buttons}")
            except Exception:
                pass

            return InlineKeyboardMarkup(inline_keyboard)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {e}")
            return await MenuManager.create_interests_reply_keyboard()
    
    @staticmethod
    async def create_calendar_reply_keyboard(user_id=None):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
        counts = await MenuManager.get_notification_counts(user_id) if user_id else {
            'today_activities': 0, 
            'urgent_actions': 0
        }
        
        confirm_button_text = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
        if counts['urgent_actions'] > 0:
            confirm_button_text = f"üö® –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ({counts['urgent_actions']})"
        elif counts['today_activities'] > 0:
            confirm_button_text = await MenuManager.format_button_with_count("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", counts['today_activities'])
        
        keyboard = [
            [
                KeyboardButton(confirm_button_text),
                KeyboardButton("‚è≠Ô∏è –û—Ç–∫–∞–∑–∞—Ç—å—Å—è")
            ],
            [
                KeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"),
                KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
            ],
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    @staticmethod
    async def create_settings_reply_keyboard(user_id=None):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        counts = await MenuManager.get_notification_counts(user_id) if user_id else {
            'notifications': 0
        }
        
        keyboard = [
            [
                KeyboardButton(await MenuManager.format_button_with_count("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", counts['notifications'])),
                KeyboardButton("üë§ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è")
            ],
            [
                KeyboardButton("üåê –Ø–∑—ã–∫"),
                KeyboardButton("üì± –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ")
            ],
            [
                KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
            ],
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    @staticmethod
    async def create_help_reply_keyboard(user_id=None):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–º–æ—â–∏"""
        keyboard = [
            [KeyboardButton("‚ùì –ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã"), KeyboardButton("‚ùì –ù–µ –ø—Ä–∏—Ö–æ–¥—è—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")],
            [KeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º"), KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")],
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    @staticmethod
    async def create_coffee_reply_keyboard(user_id=None):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¢–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
        counts = await MenuManager.get_notification_counts(user_id) if user_id else {
            'meetings': 0
        }
        
        keyboard = [
            [
                KeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"),
                KeyboardButton(await MenuManager.format_button_with_count("üìÖ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É", counts['meetings']))
            ],
            [
                KeyboardButton("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"),
                KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
            ],
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    @staticmethod
    async def get_reply_keyboard_for_menu(menu_type, user_id=None, employee=None):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–∏–ø–∞ –º–µ–Ω—é —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
        keyboards = {
            'main': lambda: MenuManager.create_main_reply_keyboard(user_id),
            'profile': lambda: MenuManager.create_profile_reply_keyboard(user_id),
            'interests': lambda: MenuManager.create_interests_reply_keyboard(user_id),
            'interests_selection': lambda: MenuManager.create_interests_selection_keyboard(employee),
            'calendar': lambda: MenuManager.create_calendar_reply_keyboard(user_id),
            'settings': lambda: MenuManager.create_settings_reply_keyboard(user_id),
            'help': lambda: MenuManager.create_help_reply_keyboard(user_id),
            'coffee': lambda: MenuManager.create_coffee_reply_keyboard(user_id),
        }
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è interests: –µ—Å–ª–∏ –µ—Å—Ç—å employee ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        # —Å —É–ø—Ä–∞–≤–ª—è—é—â–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ (Unsubscribe, Back). Inline-–∫–Ω–æ–ø–∫–∏ —Å —Å–∞–º–∏–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏
        # –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ (—á—Ç–æ–±—ã –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –±—ã–ª–∏ –∏ Inline, –∏ Reply).
        if menu_type == 'interests':
            # –ï—Å–ª–∏ employee –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ user_id
            if not employee and user_id:
                try:
                    from employees.models import Employee
                    employee = await Employee.objects.aget(telegram_id=user_id)
                except Exception:
                    employee = None

            # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–±–µ–∑ Inline)
            return await MenuManager.create_interests_reply_keyboard(user_id)

        creator = keyboards.get(menu_type)
        if creator:
            return await creator()
        else:
            return await MenuManager.create_main_reply_keyboard(user_id)

    @staticmethod
    async def create_main_menu_message(user_id=None):
        """–¢–µ–∫—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö"""
        counts = await MenuManager.get_notification_counts(user_id) if user_id else {
            'total': 0, 
            'meetings': 0, 
            'today_activities': 0, 
            'notifications': 0, 
            'urgent_actions': 0
        }
        
        notification_info = ""
        if counts['total'] > 0:
            urgent_section = ""
            if counts['urgent_actions'] > 0:
                urgent_section = f"üö® *–°—Ä–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: {counts['urgent_actions']}*\n"
            
            notification_info = f"""
üîî *–£ –≤–∞—Å {counts['total']} –æ–∂–∏–¥–∞—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π:*

{urgent_section}‚Ä¢ ü§ù –í—Å—Ç—Ä–µ—á: {counts['meetings']}
‚Ä¢ üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π —Å–µ–≥–æ–¥–Ω—è: {counts['today_activities']}
‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {counts['notifications']}
"""
        else:
            notification_info = "üéâ *–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!*"

        return f"""
*ConnectBot - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*

{notification_info}

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:

üë§ *–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å* - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
üéØ *–ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã* - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏  
üìÖ *–ö–∞–ª–µ–Ω–¥–∞—Ä—å* - –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
üèÖ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è* - –≤–∞—à–∏ –Ω–∞–≥—Ä–∞–¥—ã
‚òï *–¢–∞–π–Ω—ã–π –∫–æ—Ñ–µ* - –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏* - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
‚ùì *–ü–æ–º–æ—â—å* - —Å–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /refresh –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
"""

    @staticmethod
    async def create_profile_menu(employee):
        """–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º sync_to_async –¥–ª—è Django ORM –æ–ø–µ—Ä–∞—Ü–∏–π
            from employees.utils import PreferenceManager
            
            interests = await PreferenceManager.get_employee_interests(employee)
            active_interests = [ei for ei in interests if ei.is_active]
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            counts = await MenuManager.get_notification_counts(employee.telegram_id)
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é sync_to_async
            @sync_to_async
            def get_department_name():
                return getattr(employee.department, 'name', '–ù–µ —É–∫–∞–∑–∞–Ω') if employee.department else '–ù–µ —É–∫–∞–∑–∞–Ω'
            
            @sync_to_async
            def get_bc_name():
                return getattr(employee.business_center, 'name', '–ù–µ —É–∫–∞–∑–∞–Ω') if employee.business_center else '–ù–µ —É–∫–∞–∑–∞–Ω'
            
            @sync_to_async
            def get_created_date():
                return employee.created_at.strftime('%d.%m.%Y') if employee.created_at else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
            
            department_name = await get_department_name()
            bc_name = await get_bc_name()
            created_date = await get_created_date()
            
            # –°–æ–∑–¥–∞–µ–º –±–µ–π–¥–∂ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            notification_badge = ""
            if counts['total'] > 0:
                if counts['urgent_actions'] > 0:
                    notification_badge = f" üö® ({counts['urgent_actions']} —Å—Ä–æ—á–Ω—ã—Ö)"
                else:
                    notification_badge = f" üîî ({counts['total']})"
            
            profile_text = f"""
*–ü—Ä–æ—Ñ–∏–ª—å: {employee.full_name}{notification_badge}*

*–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
‚Ä¢ –î–æ–ª–∂–Ω–æ—Å—Ç—å: {employee.position or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
‚Ä¢ –û—Ç–¥–µ–ª: {department_name}
‚Ä¢ –ë–¶: {bc_name}

*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {len(active_interests)}
‚Ä¢ –í —Å–∏—Å—Ç–µ–º–µ —Å: {created_date}
‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {'–î–∞' if employee.authorized else '–ù–µ—Ç'}

*–¢–µ–∫—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*
‚Ä¢ ü§ù –û–∂–∏–¥–∞—é—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏: {counts['meetings']}
‚Ä¢ üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π —Å–µ–≥–æ–¥–Ω—è: {counts['today_activities']}
‚Ä¢ üö® –°—Ä–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: {counts['urgent_actions']}
‚Ä¢ üîî –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {counts['total']}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
"""
            
            return profile_text
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return f"*–ü—Ä–æ—Ñ–∏–ª—å: {getattr(employee, 'full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}*\n\n–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    @staticmethod
    async def create_interests_menu(employee, selection_mode=False):
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏"""
        try:
            from employees.utils import PreferenceManager

            all_interests = await PreferenceManager.get_all_interests()
            employee_interests = await PreferenceManager.get_employee_interests(employee)

            active_interests = {ei.interest.code: ei for ei in employee_interests if ei.is_active}
            active_count = len(active_interests)

            interests_list = ""
            for interest in all_interests:
                is_active = interest.code in active_interests
                status_icon = "‚úÖ" if is_active else "‚ùå"
                interests_list += f"{status_icon} {interest.emoji} {interest.name}\n"

            # –ü–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            counts = await MenuManager.get_notification_counts(employee.telegram_id)

            notification_context = ""
            if counts['today_activities'] > 0:
                notification_context = f"\nüí° –£ –≤–∞—Å {counts['today_activities']} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π —Å–µ–≥–æ–¥–Ω—è!"

            if selection_mode:
                menu_text = f"""
üéØ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏ - –†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞*

–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_count}/{len(all_interests)}
{notification_context}

*–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:*

{interests_list}

*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*
–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è
"""
            else:
                menu_text = f"""
üéØ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏*

–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_count}/{len(all_interests)}
{notification_context}

*–í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:*
{interests_list}

*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*
–ù–∞–∂–º–∏—Ç–µ ¬´üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
"""

            return menu_text

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    @staticmethod
    async def create_calendar_menu(employee):
        """–ú–µ–Ω—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
        counts = await MenuManager.get_notification_counts(employee.telegram_id)
        
        activities_badge = ""
        if counts['urgent_actions'] > 0:
            activities_badge = f" üö® ({counts['urgent_actions']} —Å—Ä–æ—á–Ω—ã—Ö)"
        elif counts['today_activities'] > 0:
            activities_badge = f" üîî ({counts['today_activities']} —Å–µ–≥–æ–¥–Ω—è)"
        
        urgent_warning = ""
        if counts['urgent_actions'] > 0:
            urgent_warning = f"\n\nüö® *–í–Ω–∏–º–∞–Ω–∏–µ!* –£ –≤–∞—Å {counts['urgent_actions']} —Å—Ä–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π, —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!"
        
        calendar_text = f"""
üìÖ *–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ{activities_badge}*

*–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:*
‚Ä¢ 15:00 ‚òïÔ∏è –¢–∞–π–Ω—ã–π –∫–æ—Ñ–µ —Å –∫–æ–ª–ª–µ–≥–æ–π

*–°—Ä–µ–¥–∞:*
‚Ä¢ 13:00 üçù –û–±–µ–¥ –≤—Å–ª–µ–ø—É—é
‚Ä¢ 18:00 ‚ôüÔ∏è –®–∞—Ö–º–∞—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä

*–ü—è—Ç–Ω–∏—Ü–∞:*
‚Ä¢ 17:00 üé≤ –í–µ—á–µ—Ä –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –∏–≥—Ä

*–°—Ç–∞—Ç—É—Å:*
‚Ä¢ –û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {counts['today_activities']}
‚Ä¢ –°—Ä–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: {counts['urgent_actions']}
{urgent_warning}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–∏–µ–º.
"""
        return calendar_text

    @staticmethod
    async def create_achievements_menu(employee):
        """–ú–µ–Ω—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        # –ü–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        counts = await MenuManager.get_notification_counts(employee.telegram_id)

        motivation_text = ""
        if counts['today_activities'] > 0:
            motivation_text = f"\nüí° –£ –≤–∞—Å {counts['today_activities']} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π —Å–µ–≥–æ–¥–Ω—è - –æ—Ç–ª–∏—á–Ω—ã–π —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!"

        achievements_text = f"""
üèÜ *–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è*

*–ü–æ–ª—É—á–µ–Ω–æ: 3/8*

‚úÖ üéØ *–ü–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞*
   –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –ø–µ—Ä–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

‚úÖ ü¶ã *–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞*
   –ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ 3 —Ä–∞–∑–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö

‚úÖ ‚òïÔ∏è *–ö–æ—Ñ–µ–º–∞–Ω*
   –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ 3 –¢–∞–π–Ω—ã—Ö –∫–æ—Ñ–µ

üîí ‚ôüÔ∏è *–®–∞—Ö–º–∞—Ç–Ω—ã–π –≥—Ä–æ—Å—Å–º–µ–π—Å—Ç–µ—Ä*
   –°—ã–≥—Ä–∞—Ç—å 10 –ø–∞—Ä—Ç–∏–π –≤ —à–∞—Ö–º–∞—Ç—ã (3/10)

üîí üèì *–ß–µ–º–ø–∏–æ–Ω –ø–æ —Ç–µ–Ω–Ω–∏—Å—É*
   –°—ã–≥—Ä–∞—Ç—å 15 –ø–∞—Ä—Ç–∏–π –≤ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å (0/15)
{motivation_text}

*–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!* üöÄ
"""
        return achievements_text

    @staticmethod
    async def create_help_menu():
        """–ú–µ–Ω—é –ø–æ–º–æ—â–∏"""
        help_text = """
üÜò *–¶–µ–Ω—Ç—Ä –ø–æ–º–æ—â–∏ ConnectBot*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é  
/preferences - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/notifications - –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/refresh - –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏

*–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.
"""
        return help_text

    @staticmethod
    async def create_settings_menu():
        """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        settings_text = """
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –ø–æ–¥ —Å–µ–±—è:

‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å—Ç–æ—Ç—ã –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
‚Ä¢ üë§ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ üåê –Ø–∑—ã–∫ - –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
‚Ä¢ üì± –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ - —Ç–µ–º—ã –∏ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥

*–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*
"""
        return settings_text

    @staticmethod
    async def create_coffee_menu():
        """–ú–µ–Ω—é –¢–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
        coffee_text = """
‚òï *–¢–∞–π–Ω—ã–π –∫–æ—Ñ–µ*

ü§´ –ê–Ω–æ–Ω–∏–º–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–ª–ª–µ–≥–æ–π
üéØ –ú–∞—Ç—á–∏–Ω–≥ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*
üí¨ *–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ* - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É
üìÖ *–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É* - –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏  
üìã *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è* - –ø—Ä–∞–≤–∏–ª–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

üí° –î–ª—è —É—á–∞—Å—Ç–∏—è –æ–±–Ω–æ–≤–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å!
"""
        return coffee_text

    @staticmethod
    async def create_notifications_menu(user_id=None):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        counts = await MenuManager.get_notification_counts(user_id) if user_id else {'total': 0}
        
        if counts['total'] == 0:
            return """
üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è*

üéâ –£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!

–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –≤—ã –º–æ–ª–æ–¥–µ—Ü! üí™

–ï—Å–ª–∏ –æ–∂–∏–¥–∞–ª–∏ –∫–∞–∫–æ–µ-—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /refresh –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
"""
        
        notifications_text = f"""
üîî *–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*

*–û–∂–∏–¥–∞—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:*

"""
        
        if counts['urgent_actions'] > 0:
            notifications_text += f"üö® *–°—Ä–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ({counts['urgent_actions']}):*\n"
            notifications_text += "‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ –≤ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö\n"
            notifications_text += "‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å—Ä–æ—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ –≤—Å—Ç—Ä–µ—á–∞–º\n\n"
        
        if counts['meetings'] > 0:
            notifications_text += f"ü§ù *–í—Å—Ç—Ä–µ—á–∏ ({counts['meetings']}):*\n"
            notifications_text += "‚Ä¢ –û–∂–∏–¥–∞—é—Ç –≤–∞—à–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
            notifications_text += "‚Ä¢ –¢—Ä–µ–±—É—é—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏\n\n"
        
        if counts['today_activities'] > 0:
            notifications_text += f"üìÖ *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è ({counts['today_activities']}):*\n"
            notifications_text += "‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            notifications_text += "‚Ä¢ –¢—Ä–µ–±—É—é—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n"
        
        if counts['notifications'] > 0:
            notifications_text += f"üì® *–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ({counts['notifications']}):*\n"
            notifications_text += "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã\n"
            notifications_text += "‚Ä¢ –í–∞–∂–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\n"
        
        notifications_text += f"üí° *–í—Å–µ–≥–æ: {counts['total']} –æ–∂–∏–¥–∞—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π*"
        notifications_text += "\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–∑–¥–µ–ª—ã –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏."
        
        return notifications_text

    # Backwards-compatible aliases for older callers
    @staticmethod
    async def get_main_menu(*args, **kwargs):
        user_id = kwargs.get('user_id')
        return await MenuManager.create_main_menu_message(user_id)

    @staticmethod
    async def get_profile_menu(employee, *args, **kwargs):
        return await MenuManager.create_profile_menu(employee)

    @staticmethod
    async def get_interests_menu(employee, *args, **kwargs):
        return await MenuManager.create_interests_menu(employee)

    @staticmethod
    async def get_calendar_menu(employee, *args, **kwargs):
        return await MenuManager.create_calendar_menu(employee)

    @staticmethod
    async def get_achievements_menu(employee, *args, **kwargs):
        return await MenuManager.create_achievements_menu(employee)

    @staticmethod
    async def get_help_menu(*args, **kwargs):
        return await MenuManager.create_help_menu()

    @staticmethod
    async def get_settings_menu(*args, **kwargs):
        return await MenuManager.create_settings_menu()