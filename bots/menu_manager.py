"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –º–µ–Ω—é –¥–ª—è ConnectBot
"""
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from asgiref.sync import sync_to_async
import logging

logger = logging.getLogger(__name__)


class MenuManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –±–æ—Ç–∞"""
    
    @staticmethod
    async def create_main_menu():
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="menu_profile")],
            [InlineKeyboardButton("–ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã", callback_data="menu_interests")],
            [InlineKeyboardButton("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π", callback_data="menu_calendar")],
            [InlineKeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="feedback_start")],
            [InlineKeyboardButton("–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="menu_achievements")],
            [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="menu_help")],
            [InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings")],
        ]
        
        return {
            'text': "*ConnectBot - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            'reply_markup': InlineKeyboardMarkup(keyboard),
            'parse_mode': 'Markdown'
        }
    
    @staticmethod
    async def create_profile_menu(employee):
        """–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        from employees.utils import PreferenceManager
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            interests = await PreferenceManager.get_employee_interests(employee)
            active_interests = [ei for ei in interests if ei.is_active]
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª–∞
            department_name = '–ù–µ —É–∫–∞–∑–∞–Ω'
            try:
                if employee.department:
                    department_name = employee.department.name
            except:
                department_name = '–ù–µ —É–∫–∞–∑–∞–Ω'
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä–∞
            bc_name = '–ù–µ —É–∫–∞–∑–∞–Ω'
            try:
                if employee.business_center:
                    bc_name = employee.business_center.name
            except:
                bc_name = '–ù–µ —É–∫–∞–∑–∞–Ω'
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
            created_date = '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
            try:
                if employee.created_at:
                    created_date = employee.created_at.strftime('%d.%m.%Y')
            except:
                created_date = '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
            
            profile_text = f"""
*–ü—Ä–æ—Ñ–∏–ª—å: {employee.full_name}*

*–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
‚Ä¢ –î–æ–ª–∂–Ω–æ—Å—Ç—å: {employee.position or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
‚Ä¢ –û—Ç–¥–µ–ª: {department_name}
‚Ä¢ –ë–¶: {bc_name}

*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {len(active_interests)}
‚Ä¢ –í —Å–∏—Å—Ç–µ–º–µ —Å: {created_date}
‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {'–î–∞' if employee.authorized else '–ù–µ—Ç'}
"""
            keyboard = [
                [InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="profile_stats")],
                [InlineKeyboardButton("–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="profile_achievements")],
                [InlineKeyboardButton("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –º–µ—Å—è—Ü–∞–º", callback_data="profile_activity")],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_main")],
            ]
            
            return {
                'text': profile_text,
                'reply_markup': InlineKeyboardMarkup(keyboard),
                'parse_mode': 'Markdown'
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
            simple_text = f"""
*–ü—Ä–æ—Ñ–∏–ª—å: {getattr(employee, 'full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}*

–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
"""
            keyboard = [
                [InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_main")],
            ]
            
            return {
                'text': simple_text,
                'reply_markup': InlineKeyboardMarkup(keyboard),
                'parse_mode': 'Markdown'
            }
    
    @staticmethod
    async def create_interests_menu(employee):
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏"""
        from employees.utils import PreferenceManager
        
        all_interests = await PreferenceManager.get_all_interests()
        employee_interests = await PreferenceManager.get_employee_interests(employee)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        active_interests = {ei.interest.code: ei for ei in employee_interests if ei.is_active}
        
        keyboard = []
        for interest in all_interests:
            is_active = interest.code in active_interests
            status_icon = "‚úÖ" if is_active else "‚ùå"
            callback_data = f"toggle_interest_{interest.code}"
            
            keyboard.append([
                InlineKeyboardButton(
                    f"{status_icon} {interest.emoji} {interest.name}",
                    callback_data=callback_data
                )
            ])
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        action_buttons = [
            [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="save_interests")],
            [InlineKeyboardButton("üö´ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ–≥–æ", callback_data="disable_all_interests")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_main")],
        ]
        
        keyboard.extend(action_buttons)
        
        active_count = len(active_interests)
        menu_text = f"""
üéØ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏*

–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_count}/{len(all_interests)}

–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:
‚Ä¢ ‚úÖ - –ø–æ–¥–ø–∏—Å–∞–Ω
‚Ä¢ ‚ùå - –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω

*–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å ¬´üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è¬ª!*
"""
        
        return {
            'text': menu_text,
            'reply_markup': InlineKeyboardMarkup(keyboard),
            'parse_mode': 'Markdown'
        }
    
    @staticmethod
    async def create_calendar_menu(employee):
        """–ú–µ–Ω—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"""
        # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –ë–î
        calendar_text = """
üìÖ *–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ*

*–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:*
‚Ä¢ 15:00 ‚òïÔ∏è –¢–∞–π–Ω—ã–π –∫–æ—Ñ–µ —Å –∫–æ–ª–ª–µ–≥–æ–π

*–°—Ä–µ–¥–∞:*
‚Ä¢ 13:00 üçù –û–±–µ–¥ –≤—Å–ª–µ–ø—É—é
‚Ä¢ 18:00 ‚ôüÔ∏è –®–∞—Ö–º–∞—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä

*–ü—è—Ç–Ω–∏—Ü–∞:*
‚Ä¢ 17:00 üé≤ –í–µ—á–µ—Ä –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –∏–≥—Ä

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–∏–µ–º.
"""
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ", callback_data="confirm_participation")],
            [InlineKeyboardButton("‚è≠Ô∏è –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –≤—Å—Ç—Ä–µ—á–∏", callback_data="decline_activity")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="refresh_calendar")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_main")],
        ]
        
        return {
            'text': calendar_text,
            'reply_markup': InlineKeyboardMarkup(keyboard),
            'parse_mode': 'Markdown'
        }
    
    @staticmethod
    async def create_achievements_menu(employee):
        """–ú–µ–Ω—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        achievements_text = """
üèÜ *–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è*

*–ü–æ–ª—É—á–µ–Ω–æ: 3/8*

‚úÖ üéØ *–ü–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞*
   –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –ø–µ—Ä–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

‚úÖ ü¶ã *–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞* 
   –ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ 3 —Ä–∞–∑–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö

‚úÖ ‚òïÔ∏è *–ö–æ—Ñ–µ–º–∞–Ω*
   –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ 3 –¢–∞–π–Ω—ã—Ö –∫–æ—Ñ–µ

üîí ‚ôüÔ∏è *–®–∞—Ö–º–∞—Ç–Ω—ã–π –≥—Ä–æ—Å—Å–º–µ–π—Å—Ç–µ—Ä*
   –°—ã–≥—Ä–∞—Ç—å 10 –ø–∞—Ä—Ç–∏–π –≤ —à–∞—Ö–º–∞—Ç—ã (3/10)

üîí üèì *–ß–µ–º–ø–∏–æ–Ω –ø–æ —Ç–µ–Ω–Ω–∏—Å—É*
   –°—ã–≥—Ä–∞—Ç—å 15 –ø–∞—Ä—Ç–∏–π –≤ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å (0/15)

*–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!* üöÄ
"""
        
        keyboard = [
            [InlineKeyboardButton("üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º", callback_data="achievements_progress")],
            [InlineKeyboardButton("üèÖ –¢–æ–ø —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", callback_data="achievements_leaderboard")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_main")],
        ]
        
        return {
            'text': achievements_text,
            'reply_markup': InlineKeyboardMarkup(keyboard),
            'parse_mode': 'Markdown'
        }
    
    @staticmethod
    async def create_help_menu():
        """–ú–µ–Ω—é –ø–æ–º–æ—â–∏"""
        help_text = """
üÜò *–¶–µ–Ω—Ç—Ä –ø–æ–º–æ—â–∏ ConnectBot*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é  
/preferences - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

*–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*
"""
        
        keyboard = [
            [InlineKeyboardButton("‚ùì –ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã?", callback_data="help_interests")],
            [InlineKeyboardButton("‚ùì –ö–∞–∫ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?", callback_data="help_optout")],
            [InlineKeyboardButton("‚ùì –ù–µ –ø—Ä–∏—Ö–æ–¥—è—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="help_notifications")],
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", callback_data="help_contact_admin")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_main")],
        ]
        
        return {
            'text': help_text,
            'reply_markup': InlineKeyboardMarkup(keyboard),
            'parse_mode': 'Markdown'
        }
    
    @staticmethod
    async def create_settings_menu():
        """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        settings_text = """
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –ø–æ–¥ —Å–µ–±—è:

‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å—Ç–æ—Ç—ã –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
‚Ä¢ üë§ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ üåê –Ø–∑—ã–∫ - –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
‚Ä¢ üì± –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ - —Ç–µ–º—ã –∏ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥

*–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*
"""
        
        keyboard = [
            [InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notifications")],
            [InlineKeyboardButton("üë§ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è", callback_data="settings_profile")],
            [InlineKeyboardButton("üåê –Ø–∑—ã–∫", callback_data="settings_language")],
            [InlineKeyboardButton("üì± –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", callback_data="settings_theme")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_main")],
        ]
        
        return {
            'text': settings_text,
            'reply_markup': InlineKeyboardMarkup(keyboard),
            'parse_mode': 'Markdown'
        }
    
    @staticmethod
    async def create_back_button(target_menu="main"):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥"""
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"back_{target_menu}")]
        ])

    # Backwards-compatible aliases for older callers that expect get_* naming
    @staticmethod
    async def get_main_menu(*args, **kwargs):
        return await MenuManager.create_main_menu()

    @staticmethod
    async def get_profile_menu(employee, *args, **kwargs):
        return await MenuManager.create_profile_menu(employee)

    @staticmethod
    async def get_interests_menu(employee, *args, **kwargs):
        return await MenuManager.create_interests_menu(employee)

    @staticmethod
    async def get_calendar_menu(employee, *args, **kwargs):
        return await MenuManager.create_calendar_menu(employee)

    @staticmethod
    async def get_achievements_menu(employee, *args, **kwargs):
        return await MenuManager.create_achievements_menu(employee)

    @staticmethod
    async def get_help_menu(*args, **kwargs):
        return await MenuManager.create_help_menu()

    @staticmethod
    async def get_settings_menu(*args, **kwargs):
        return await MenuManager.create_settings_menu()

    @staticmethod
    async def get_back_button(target_menu="main", *args, **kwargs):
        return await MenuManager.create_back_button(target_menu)