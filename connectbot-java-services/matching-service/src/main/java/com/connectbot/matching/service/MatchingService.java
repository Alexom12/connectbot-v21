package com.connectbot.matching.service;

import com.connectbot.matching.model.Employee;
import com.connectbot.matching.model.EmployeePair;
import com.connectbot.matching.model.MatchingResult;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.*;
import java.util.stream.Collectors;
import com.connectbot.matching.dto.EmployeeDTO;
import com.connectbot.matching.client.DataApiClient;
import com.connectbot.matching.dto.dataapi.DataApiEmployeesResponseDTO;
import org.springframework.web.client.RestClientException;
import com.connectbot.matching.dto.MatchingRequestDTO;
import com.connectbot.matching.dto.EmployeePairDTO;
import com.connectbot.matching.dto.MatchingResponseDTO;

/**
 * –°–µ—Ä–≤–∏—Å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ matching –¥–ª—è ConnectBot
 * 
 * @author ConnectBot Team
 * @version 1.0.0
 */
@Service
public class MatchingService {

    private static final Logger logger = LoggerFactory.getLogger(MatchingService.class);
    private final DataApiClient dataApiClient;

    @Autowired
    public MatchingService(DataApiClient dataApiClient) {
        this.dataApiClient = dataApiClient;
    }

    /**
     * –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ matching –¥–ª—è –∫–æ—Ñ–µ
     * 
     * @param employees —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
     * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç matching —Å –ø–∞—Ä–∞–º–∏
     */
    public MatchingResult simpleRandomMatching(List<Employee> employees) {
        logger.info("üî• HOT-RELOAD TEST: v2 üî• –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ matching –¥–ª—è {} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
                employees.size());

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (employees == null || employees.isEmpty()) {
            logger.warn("–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è matching");
            return new MatchingResult(Collections.emptyList(), Collections.emptyList(), "SIMPLE_RANDOM");
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        List<Employee> activeEmployees = employees.stream()
                .filter(Employee::isActiveEmployee)
                .collect(Collectors.toList());

        logger.info("–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è matching: {}", activeEmployees.size());

        if (activeEmployees.size() < 2) {
            logger.warn("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2)");
            return new MatchingResult(Collections.emptyList(), activeEmployees, "SIMPLE_RANDOM");
        }

        // –°–ª—É—á–∞–π–Ω–æ–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ
        List<Employee> shuffledEmployees = new ArrayList<>(activeEmployees);
        Collections.shuffle(shuffledEmployees, new Random());

        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä
        List<EmployeePair> pairs = new ArrayList<>();
        List<Employee> unmatched = new ArrayList<>();

        for (int i = 0; i < shuffledEmployees.size(); i += 2) {
            if (i + 1 < shuffledEmployees.size()) {
                Employee emp1 = shuffledEmployees.get(i);
                Employee emp2 = shuffledEmployees.get(i + 1);

                EmployeePair pair = new EmployeePair(emp1, emp2);
                pairs.add(pair);

                logger.debug("–°–æ–∑–¥–∞–Ω–∞ –ø–∞—Ä–∞: {} & {}", emp1.getDisplayName(), emp2.getDisplayName());
            } else {
                // –ù–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –ø–∞—Ä—ã
                unmatched.add(shuffledEmployees.get(i));
                logger.debug("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {} –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –ø–∞—Ä—ã", shuffledEmployees.get(i).getDisplayName());
            }
        }

        MatchingResult result = new MatchingResult(pairs, unmatched, "SIMPLE_RANDOM");
        logger.info("Matching –∑–∞–≤–µ—Ä—à–µ–Ω: {} –ø–∞—Ä, {} –±–µ–∑ –ø–∞—Ä—ã, —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {:.1f}%",
                result.getTotalPairs(), unmatched.size(), result.getSuccessRate());

        return result;
    }

    /**
     * Adapter: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç DTO-–∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç DTO-—Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å
     * V1 API
     */
    public MatchingResponseDTO runSecretCoffee(MatchingRequestDTO request) {
        logger.info("Starting secret coffee matching, request_id={}", request.getRequestId());

        // 1. –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –∏–∑ Data API
        DataApiEmployeesResponseDTO employeesResponse;
        try {
            employeesResponse = dataApiClient.getEmployeesForMatching(request.getAlgorithmParams());
        } catch (RestClientException e) {
            logger.error("Failed to get employees from Data API: {}", e.getMessage());
            // Consider a more specific error DTO
            return new MatchingResponseDTO(request.getRequestId(), "error", "data_api_failed", null, null);
        }

        if (employeesResponse == null || employeesResponse.getEmployees() == null) {
            logger.warn("Data API returned null or empty employee list");
            return new MatchingResponseDTO(request.getRequestId(), "error", "no_employees_from_api", null, null);
        }

        List<Employee> employees = employeesResponse.getEmployees().stream()
                .map(Employee::fromDTO)
                .collect(Collectors.toList());

        logger.info("Received {} employees from Data API", employees.size());

        // 2. –í—ã–ø–æ–ª–Ω–∏—Ç—å matching
        MatchingResult result = simpleRandomMatching(employees);
        logger.info("Matching complete, created {} pairs", result.getPairs().size());

        // 3. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ DTO
        List<EmployeePairDTO> pairDTOs = result.getPairs().stream()
                .map(EmployeePair::toDTO)
                .collect(Collectors.toList());

        MatchingResponseDTO randomResult = new MatchingResponseDTO(
                request.getRequestId(),
                "ok",
                null,
                pairDTOs,
                result.getMeta());
        randomResult.setAlgorithm("simple_random");
        return randomResult;
    }

    /**
     * Run secret coffee matching by fetching employees from Data API using provided
     * body parameters.
     */
    public MatchingResponseDTO runSecretCoffeeFromApi(java.util.Map<String, Object> body) {
        try {
            DataApiEmployeesResponseDTO resp = dataApiClient.getEmployeesForMatching(body);
            MatchingRequestDTO request = new MatchingRequestDTO();
            request.setEmployees(resp.getEmployees());
            return runSecretCoffee(request);
        } catch (RestClientException ex) {
            logger.error("Failed to fetch employees from Data API: {}", ex.getMessage());
            throw ex;
        }
    }

    public boolean isHealthy() {
        try {
            return dataApiClient == null || dataApiClient.healthCheck();
        } catch (Exception ex) {
            logger.warn("MatchingService health check failed: {}", ex.getMessage());
            return false;
        }
    }

    /**
     * –ê–ª–≥–æ—Ä–∏—Ç–º matching —Å —É—á–µ—Ç–æ–º –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
     * 
     * @param employees —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
     * @param interest  –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
     * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç matching
     */
    public MatchingResult interestBasedMatching(List<Employee> employees, String interest) {
        logger.info("–ó–∞–ø—É—Å–∫ interest-based matching –¥–ª—è –∏–Ω—Ç–µ—Ä–µ—Å–∞ '{}' –∏ {} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
                interest, employees.size());

        if (employees == null || employees.isEmpty()) {
            return new MatchingResult(Collections.emptyList(), Collections.emptyList(), "INTEREST_BASED");
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É
        List<Employee> interestedEmployees = employees.stream()
                .filter(Employee::isActiveEmployee)
                .filter(emp -> emp.hasInterest(interest))
                .collect(Collectors.toList());

        logger.info("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –∏–Ω—Ç–µ—Ä–µ—Å–æ–º '{}': {}", interest, interestedEmployees.size());

        if (interestedEmployees.size() < 2) {
            List<Employee> unmatched = employees.stream()
                    .filter(Employee::isActiveEmployee)
                    .collect(Collectors.toList());
            return new MatchingResult(Collections.emptyList(), unmatched, "INTEREST_BASED");
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–ª—É—á–∞–π–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º
        return simpleRandomMatching(interestedEmployees);
    }

    /**
     * –ê–ª–≥–æ—Ä–∏—Ç–º matching —Å —É—á–µ—Ç–æ–º –æ—Ç–¥–µ–ª–æ–≤ (–∏–∑–±–µ–≥–∞–µ–º –∫–æ–ª–ª–µ–≥ –∏–∑ –æ–¥–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞)
     * 
     * @param employees —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
     * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç matching
     */
    public MatchingResult crossDepartmentMatching(List<Employee> employees) {
        logger.info("–ó–∞–ø—É—Å–∫ cross-department matching –¥–ª—è {} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", employees.size());

        if (employees == null || employees.isEmpty()) {
            return new MatchingResult(Collections.emptyList(), Collections.emptyList(), "CROSS_DEPARTMENT");
        }

        List<Employee> activeEmployees = employees.stream()
                .filter(Employee::isActiveEmployee)
                .collect(Collectors.toList());

        if (activeEmployees.size() < 2) {
            return new MatchingResult(Collections.emptyList(), activeEmployees, "CROSS_DEPARTMENT");
        }

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –æ—Ç–¥–µ–ª–∞–º
        Map<String, List<Employee>> departmentGroups = activeEmployees.stream()
                .collect(Collectors
                        .groupingBy(emp -> emp.getDepartment() != null ? emp.getDepartment() : "NO_DEPARTMENT"));

        List<EmployeePair> pairs = new ArrayList<>();
        List<Employee> unmatched = new ArrayList<>();
        Set<Employee> matched = new HashSet<>();

        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤
        List<String> departments = new ArrayList<>(departmentGroups.keySet());

        for (int i = 0; i < departments.size(); i++) {
            for (int j = i + 1; j < departments.size(); j++) {
                List<Employee> dept1 = departmentGroups.get(departments.get(i));
                List<Employee> dept2 = departmentGroups.get(departments.get(j));

                // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã –º–µ–∂–¥—É –æ—Ç–¥–µ–ª–∞–º–∏
                int pairsToCreate = Math.min(dept1.size(), dept2.size());
                for (int k = 0; k < pairsToCreate; k++) {
                    Employee emp1 = dept1.get(k);
                    Employee emp2 = dept2.get(k);

                    if (!matched.contains(emp1) && !matched.contains(emp2)) {
                        pairs.add(new EmployeePair(emp1, emp2));
                        matched.add(emp1);
                        matched.add(emp2);
                    }
                }
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤ unmatched
        unmatched.addAll(activeEmployees.stream()
                .filter(emp -> !matched.contains(emp))
                .collect(Collectors.toList()));

        MatchingResult result = new MatchingResult(pairs, unmatched, "CROSS_DEPARTMENT");
        logger.info("Cross-department matching –∑–∞–≤–µ—Ä—à–µ–Ω: {} –ø–∞—Ä, {} –±–µ–∑ –ø–∞—Ä—ã",
                pairs.size(), unmatched.size());

        return result;
    }

    /**
     * –ü—Ä–∏–º–µ—Ä —Å–ª–æ–∂–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ matching (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π)
     * 
     * @param request –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
     * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç matching
     */
    public MatchingResponseDTO runAdvancedMatching(MatchingRequestDTO request) {
        logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ matching –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ {}", request.getRequestId());

        // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞, –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–ª—É—á–∞–π–Ω—ã–π
        MatchingResponseDTO randomResult = runSecretCoffee(request);

        // –ü—Ä–∏–º–µ—Ä –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        randomResult.setRequestId(request.getRequestId());
        randomResult.setAlgorithm("ADVANCED_RANDOM");

        logger.info("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π matching –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ {}", request.getRequestId());
        return randomResult;
    }
}